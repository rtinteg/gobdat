{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.6", "generated_at": "2025-08-05T10:09:46.461402Z", "invocation_id": "f01e57e2-d89c-453e-9956-461c70cf812f", "invocation_started_at": "2025-08-05T10:09:41.892828Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:45.960539Z", "completed_at": "2025-08-05T10:09:45.972974Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:45.973776Z", "completed_at": "2025-08-05T10:09:45.973798Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015079259872436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.SDG_Vault_demo.prueba", "compiled": true, "compiled_code": "select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:45.977340Z", "completed_at": "2025-08-05T10:09:45.989573Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:45.990039Z", "completed_at": "2025-08-05T10:09:45.990048Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014662027359008789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.bridge_pedidos", "compiled": true, "compiled_code": "\n\nwith\n    bridge_pedido as (\n        select\n            md5(\n                upper(trim(nvl(hp.clave_pedido, '')))\n                || upper(trim(nvl(hp.empleado, '')))\n                || upper(trim(nvl(hc.nombre_cliente, '')))\n                || upper(trim(nvl(hn.nombre_pais, '')))\n            ) as bridge_pedido_id,\n            current_date fecha_carga,\n            hp.hub_pedido_id,\n            hp.clave_pedido,\n            hp.empleado,\n            lcp.lnk_cliente_pedido_id,\n            hc.hub_cliente_id,\n            hc.nombre_cliente,\n            lpc.lnk_pais_cliente_id,\n            hn.hub_pais_id,\n            hn.nombre_pais\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PEDIDOS hp\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_CLIENTES_PEDIDOS lcp\n            on hp.hub_pedido_id = lcp.hub_pedido_id\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES hc\n            on hc.hub_cliente_id = lcp.hub_cliente_id\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PAISES_CLIENTES lpc\n            on lpc.hub_cliente_id = hc.hub_cliente_id\n        join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PAISES hn on hn.hub_pais_id = lpc.hub_pais_id\n    )\nselect *\nfrom bridge_pedido\n\n\n    where bridge_pedido_id not in (select bridge_pedido_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.bridge_pedidos)\n", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.bridge_pedidos", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:45.991381Z", "completed_at": "2025-08-05T10:09:45.997577Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:45.998123Z", "completed_at": "2025-08-05T10:09:45.998132Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0074269771575927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.dim1_clientes", "compiled": true, "compiled_code": "\n\nwith\n    dim1_clientes as (\n        select\n            hc.hub_cliente_id as dim1_cliente_id,\n            hc.nombre_cliente,\n            sc.segmento_marketing,\n            sc.fecha_carga as fecha,\n            sc.c_origen as origen\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES hc\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.PIT_CLIENTES pit\n            on hc.hub_cliente_id = pit.hub_cliente_id\n        left join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA sc\n            on sc.hub_cliente_id = pit.hub_cliente_id\n            and sc.fecha_carga = pit.fecha_cliente_cuenta\n            and sc.fecha_carga = (\n                select max(sc2.fecha_carga)\n                from SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA sc2\n                where sc.hub_cliente_id = sc2.hub_cliente_id\n            )\n    ),\n    filtrado as (\n        select s.*\n        from dim1_clientes s\n        left join\n            SDGVAULTMART.DBT_SDGVAULT_GOLD.dim1_clientes t\n            on s.dim1_cliente_id = t.dim1_cliente_id\n            and s.nombre_cliente = t.nombre_cliente\n            and s.segmento_marketing = t.segmento_marketing\n            and s.fecha = t.fecha\n            and s.origen = t.origen\n        where t.dim1_cliente_id is null\n    )\nselect *\nfrom filtrado", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_GOLD.dim1_clientes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.000448Z", "completed_at": "2025-08-05T10:09:46.009390Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.010064Z", "completed_at": "2025-08-05T10:09:46.010074Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01074981689453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.dim1_paises", "compiled": true, "compiled_code": "\n\nwith\n    dim1_paises as (\n\n        select\n            rp.hub_pais_id as dim1_pais_id,\n            rp.hub_region_id as dim1_region_id,\n            rp.nombre_pais,\n            rp.nombre_region,\n            rp.fecha_carga as fecha_actual,\n            rp.origen_pais as origen\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_REGIONES_PAISES rp\n        join SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PAISES sp on rp.hub_pais_id = sp.hub_pais_id\n        where\n            sp.fecha_carga = (\n                select max(sp2.fecha_carga)\n                from SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PAISES sp2\n                where sp2.hub_pais_id = sp.hub_pais_id\n            )\n\n    ),\n    filtrado as (\n        select s.*\n        from dim1_paises s\n        left join\n            SDGVAULTMART.DBT_SDGVAULT_SILVER.dim1_paises t\n            on s.dim1_pais_id = t.dim1_pais_id\n            and s.dim1_region_id = t.dim1_region_id\n            and s.nombre_pais = t.nombre_pais\n            and s.nombre_region = t.nombre_region\n            and s.origen = t.origen\n        where t.dim1_pais_id is null\n    )\nselect *\nfrom filtrado", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_SILVER.dim1_paises", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.012959Z", "completed_at": "2025-08-05T10:09:46.021564Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.022298Z", "completed_at": "2025-08-05T10:09:46.022314Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01090550422668457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.dim2_clientes", "compiled": true, "compiled_code": "\n\nwith\n    sat_clientes_cuenta as (\n        select\n            sc.hub_cliente_id,\n            hc.nombre_cliente,\n            sc.segmento_marketing,\n            sc.c_origen as origen,\n            sc.fecha_carga as fecha_inicial_validez,\n            lead(sc.fecha_carga) over (\n                partition by sc.hub_cliente_id order by sc.fecha_carga\n            ) as fecha_final_validez\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA sc\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES hc\n            on hc.hub_cliente_id = sc.hub_cliente_id\n    ),\n    con_ids as (\n        select\n            md5(\n                upper(trim(nvl(nombre_cliente, '')))\n                || to_char(fecha_inicial_validez, 'YYYY-MM-DD')\n            ) as dim2_cliente_id,\n            nombre_cliente,\n            segmento_marketing,\n            origen,\n            fecha_inicial_validez,\n            fecha_final_validez\n        from sat_clientes_cuenta\n    ),\n    filtrado as (\n        select c.*\n        from con_ids c\n        left join SDGVAULTMART.DBT_SDGVAULT_SILVER.dim2_clientes t on c.dim2_cliente_id = t.dim2_cliente_id\n        where t.dim2_cliente_id is null\n    )\nselect *\nfrom filtrado", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_SILVER.dim2_clientes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.024670Z", "completed_at": "2025-08-05T10:09:46.031461Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.031869Z", "completed_at": "2025-08-05T10:09:46.031875Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008177042007446289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.fact_clientes_cuentas", "compiled": true, "compiled_code": "\n\nwith\n    max_fecha as (\n        select hub_cliente_id, max(fecha_carga) as fecha_cliente_cuenta\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA\n        group by hub_cliente_id\n    ),\n    pit_enriquecido as (\n        select pit.hub_cliente_id, mf.fecha_cliente_cuenta\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.PIT_CLIENTES pit\n        join max_fecha mf on pit.hub_cliente_id = mf.hub_cliente_id\n    ),\n    fact_clientes_cuentas as (\n        select\n            pit.hub_cliente_id,\n            sc.cuenta_balance,\n            sc.fecha_carga as fecha,\n            sc.c_origen as origen\n        from pit_enriquecido pit\n        left join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA sc\n            on sc.hub_cliente_id = pit.hub_cliente_id\n            and sc.fecha_carga = pit.fecha_cliente_cuenta\n    )\n-- Solo inserta registros que no existen a\u00fan en la tabla de hechos\nselect *\nfrom fact_clientes_cuentas f\n\n    where\n        not exists (\n            select 1\n            from SDGVAULTMART.DBT_SDGVAULT_SILVER.fact_clientes_cuentas t\n            where f.hub_cliente_id = t.hub_cliente_id and f.fecha = t.fecha\n        )\n", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_SILVER.fact_clientes_cuentas", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.033463Z", "completed_at": "2025-08-05T10:09:46.040918Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.041501Z", "completed_at": "2025-08-05T10:09:46.041510Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008856534957885742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.fact_clientes_pedidos", "compiled": true, "compiled_code": "\n\nwith\n    base as (\n        select\n            bp.hub_pedido_id,\n            bp.hub_cliente_id,\n            bp.hub_pais_id,\n            bp.fecha_carga,\n            lp.linea_pedido,\n            sp.precio_total\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.BRIDGE_PEDIDOS bp\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PEDIDOS sp on bp.hub_pedido_id = sp.hub_pedido_id\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PEDIDOS_LINEAS_PEDIDOS lp\n            on bp.hub_pedido_id = lp.hub_pedido_id\n\n        \n            -- Solo considerar nuevas fechas de carga en modo incremental\n            where bp.fecha_carga > (select max(fecha_carga) from SDGVAULTMART.DBT_SDGVAULT_GOLD.fact_clientes_pedidos)\n        \n    ),\n    agregado as (\n        select\n            hub_pedido_id,\n            hub_cliente_id,\n            hub_pais_id,\n            fecha_carga,\n            sum(precio_total) as precio_total_acumulado,\n            sum(linea_pedido) as cantidad_lineas_pedido\n        from base\n        group by hub_pedido_id, hub_cliente_id, hub_pais_id, fecha_carga\n    )\nselect *\nfrom agregado", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_GOLD.fact_clientes_pedidos", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.044047Z", "completed_at": "2025-08-05T10:09:46.050782Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.051354Z", "completed_at": "2025-08-05T10:09:46.051363Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008552312850952148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.hub_clientes", "compiled": true, "compiled_code": "\n\nwith\n    hub_paises as (\n        \n            select\n                md5(upper(trim(nvl(c_name, '')))) as hub_cliente_id,\n                c_name as nombre_cliente,\n                current_date as fecha_carga,\n                c_origen as origen\n            from SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES\n            where c_name not in (select nombre_cliente from SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_clientes)\n        \n    )\nselect *\nfrom hub_paises", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_clientes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.053194Z", "completed_at": "2025-08-05T10:09:46.056841Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.057163Z", "completed_at": "2025-08-05T10:09:46.057168Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004786014556884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.hub_lineas_pedidos", "compiled": true, "compiled_code": "with\n    hub_lineas_pedidos as (\n        select\n            md5(\n                upper(trim(nvl(l_orderkey, ''))) || upper(trim(nvl(l_linenumber, '')))\n            ) as hub_lineas_pedido_id,\n            l_orderkey as clave_pedido,\n            l_linenumber as linea_pedido,\n            current_date as fecha_carga,\n            l_origen as origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_LINEAS_PEDIDO\n    )\nselect *\nfrom hub_lineas_pedidos", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_lineas_pedidos", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.058323Z", "completed_at": "2025-08-05T10:09:46.061570Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.061830Z", "completed_at": "2025-08-05T10:09:46.061835Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004024982452392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.hub_paises", "compiled": true, "compiled_code": "\n\nwith\n    hub_paises as (\n        \n            select\n                md5(upper(trim(nvl(n_name, '')))) as hub_pais_id,\n                n_name as nombre_pais,\n                current_date as fecha_carga,\n                n_origen as origen\n            from SDGVAULTMART.DBT_SDGVAULT.STG_PAISES\n            where n_name not in (select nombre_pais from SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_paises)\n        \n    )\nselect *\nfrom hub_paises", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_paises", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.062851Z", "completed_at": "2025-08-05T10:09:46.065073Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.065331Z", "completed_at": "2025-08-05T10:09:46.065335Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.002965211868286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.hub_partes", "compiled": true, "compiled_code": "with\n    hub_partes as (\n        select\n            md5(\n                upper(trim(nvl(p_name, ''))) || upper(trim(nvl(p_brand, '')))\n            ) as hub_parte_id,\n            p_name as nombre_parte,\n            p_brand as nombre_marca,\n            current_date as fecha_carga,\n            p_origen as origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PARTES\n    )\nselect *\nfrom hub_partes", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_partes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.066346Z", "completed_at": "2025-08-05T10:09:46.071011Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.071290Z", "completed_at": "2025-08-05T10:09:46.071295Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005427837371826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.hub_pedidos", "compiled": true, "compiled_code": "\n\nwith\n    hub_pedidos as (\n        \n            select\n                md5(\n                    upper(trim(nvl(o_orderkey, ''))) || upper(trim(nvl(o_clerk, '')))\n                ) as hub_pedido_id,\n                o_orderkey as clave_pedido,\n                o_clerk as empleado,\n                current_date as fecha_carga,\n                o_origen as origen\n            from SDGVAULTMART.DBT_SDGVAULT.STG_PEDIDOS\n            where\n                (o_orderkey, o_clerk)\n                not in (select clave_pedido, empleado from SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_pedidos)\n        \n    )\nselect *\nfrom hub_pedidos", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_pedidos", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.072700Z", "completed_at": "2025-08-05T10:09:46.075184Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.075453Z", "completed_at": "2025-08-05T10:09:46.075457Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0034656524658203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.hub_proveedores", "compiled": true, "compiled_code": "with\n    hub_proveedores as (\n        select\n            md5(upper(trim(nvl(s_name, '')))) as hub_proveedor_id,\n            s_name as nombre_proveedor,\n            current_date as fecha_carga,\n            s_origen as origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES\n    )\nselect *\nfrom hub_proveedores", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_proveedores", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.076456Z", "completed_at": "2025-08-05T10:09:46.078705Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.078955Z", "completed_at": "2025-08-05T10:09:46.078959Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0029489994049072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.hub_regiones", "compiled": true, "compiled_code": "with\n    hub_regiones as (\n        select\n            md5(upper(trim(nvl(r_name, '')))) as hub_region_id,\n            r_name as nombre_region,\n            current_date as fecha_carga,\n            r_origen as origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_REGIONES\n    )\nselect *\nfrom hub_regiones", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_regiones", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.079965Z", "completed_at": "2025-08-05T10:09:46.084645Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.084979Z", "completed_at": "2025-08-05T10:09:46.084985Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00549626350402832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.lnk_clientes_pedidos", "compiled": true, "compiled_code": "\n\nwith\n    hub_clientes as (\n        select hub_cliente_id, nombre_cliente, from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES\n    ),\n    hub_pedidos as (\n        select hub_pedido_id, clave_pedido, empleado\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PEDIDOS\n    ),\n    stg_clientes_pedidos as (\n        select a.c_name, b.o_orderkey, b.o_clerk, a.c_origen, b.o_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PEDIDOS b\n        where a.c_custkey = b.o_custkey\n    ),\n    combinaciones as (\n        select\n            md5(\n                upper(trim(nvl(p1.nombre_cliente, '')))\n                || upper(trim(nvl(clave_pedido, '')))\n                || upper(trim(nvl(empleado, '')))\n            ) as lnk_cliente_pedido_id,\n            p1.hub_cliente_id,\n            p2.hub_pedido_id,\n            p1.nombre_cliente,\n            p2.clave_pedido,\n            p2.empleado,\n            current_date as fecha_carga,\n            c_origen as origen_cliente,\n            o_origen as origen_pedido\n        from hub_clientes p1, hub_pedidos p2, stg_clientes_pedidos p3\n        where\n            p1.nombre_cliente = p3.c_name\n            and (p2.clave_pedido = p3.o_orderkey and p2.empleado = p3.o_clerk)\n    )\n\nselect *\nfrom combinaciones\n\n\n    where lnk_cliente_pedido_id not in (select lnk_cliente_pedido_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_clientes_pedidos)\n", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_clientes_pedidos", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.086264Z", "completed_at": "2025-08-05T10:09:46.090109Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.090400Z", "completed_at": "2025-08-05T10:09:46.090405Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004743814468383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.lnk_paises_clientes", "compiled": true, "compiled_code": "\n\nwith\n    hub_paises as (\n        select hub_pais_id, nombre_pais, from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PAISES\n    ),\n    hub_clientes as (\n        select hub_cliente_id, nombre_cliente from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES\n    ),\n    stg_paises_clientes as (\n        select a.n_name, b.c_name, a.n_origen, b.c_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PAISES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES b\n        where a.n_nationkey = b.c_nationkey\n    ),\n    combinaciones as (\n        select\n            md5(\n                upper(trim(nvl(p1.nombre_pais, '')))\n                || upper(trim(nvl(p2.nombre_cliente, '')))\n            ) as lnk_pais_cliente_id,\n            p1.hub_pais_id,\n            p2.hub_cliente_id,\n            p1.nombre_pais,\n            p2.nombre_cliente,\n            current_date as fecha_carga,\n            p3.n_origen as origen_pais,\n            p3.c_origen as origen_cliente\n        from hub_paises p1, hub_clientes p2, stg_paises_clientes p3\n        where p1.nombre_pais = p3.n_name and p2.nombre_cliente = p3.c_name\n    )\n\nselect *\nfrom combinaciones\n\n\n    where lnk_pais_cliente_id not in (select lnk_pais_cliente_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_paises_clientes)\n", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_paises_clientes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.091626Z", "completed_at": "2025-08-05T10:09:46.096480Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.096776Z", "completed_at": "2025-08-05T10:09:46.096781Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005776166915893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.lnk_paises_proveedores", "compiled": true, "compiled_code": "\n\nwith\n    hub_paises as (\n        select hub_pais_id, nombre_pais from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PAISES\n    ),\n    hub_proveedores as (\n        select hub_proveedor_id, nombre_proveedor\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PROVEEDORES\n    ),\n    stg_paises_proveedores as (\n        select a.n_name, b.s_name, a.n_origen, b.s_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PAISES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES b on a.n_nationkey = b.s_nationkey\n    ),\n    combinaciones as (\n        select\n            md5(\n                upper(trim(coalesce(p1.nombre_pais, '')))\n                || upper(trim(coalesce(p2.nombre_proveedor, '')))\n            ) as lnk_pais_proveedor_id,\n            p1.hub_pais_id,\n            p2.hub_proveedor_id,\n            p1.nombre_pais,\n            p2.nombre_proveedor,\n            current_date as fecha_carga,\n            p3.n_origen as origen_pais,\n            p3.s_origen as origen_proveedor\n        from hub_paises p1\n        join stg_paises_proveedores p3 on p1.nombre_pais = p3.n_name\n        join hub_proveedores p2 on p2.nombre_proveedor = p3.s_name\n    )\n\nselect *\nfrom combinaciones\n\n\n    -- Evita insertar v\u00ednculos ya existentes\n    where lnk_pais_proveedor_id not in (select lnk_pais_proveedor_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_paises_proveedores)\n", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_paises_proveedores", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.097921Z", "completed_at": "2025-08-05T10:09:46.101244Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.101557Z", "completed_at": "2025-08-05T10:09:46.101562Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004171133041381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.lnk_partes_lineas_pedidos", "compiled": true, "compiled_code": "with\n    hub_partes as (\n        select hub_parte_id, nombre_parte, nombre_marca\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PARTES\n    ),\n    hub_lineas_pedidos as (\n        select hub_lineas_pedido_id, clave_pedido, linea_pedido\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_LINEAS_PEDIDOS\n    ),\n    stg_partes_lineas_pedidos as (\n        select a.p_name, a.p_brand, b.l_orderkey, b.l_linenumber, a.p_origen, b.l_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PARTES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_LINEAS_PEDIDO b\n        where a.p_partkey = b.l_partkey\n    )\nselect\n    md5(\n        upper(trim(nvl(nombre_parte, '')))\n        || upper(trim(nvl(nombre_marca, '')))\n        || upper(trim(nvl(l_orderkey, '')))\n        || upper(trim(nvl(l_linenumber, '')))\n    ) as lnk_parte_lin_pedido_id,\n    p1.hub_parte_id,\n    p2.hub_lineas_pedido_id,\n    p1.nombre_parte,\n    p1.nombre_marca,\n    p2.clave_pedido,\n    p2.linea_pedido,\n    current_date as fecha_carga,\n    p3.p_origen as origen_parte,\n    p3.l_origen as origen_linea_pedido\nfrom hub_partes p1, hub_lineas_pedidos p2, stg_partes_lineas_pedidos p3\nwhere\n    (p1.nombre_parte = p3.p_name and p1.nombre_marca = p3.p_brand)\n    and (p2.clave_pedido = p3.l_orderkey and p2.linea_pedido = p3.l_linenumber)", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_partes_lineas_pedidos", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.102791Z", "completed_at": "2025-08-05T10:09:46.106555Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.106862Z", "completed_at": "2025-08-05T10:09:46.106867Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004662036895751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.lnk_pedidos_lineas_pedidos", "compiled": true, "compiled_code": "with\n    hub_pedidos as (\n        select hub_pedido_id, clave_pedido, empleado\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PEDIDOS\n    ),\n    hub_lineas_pedidos as (\n        select hub_lineas_pedido_id, clave_pedido, linea_pedido\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_LINEAS_PEDIDOS\n    ),\n    stg_pedidos_lineas_pedidos as (\n        select\n            a.o_orderkey,\n            a.o_clerk,\n            b.l_orderkey,\n            b.l_linenumber,\n            a.o_origen,\n            b.l_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PEDIDOS a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_LINEAS_PEDIDO b\n        where a.o_orderkey = b.l_orderkey\n    )\nselect\n    md5(\n        upper(trim(nvl(o_orderkey, '')))\n        || upper(trim(nvl(o_clerk, '')))\n        || upper(trim(nvl(l_orderkey, '')))\n        || upper(trim(nvl(l_linenumber, '')))\n    ) as lnk_pedido_lin_pedido_id,\n    p1.hub_pedido_id,\n    p2.hub_lineas_pedido_id,\n    p1.clave_pedido,\n    p1.empleado,\n    p2.linea_pedido,\n    current_date as fecha_carga,\n    p3.o_origen as origen_pedido,\n    p3.l_origen as origen_linea_pedido\nfrom hub_pedidos p1, hub_lineas_pedidos p2, stg_pedidos_lineas_pedidos p3\nwhere\n    (p1.clave_pedido = p3.o_orderkey and p1.empleado = p3.o_clerk)\n    and (p2.clave_pedido = p3.l_orderkey and p2.linea_pedido = p3.l_linenumber)", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_pedidos_lineas_pedidos", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.108067Z", "completed_at": "2025-08-05T10:09:46.113356Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.113841Z", "completed_at": "2025-08-05T10:09:46.113849Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006371736526489258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.lnk_proveedores_lineas_pedidos", "compiled": true, "compiled_code": "with\n    hub_proveedores as (\n        select hub_proveedor_id, nombre_proveedor\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PROVEEDORES\n    ),\n    hub_lineas_pedidos as (\n        select hub_lineas_pedido_id, clave_pedido, linea_pedido\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_LINEAS_PEDIDOS\n    ),\n    stg_proveedores_lineas_pedidos as (\n        select a.s_name, b.l_orderkey, b.l_linenumber, a.s_origen, b.l_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_LINEAS_PEDIDO b\n        where a.s_suppkey = b.l_suppkey\n    )\nselect\n    md5(\n        upper(trim(nvl(nombre_proveedor, '')))\n        || upper(trim(nvl(l_orderkey, '')))\n        || upper(trim(nvl(l_linenumber, '')))\n    ) as lnk_proveedor_lin_pedido_id,\n    p1.hub_proveedor_id,\n    p2.hub_lineas_pedido_id,\n    p1.nombre_proveedor,\n    p2.clave_pedido,\n    p2.linea_pedido,\n    current_date as fecha_carga,\n    p3.s_origen as origen_proveedor,\n    p3.l_origen as origen_linea_pedido\nfrom hub_proveedores p1, hub_lineas_pedidos p2, stg_proveedores_lineas_pedidos p3\nwhere\n    p1.nombre_proveedor = p3.s_name\n    and (p2.clave_pedido = p3.l_orderkey and p2.linea_pedido = p3.l_linenumber)", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_proveedores_lineas_pedidos", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.115550Z", "completed_at": "2025-08-05T10:09:46.119956Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.120311Z", "completed_at": "2025-08-05T10:09:46.120317Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005528926849365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.lnk_proveedores_partes", "compiled": true, "compiled_code": "with\n    hub_proveedores as (\n        select hub_proveedor_id, nombre_proveedor,\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PROVEEDORES\n    ),\n    hub_partes as (\n        select hub_parte_id, nombre_parte, nombre_marca\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PARTES\n    ),\n    stg_proveedores_partes as (\n        select a.s_name, c.p_name, c.p_brand, a.s_origen, c.p_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PARTES_PROVEEDOR b on a.s_suppkey = b.ps_suppkey\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PARTES c on b.ps_partkey = c.p_partkey\n    )\nselect\n    md5(\n        upper(trim(nvl(p1.nombre_proveedor, '')))\n        || upper(trim(nvl(p2.nombre_parte, '')))\n        || upper(trim(nvl(p2.nombre_marca, '')))\n    ) as lnk_proveedor_parte_id,\n    p1.hub_proveedor_id,\n    p2.hub_parte_id,\n    p1.nombre_proveedor,\n    p2.nombre_parte,\n    p2.nombre_marca,\n    current_date as fecha_carga,\n    p3.s_origen as origen_proveedor,\n    p3.p_origen as origen_parte\nfrom hub_proveedores p1, hub_partes p2, stg_proveedores_partes p3\nwhere\n    p1.nombre_proveedor = p3.s_name\n    and (p2.nombre_parte = p3.p_name and p2.nombre_marca = p3.p_brand)", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_proveedores_partes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.121653Z", "completed_at": "2025-08-05T10:09:46.126522Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.126898Z", "completed_at": "2025-08-05T10:09:46.126904Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005856513977050781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.lnk_regiones_paises", "compiled": true, "compiled_code": "\n\nwith\n    hub_regiones as (\n        select hub_region_id, nombre_region from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_REGIONES\n    ),\n    hub_paises as (\n        select hub_pais_id, nombre_pais, from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PAISES\n    ),\n    stg_regiones_paises as (\n        select a.n_name, b.r_name, a.n_origen, b.r_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PAISES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_REGIONES b\n        where a.n_regionkey = b.r_regionkey\n    ),\n    combinaciones as (\n        select\n            md5(\n                upper(trim(nvl(p1.nombre_region, '')))\n                || upper(trim(nvl(p2.nombre_pais, '')))\n            ) as lnk_regiones_paises_id,\n            p1.hub_region_id,\n            p2.hub_pais_id,\n            p1.nombre_region,\n            p2.nombre_pais,\n            current_date as fecha_carga,\n            p3.r_origen as origen_region,\n            p3.n_origen as origen_pais\n        from hub_regiones p1, hub_paises p2, stg_regiones_paises p3\n        where p1.nombre_region = p3.r_name and p2.nombre_pais = p3.n_name\n    )\n\nselect *\nfrom combinaciones\n\n\n    where lnk_regiones_paises_id not in (select lnk_regiones_paises_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_regiones_paises)\n", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_regiones_paises", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.128208Z", "completed_at": "2025-08-05T10:09:46.132581Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.132922Z", "completed_at": "2025-08-05T10:09:46.132927Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005326509475708008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.pit_clientes", "compiled": true, "compiled_code": "-- Tabla PIT PIT_CLIENTES para la obtenci\u00f3n eficiente del hist\u00f3rico persistido en las\n-- tablas satelites de Cliente\n\n\nwith\n    sat_contacto as (\n        select hub_cliente_id, max(fecha_carga) as fecha_cliente_contacto\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CONTACTO\n        group by hub_cliente_id\n    ),\n    sat_cuenta as (\n        select hub_cliente_id, max(fecha_carga) as fecha_cliente_cuenta\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA\n        group by hub_cliente_id\n    ),\n    pit_clientes as (\n        select\n            h.hub_cliente_id,\n            current_date as pit_fecha,\n            s1.fecha_cliente_contacto,\n            s2.fecha_cliente_cuenta\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES h\n        left join sat_contacto s1 on h.hub_cliente_id = s1.hub_cliente_id\n        left join sat_cuenta s2 on h.hub_cliente_id = s2.hub_cliente_id\n    ),\n    filtrado as (\n        select p.*\n        from pit_clientes p\n        left join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.pit_clientes t\n            on p.hub_cliente_id = t.hub_cliente_id\n            and p.fecha_cliente_contacto = t.fecha_cliente_contacto\n            and p.fecha_cliente_cuenta = t.fecha_cliente_cuenta\n        where t.hub_cliente_id is null\n    )\nselect *\nfrom filtrado", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.pit_clientes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.134256Z", "completed_at": "2025-08-05T10:09:46.139162Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.139543Z", "completed_at": "2025-08-05T10:09:46.139549Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0059244632720947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.sat_clientes_contacto", "compiled": true, "compiled_code": "\n\nwith\n    sat_clientes_contacto as (\n        \n\n            select\n                b.hub_cliente_id,\n                current_date as fecha_carga,\n                md5(\n                    upper(trim(nvl(c_address, '')))\n                    || upper(trim(nvl(c_comment, '')))\n                    || upper(trim(nvl(c_phone, '')))\n                    || upper(trim(nvl(c_origen, '')))\n                ) as foto_cliente,\n                a.c_origen,\n                a.c_address as direccion,\n                a.c_comment as comentario,\n                a.c_phone as telefono\n            from SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES a\n            join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES b on a.c_name = b.nombre_cliente\n            where hub_cliente_id not in (select hub_cliente_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_clientes_contacto)\n        \n    )\nselect *\nfrom sat_clientes_contacto", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_clientes_contacto", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.140931Z", "completed_at": "2025-08-05T10:09:46.147345Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.147837Z", "completed_at": "2025-08-05T10:09:46.147845Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0075914859771728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.sat_clientes_cuenta", "compiled": true, "compiled_code": "\n\nwith\n    sat_clientes_cuenta as (\n        \n            select\n                b.hub_cliente_id,\n                current_date as fecha_carga,\n                md5(\n                    upper(trim(nvl(c_acctbal, '')))\n                    || upper(trim(nvl(c_comment, '')))\n                    || upper(trim(nvl(c_mktsegment, '')))\n                    || upper(trim(nvl(c_origen, '')))\n                ) as foto_cliente,\n                a.c_origen,\n                a.c_acctbal as cuenta_balance,\n                a.c_comment as comentario,\n                a.c_mktsegment as segmento_marketing\n            from SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES a\n            join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES b on a.c_name = b.nombre_cliente\n            where hub_cliente_id not in (select hub_cliente_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_clientes_cuenta)\n        \n    )\nselect *\nfrom sat_clientes_cuenta", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_clientes_cuenta", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.149642Z", "completed_at": "2025-08-05T10:09:46.154289Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.154699Z", "completed_at": "2025-08-05T10:09:46.154706Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005860328674316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.sat_lineas_pedidos", "compiled": true, "compiled_code": "with\n    sat_lineas_pedidos as (\n        select\n            b.hub_lineas_pedido_id,\n            current_date as fecha_carga,\n            md5(\n                upper(trim(nvl(a.l_quantity, '')))\n                || upper(trim(nvl(a.l_extendedprice, '')))\n                || upper(trim(nvl(a.l_discount, '')))\n                || upper(trim(nvl(a.l_tax, '')))\n                || upper(trim(nvl(a.l_returnflag, '')))\n                || upper(trim(nvl(a.l_linestatus, '')))\n                || upper(trim(nvl(a.l_shipdate, '')))\n                || upper(trim(nvl(a.l_commitdate, '')))\n                || upper(trim(nvl(a.l_receiptdate, '')))\n                || upper(trim(nvl(a.l_shipinstruct, '')))\n                || upper(trim(nvl(a.l_shipmode, '')))\n                || upper(trim(nvl(a.l_comment, '')))\n                || upper(trim(nvl(a.l_origen, '')))\n            ) as foto_linea_pedido,\n            a.l_origen,\n            a.l_quantity,\n            a.l_extendedprice,\n            a.l_discount,\n            a.l_tax,\n            a.l_returnflag,\n            a.l_linestatus,\n            a.l_shipdate,\n            a.l_commitdate,\n            a.l_receiptdate,\n            a.l_shipinstruct,\n            a.l_shipmode,\n            a.l_comment\n        from SDGVAULTMART.DBT_SDGVAULT.STG_LINEAS_PEDIDO a\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_LINEAS_PEDIDOS b\n            on a.l_orderkey = b.clave_pedido\n            and a.l_linenumber = b.linea_pedido\n    )\nselect *\nfrom sat_lineas_pedidos", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_lineas_pedidos", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.156369Z", "completed_at": "2025-08-05T10:09:46.162950Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.163408Z", "completed_at": "2025-08-05T10:09:46.163416Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00786590576171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.sat_paises", "compiled": true, "compiled_code": "\n\nwith\n    sat_paises as (\n        \n            select\n                hub_pais_id,\n                current_date as fecha_carga,\n                md5(\n                    upper(trim(nvl(n_comment, ''))) || upper(trim(nvl(n_origen, '')))\n                ) as foto_pais,\n                n_origen,\n                n_comment as comentario,\n            from SDGVAULTMART.DBT_SDGVAULT.STG_PAISES a\n            join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PAISES b on a.n_name = b.nombre_pais \n            where hub_pais_id not in (select hub_pais_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_paises)\n        \n    )\nselect *\nfrom sat_paises", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_paises", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.165120Z", "completed_at": "2025-08-05T10:09:46.169553Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.169963Z", "completed_at": "2025-08-05T10:09:46.169970Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005631685256958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.sat_partes", "compiled": true, "compiled_code": "with\n    sat_partes as (\n        select\n            b.hub_parte_id,\n            current_date as fecha_carga,\n            md5(\n                upper(trim(nvl(a.p_mfgr, '')))\n                || upper(trim(nvl(a.p_type, '')))\n                || upper(trim(nvl(a.p_size, '')))\n                || upper(trim(nvl(a.p_container, '')))\n                || upper(trim(nvl(a.p_retailprice, '')))\n                || upper(trim(nvl(a.p_comment, '')))\n                || upper(trim(nvl(a.p_origen, '')))\n            ) as foto_parte,\n            a.p_origen,\n            a.p_mfgr as fabricante,\n            a.p_type as tipo,\n            a.p_size as medida,\n            a.p_container as contenedor,\n            a.p_retailprice as precio_venta,\n            a.p_comment as comentario,\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PARTES a\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PARTES b\n            on a.p_name = b.nombre_parte\n            and a.p_brand = b.nombre_marca\n    )\nselect *\nfrom sat_partes", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_partes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.171430Z", "completed_at": "2025-08-05T10:09:46.177216Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.177592Z", "completed_at": "2025-08-05T10:09:46.177598Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006873369216918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.sat_partes_proveedores", "compiled": true, "compiled_code": "with\n    sat_partes_proveedores as (\n        select\n            b.hub_parte_id,\n            c.hub_proveedor_id,\n            current_date as fecha_carga,\n            md5(\n                upper(trim(nvl(a.ps_availqty, '')))\n                || upper(trim(nvl(a.ps_supplycost, '')))\n                || upper(trim(nvl(a.ps_comment, '')))\n                || upper(trim(nvl(a.ps_origen, '')))\n            ) as foto_parte_pedido,\n            a.ps_origen,\n            a.ps_availqty as disponibilidad,\n            a.ps_supplycost as coste_envio,\n            a.ps_comment as comentario,\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PARTES_PROVEEDOR a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PARTES a1 on a.ps_partkey = a1.p_partkey\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES a2 on a.ps_suppkey = a2.s_suppkey\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PARTES b\n            on a1.p_name = b.nombre_parte\n            and a1.p_brand = b.nombre_marca\n        join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PROVEEDORES c on a2.s_name = c.nombre_proveedor\n    )\nselect *\nfrom sat_partes_proveedores", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_partes_proveedores", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.179042Z", "completed_at": "2025-08-05T10:09:46.186078Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.186533Z", "completed_at": "2025-08-05T10:09:46.186544Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008229255676269531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.sat_pedidos", "compiled": true, "compiled_code": "\nwith\n    sat_pedidos as (\n        \n            select\n                b.hub_pedido_id,\n                current_date as fecha_carga,\n                md5(\n                    upper(trim(nvl(a.o_orderstatus, '')))\n                    || upper(trim(nvl(a.o_totalprice, '')))\n                    || upper(trim(nvl(a.o_orderdate, '')))\n                    || upper(trim(nvl(a.o_orderpriority, '')))\n                    || upper(trim(nvl(a.o_shippriority, '')))\n                    || upper(trim(nvl(a.o_comment, '')))\n                    || upper(trim(nvl(a.o_origen, '')))\n                ) as foto_pedido,\n                a.o_origen,\n                a.o_orderstatus as estado_pedido,\n                a.o_totalprice as precio_total,\n                a.o_orderdate as fecha_pedido,\n                a.o_orderpriority as prioridad_ped,\n                a.o_shippriority as prioridad_env,\n                a.o_comment as comentario,\n            from SDGVAULTMART.DBT_SDGVAULT.STG_PEDIDOS a\n            join\n                SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PEDIDOS b\n                on a.o_orderkey = b.clave_pedido\n                and a.o_clerk = b.empleado\n            where hub_pedido_id not in (select hub_pedido_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_pedidos)\n        \n    )\nselect *\nfrom sat_pedidos", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_pedidos", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.188377Z", "completed_at": "2025-08-05T10:09:46.193166Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.193576Z", "completed_at": "2025-08-05T10:09:46.193583Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005936384201049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.sat_proveedores", "compiled": true, "compiled_code": "with\n    sat_proveedores as (\n        select\n            b.hub_proveedor_id,\n            current_date as fecha_carga,\n            md5(\n                upper(trim(nvl(s_acctbal, '')))\n                || upper(trim(nvl(s_address, '')))\n                || upper(trim(nvl(s_comment, '')))\n                || upper(trim(nvl(s_phone, '')))\n                || upper(trim(nvl(s_origen, '')))\n            ) as foto_proveedor,\n            a.s_origen,\n            a.s_acctbal as cuenta_balance,\n            a.s_address as direccion,\n            a.s_comment as comentario,\n            a.s_phone as telefono\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES a\n        join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PROVEEDORES b on a.s_name = b.nombre_proveedor\n    )\nselect *\nfrom sat_proveedores", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_proveedores", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.195316Z", "completed_at": "2025-08-05T10:09:46.199056Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.199464Z", "completed_at": "2025-08-05T10:09:46.199471Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004885196685791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.sat_regiones", "compiled": true, "compiled_code": "with\n    sat_regiones as (\n        select\n            b.hub_region_id,\n            current_date as fecha_carga,\n            md5(\n                upper(trim(nvl(r_comment, ''))) || upper(trim(nvl(r_origen, '')))\n            ) as foto_cliente,\n            a.r_origen,\n            a.r_comment as comentario,\n        from SDGVAULTMART.DBT_SDGVAULT.STG_REGIONES a\n        join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_REGIONES b on a.r_name = b.nombre_region\n    )\nselect *\nfrom sat_regiones", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_regiones", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.201002Z", "completed_at": "2025-08-05T10:09:46.206537Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.207018Z", "completed_at": "2025-08-05T10:09:46.207027Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006768226623535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.stg_clientes", "compiled": true, "compiled_code": "\n\n-- Selecci\u00f3n condicional de la fuente de datos\nwith\n    source_data as (\n        \n            select\n                c_acctbal,\n                c_address,\n                c_comment,\n                c_custkey,\n                c_mktsegment,\n                c_name,\n                c_nationkey,\n                c_phone,\n                c_origen\n            from SDGVAULTMART.DBT_SDGVAULT.CLIENTES_ELT\n            where c_custkey not in (select c_custkey from SDGVAULTMART.DBT_SDGVAULT.stg_clientes)\n        \n    )\nselect *\nfrom source_data", "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_clientes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.208716Z", "completed_at": "2025-08-05T10:09:46.212741Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.213173Z", "completed_at": "2025-08-05T10:09:46.213180Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052258968353271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.stg_lineas_pedido", "compiled": true, "compiled_code": "-- \nwith stg_lineas_pedido as (select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.LINEITEM)\nselect\n    l_orderkey,\n    l_partkey,\n    l_suppkey,\n    l_linenumber,\n    l_quantity,\n    l_extendedprice,\n    l_discount,\n    l_tax,\n    l_returnflag,\n    l_linestatus,\n    l_shipdate,\n    l_commitdate,\n    l_receiptdate,\n    l_shipinstruct,\n    l_shipmode,\n    l_comment,\n    'Snowflake' as l_origen\nfrom stg_lineas_pedido", "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_lineas_pedido", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.214864Z", "completed_at": "2025-08-05T10:09:46.219847Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.220384Z", "completed_at": "2025-08-05T10:09:46.220392Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006343364715576172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.stg_paises", "compiled": true, "compiled_code": "\n\n-- Selecci\u00f3n condicional de la fuente de datos\nwith\n    source_data as (\n\n        \n            select n_nationkey, n_name, n_regionkey, n_comment, n_origen\n            from SDGVAULTMART.DBT_SDGVAULT.PAISES_ELT\n            where n_nationkey not in (select n_nationkey from SDGVAULTMART.DBT_SDGVAULT.stg_paises)\n        \n\n    )\nselect *\nfrom source_data", "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_paises", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.222218Z", "completed_at": "2025-08-05T10:09:46.226511Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.226960Z", "completed_at": "2025-08-05T10:09:46.226967Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005608320236206055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.stg_partes", "compiled": true, "compiled_code": "with stg_partes as (select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.PART)\nselect\n    p_partkey,\n    p_name,\n    p_mfgr,\n    p_brand,\n    p_type,\n    p_size,\n    p_container,\n    p_retailprice,\n    p_comment,\n    'Snowflake' as p_origen\nfrom stg_partes", "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_partes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.228751Z", "completed_at": "2025-08-05T10:09:46.232433Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.232904Z", "completed_at": "2025-08-05T10:09:46.232913Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004992246627807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.stg_partes_proveedor", "compiled": true, "compiled_code": "with stg_partes_proveedor as (select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.PARTSUPP)\nselect\n    ps_partkey,\n    ps_suppkey,\n    ps_availqty,\n    ps_supplycost,\n    ps_comment,\n    'Snowflake' as ps_origen\nfrom stg_partes_proveedor", "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_partes_proveedor", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.234927Z", "completed_at": "2025-08-05T10:09:46.240520Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.240966Z", "completed_at": "2025-08-05T10:09:46.240974Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007006406784057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.stg_pedidos", "compiled": true, "compiled_code": "\n\nwith\n    source_data as (\n        \n            select\n                o_orderkey,\n                o_custkey,\n                o_orderstatus,\n                o_totalprice,\n                o_orderdate,\n                o_orderpriority,\n                o_clerk,\n                o_shippriority,\n                o_comment,\n                o_origen\n            from SDGVAULTMART.DBT_SDGVAULT.PEDIDOS_ELT\n            where o_orderkey not in (select o_orderkey from SDGVAULTMART.DBT_SDGVAULT.stg_pedidos)\n        \n    )\nselect *\nfrom source_data", "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_pedidos", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.242715Z", "completed_at": "2025-08-05T10:09:46.246520Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.246963Z", "completed_at": "2025-08-05T10:09:46.246970Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005124807357788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.stg_proveedores", "compiled": true, "compiled_code": "with stg_proveedor as (select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.SUPPLIER)\nselect\n    s_suppkey,\n    s_name,\n    s_address,\n    s_nationkey,\n    s_phone,\n    s_acctbal,\n    s_comment,\n    'Snowflake' as s_origen\nfrom stg_proveedor", "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_proveedores", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.248881Z", "completed_at": "2025-08-05T10:09:46.252534Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.253017Z", "completed_at": "2025-08-05T10:09:46.253025Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005020856857299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.stg_regiones", "compiled": true, "compiled_code": "with stg_partes_region as (select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.REGION)\nselect r_regionkey, r_name, r_comment, 'Snowflake' as r_origen\nfrom stg_partes_region", "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_regiones", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.254850Z", "completed_at": "2025-08-05T10:09:46.259295Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.259746Z", "completed_at": "2025-08-05T10:09:46.259753Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005770683288574219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.v_business_bridge_pedidos_eu", "compiled": true, "compiled_code": "\n\nselect *\nfrom SDGVAULTMART.DBT_SDGVAULT_BRONZE.BRIDGE_PEDIDOS\nwhere\n    nombre_pais\n    in ('ESPA\u00d1A', 'GERMANY', 'RUSSIA', 'ROMANIA', 'UNITED KINGDOM', 'FRANCE')", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.v_business_bridge_pedidos_eu", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.261555Z", "completed_at": "2025-08-05T10:09:46.268473Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.269029Z", "completed_at": "2025-08-05T10:09:46.269038Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008341073989868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.v_hub_sat_pedidos_eu", "compiled": true, "compiled_code": "\n\nwith\n    v_hub_sat_pedidos_eu as (\n        select\n            hpe.hub_pedido_id,\n            hpe.clave_pedido as hub_clave_pedido,\n            hpe.empleado as hub_empleado,\n            hpe.fecha_carga as hub_fecha_carga,\n            hpe.origen as hub_origen,\n            spe.fecha_carga as sat_fecha_carga,\n            spe.foto_pedido as sat_foto_pedido,\n            spe.o_origen as sat_origen,\n            spe.estado_pedido as sat_estado_pedido,\n            spe.precio_total as sat_precio_total,\n            spe.fecha_pedido as sat_fecha_pedido,\n            spe.prioridad_env as sat_prioridad_env,\n            spe.prioridad_ped as sat_prioridad_ped,\n            spe.comentario as sat_comentario\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PEDIDOS hpe\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PEDIDOS spe\n            on hpe.hub_pedido_id = spe.hub_pedido_id\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_CLIENTES_PEDIDOS lcp\n            on hpe.hub_pedido_id = lcp.hub_pedido_id\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PAISES_CLIENTES lpc\n            on lcp.hub_cliente_id = lpc.hub_cliente_id\n            and lpc.nombre_pais\n            in ('ESPA\u00d1A', 'GERMANY', 'RUSSIA', 'ROMANIA', 'UNITED KINGDOM', 'FRANCE')\n    )\nselect *\nfrom v_hub_sat_pedidos_eu", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.v_hub_sat_pedidos_eu", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.271199Z", "completed_at": "2025-08-05T10:09:46.275723Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.276196Z", "completed_at": "2025-08-05T10:09:46.276203Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0060656070709228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.v_raw_lnk_clientes_pedidos_eu", "compiled": true, "compiled_code": "\n\nselect lcp.*\nfrom SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_CLIENTES_PEDIDOS lcp\njoin\n    SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PAISES_CLIENTES lpc\n    on lcp.hub_cliente_id = lpc.hub_cliente_id\n    and lpc.nombre_pais\n    in ('ESPA\u00d1A', 'GERMANY', 'RUSSIA', 'ROMANIA', 'UNITED KINGDOM', 'FRANCE')", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.v_raw_lnk_clientes_pedidos_eu", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.278175Z", "completed_at": "2025-08-05T10:09:46.282805Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.283261Z", "completed_at": "2025-08-05T10:09:46.283267Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0059795379638671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.v_raw_lnk_paises_clientes_eu", "compiled": true, "compiled_code": "\n\nselect *\nfrom SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PAISES_CLIENTES\nwhere\n    nombre_pais\n    in ('ESPA\u00d1A', 'GERMANY', 'RUSSIA', 'ROMANIA', 'UNITED KINGDOM', 'FRANCE')", "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.v_raw_lnk_paises_clientes_eu", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.285181Z", "completed_at": "2025-08-05T10:09:46.289584Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.290048Z", "completed_at": "2025-08-05T10:09:46.290054Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005852460861206055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.v_stg_regiones_paises", "compiled": true, "compiled_code": "\n\nselect a.*, b.*\nfrom SDGVAULTMART.DBT_SDGVAULT.STG_REGIONES a\njoin SDGVAULTMART.DBT_SDGVAULT.STG_PAISES b on a.r_regionkey = b.n_regionkey", "relation_name": "SDGVAULTMART.DBT_SDGVAULT.v_stg_regiones_paises", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.291891Z", "completed_at": "2025-08-05T10:09:46.293010Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.293442Z", "completed_at": "2025-08-05T10:09:46.293449Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0024459362030029297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.SDG_Vault_demo.clientes_elt", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.295267Z", "completed_at": "2025-08-05T10:09:46.296686Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.297124Z", "completed_at": "2025-08-05T10:09:46.297131Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.002701282501220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.SDG_Vault_demo.paises_elt", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.298854Z", "completed_at": "2025-08-05T10:09:46.299855Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.300288Z", "completed_at": "2025-08-05T10:09:46.300294Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0022432804107666016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.SDG_Vault_demo.pedidos_elt", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.302831Z", "completed_at": "2025-08-05T10:09:46.307868Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.308392Z", "completed_at": "2025-08-05T10:09:46.308401Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006488800048828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.v_stg_clientes_pedidos_eu", "compiled": true, "compiled_code": "\n\nwith\n    stg_clientes_pedidos_europa as (\n        select *\n        from SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PEDIDOS b on a.c_custkey = b.o_custkey\n        join\n            SDGVAULTMART.DBT_SDGVAULT.v_stg_regiones_paises c\n            on a.c_nationkey = c.n_nationkey\n            and c.n_nationkey in (6, 19, 22, 23, 99, 7)\n    )\nselect *\nfrom stg_clientes_pedidos_europa", "relation_name": "SDGVAULTMART.DBT_SDGVAULT.v_stg_clientes_pedidos_eu", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T10:09:46.310262Z", "completed_at": "2025-08-05T10:09:46.315496Z"}, {"name": "execute", "started_at": "2025-08-05T10:09:46.315951Z", "completed_at": "2025-08-05T10:09:46.315958Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00658106803894043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.SDG_Vault_demo.v_stg_provee_partes_pedidos_eu", "compiled": true, "compiled_code": "\n\nwith\n    stg_provee_partes_pedidos_europa as (\n        select *\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PARTES_PROVEEDOR b on a.s_suppkey = b.ps_suppkey\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PARTES c on b.ps_partkey = c.p_partkey\n        join\n            SDGVAULTMART.DBT_SDGVAULT.v_stg_regiones_paises d\n            on a.s_nationkey = d.n_nationkey\n            and d.n_nationkey in (6, 19, 22, 23, 99, 7)\n    )\nselect *\nfrom stg_provee_partes_pedidos_europa", "relation_name": "SDGVAULTMART.DBT_SDGVAULT.v_stg_provee_partes_pedidos_eu", "batch_results": null}], "elapsed_time": 2.5819406509399414, "args": {"static": false, "log_level": "info", "use_colors_file": true, "version_check": true, "vars": {}, "require_all_warnings_handled_by_warn_error": false, "log_format": "default", "log_path": "C:\\Users\\0021643\\Documents\\Practica\\proyecto-git\\gobdat\\logs", "profiles_dir": "C:\\Users\\0021643\\.dbt", "write_json": true, "warn_error_options": {"error": [], "warn": [], "silence": []}, "require_generic_test_arguments_property": false, "skip_nodes_if_on_run_start_fails": false, "show_resource_report": false, "use_colors": true, "defer": false, "macro_debugging": false, "favor_state": false, "log_level_file": "debug", "populate_cache": true, "log_format_file": "debug", "upload_to_artifacts_ingest_api": false, "printer_width": 80, "indirect_selection": "eager", "static_parser": true, "require_explicit_package_overrides_for_builtin_materializations": true, "send_anonymous_usage_stats": true, "compile": true, "project_dir": "C:\\Users\\0021643\\Documents\\Practica\\proyecto-git\\gobdat", "empty_catalog": false, "require_yaml_configuration_for_mf_time_spines": false, "strict_mode": false, "print": true, "which": "generate", "show_all_deprecations": false, "source_freshness_run_project_hooks": true, "require_batched_execution_for_custom_microbatch_strategy": false, "exclude": [], "partial_parse_file_diff": true, "introspect": true, "select": [], "cache_selected_only": false, "invocation_command": "dbt docs generate", "partial_parse": true, "log_file_max_bytes": 10485760, "state_modified_compare_more_unrendered_values": false, "require_resource_names_without_spaces": true, "state_modified_compare_vars": false, "require_nested_cumulative_type_params": false, "use_fast_test_edges": false, "validate_macro_args": false, "quiet": false}}