{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.10.6", "generated_at": "2025-08-05T10:09:43.609501Z", "invocation_id": "f01e57e2-d89c-453e-9956-461c70cf812f", "invocation_started_at": "2025-08-05T09:56:09.383065+00:00", "env": {}, "project_name": "SDG_Vault_demo", "project_id": "24496b16315bf683ee92ebb79d6146d2", "user_id": "6a6f01c8-1f5a-4154-90ba-e0e27ad4877f", "send_anonymous_usage_stats": true, "adapter_type": "snowflake", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}}, "nodes": {"model.SDG_Vault_demo.bridge_pedidos": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "bridge_pedidos", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Business_Vault\\bridge_pedidos.sql", "original_file_path": "models\\Business_Vault\\bridge_pedidos.sql", "unique_id": "model.SDG_Vault_demo.bridge_pedidos", "fqn": ["SDG_Vault_demo", "Business_Vault", "bridge_pedidos"], "alias": "bridge_pedidos", "checksum": {"name": "sha256", "checksum": "55e7d8f7f36f9717285ed3c8bba118498d49475b68b0b4b3b72bcea506d91a06"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "bridge_pedido_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": "bridge_pedido_id"}, "created_at": 1754387771.8078861, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.bridge_pedidos", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"bridge_pedido_id\") }}\r\n\r\nwith\r\n    bridge_pedido as (\r\n        select\r\n            md5(\r\n                upper(trim(nvl(hp.clave_pedido, '')))\r\n                || upper(trim(nvl(hp.empleado, '')))\r\n                || upper(trim(nvl(hc.nombre_cliente, '')))\r\n                || upper(trim(nvl(hn.nombre_pais, '')))\r\n            ) as bridge_pedido_id,\r\n            current_date fecha_carga,\r\n            hp.hub_pedido_id,\r\n            hp.clave_pedido,\r\n            hp.empleado,\r\n            lcp.lnk_cliente_pedido_id,\r\n            hc.hub_cliente_id,\r\n            hc.nombre_cliente,\r\n            lpc.lnk_pais_cliente_id,\r\n            hn.hub_pais_id,\r\n            hn.nombre_pais\r\n        from {{ source(\"raw\", \"HUB_PEDIDOS\") }} hp\r\n        join\r\n            {{ source(\"raw\", \"LNK_CLIENTES_PEDIDOS\") }} lcp\r\n            on hp.hub_pedido_id = lcp.hub_pedido_id\r\n        join\r\n            {{ source(\"raw\", \"HUB_CLIENTES\") }} hc\r\n            on hc.hub_cliente_id = lcp.hub_cliente_id\r\n        join\r\n            {{ source(\"raw\", \"LNK_PAISES_CLIENTES\") }} lpc\r\n            on lpc.hub_cliente_id = hc.hub_cliente_id\r\n        join {{ source(\"raw\", \"HUB_PAISES\") }} hn on hn.hub_pais_id = lpc.hub_pais_id\r\n    )\r\nselect *\r\nfrom bridge_pedido\r\n\r\n{% if is_incremental() %}\r\n    where bridge_pedido_id not in (select bridge_pedido_id from {{ this }})\r\n{% endif %}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_PEDIDOS"], ["raw", "LNK_CLIENTES_PEDIDOS"], ["raw", "HUB_CLIENTES"], ["raw", "LNK_PAISES_CLIENTES"], ["raw", "HUB_PAISES"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.raw.HUB_PEDIDOS", "source.SDG_Vault_demo.raw.LNK_CLIENTES_PEDIDOS", "source.SDG_Vault_demo.raw.HUB_CLIENTES", "source.SDG_Vault_demo.raw.LNK_PAISES_CLIENTES", "source.SDG_Vault_demo.raw.HUB_PAISES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Business_Vault\\bridge_pedidos.sql", "compiled": true, "compiled_code": "\n\nwith\n    bridge_pedido as (\n        select\n            md5(\n                upper(trim(nvl(hp.clave_pedido, '')))\n                || upper(trim(nvl(hp.empleado, '')))\n                || upper(trim(nvl(hc.nombre_cliente, '')))\n                || upper(trim(nvl(hn.nombre_pais, '')))\n            ) as bridge_pedido_id,\n            current_date fecha_carga,\n            hp.hub_pedido_id,\n            hp.clave_pedido,\n            hp.empleado,\n            lcp.lnk_cliente_pedido_id,\n            hc.hub_cliente_id,\n            hc.nombre_cliente,\n            lpc.lnk_pais_cliente_id,\n            hn.hub_pais_id,\n            hn.nombre_pais\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PEDIDOS hp\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_CLIENTES_PEDIDOS lcp\n            on hp.hub_pedido_id = lcp.hub_pedido_id\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES hc\n            on hc.hub_cliente_id = lcp.hub_cliente_id\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PAISES_CLIENTES lpc\n            on lpc.hub_cliente_id = hc.hub_cliente_id\n        join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PAISES hn on hn.hub_pais_id = lpc.hub_pais_id\n    )\nselect *\nfrom bridge_pedido\n\n\n    where bridge_pedido_id not in (select bridge_pedido_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.bridge_pedidos)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.pit_clientes": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "pit_clientes", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Business_Vault\\pit_clientes.sql", "original_file_path": "models\\Business_Vault\\pit_clientes.sql", "unique_id": "model.SDG_Vault_demo.pit_clientes", "fqn": ["SDG_Vault_demo", "Business_Vault", "pit_clientes"], "alias": "pit_clientes", "checksum": {"name": "sha256", "checksum": "82b05c637772bbaf63e5194665bea7282f41835c17031341632918d53ecfb1e7"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hub_cliente_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS", "merge_update_columns": ["pit_fecha", "fecha_cliente_contacto", "fecha_cliente_cuenta"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": "hub_cliente_id", "merge_update_columns": ["pit_fecha", "fecha_cliente_contacto", "fecha_cliente_cuenta"]}, "created_at": 1754387771.8452399, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.pit_clientes", "raw_code": "-- Tabla PIT PIT_CLIENTES para la obtenci\u00f3n eficiente del hist\u00f3rico persistido en las\r\n-- tablas satelites de Cliente\r\n{{\r\n    config(\r\n        materialized=\"incremental\",\r\n        unique_key=\"hub_cliente_id\",\r\n        merge_update_columns=[\r\n            \"pit_fecha\",\r\n            \"fecha_cliente_contacto\",\r\n            \"fecha_cliente_cuenta\",\r\n        ],\r\n    )\r\n}}\r\n\r\nwith\r\n    sat_contacto as (\r\n        select hub_cliente_id, max(fecha_carga) as fecha_cliente_contacto\r\n        from {{ source(\"raw\", \"SAT_CLIENTES_CONTACTO\") }}\r\n        group by hub_cliente_id\r\n    ),\r\n    sat_cuenta as (\r\n        select hub_cliente_id, max(fecha_carga) as fecha_cliente_cuenta\r\n        from {{ source(\"raw\", \"SAT_CLIENTES_CUENTA\") }}\r\n        group by hub_cliente_id\r\n    ),\r\n    pit_clientes as (\r\n        select\r\n            h.hub_cliente_id,\r\n            current_date as pit_fecha,\r\n            s1.fecha_cliente_contacto,\r\n            s2.fecha_cliente_cuenta\r\n        from {{ source(\"raw\", \"HUB_CLIENTES\") }} h\r\n        left join sat_contacto s1 on h.hub_cliente_id = s1.hub_cliente_id\r\n        left join sat_cuenta s2 on h.hub_cliente_id = s2.hub_cliente_id\r\n    ),\r\n    filtrado as (\r\n        select p.*\r\n        from pit_clientes p\r\n        left join\r\n            {{ this }} t\r\n            on p.hub_cliente_id = t.hub_cliente_id\r\n            and p.fecha_cliente_contacto = t.fecha_cliente_contacto\r\n            and p.fecha_cliente_cuenta = t.fecha_cliente_cuenta\r\n        where t.hub_cliente_id is null\r\n    )\r\nselect *\r\nfrom filtrado", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "SAT_CLIENTES_CONTACTO"], ["raw", "SAT_CLIENTES_CUENTA"], ["raw", "HUB_CLIENTES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.SAT_CLIENTES_CONTACTO", "source.SDG_Vault_demo.raw.SAT_CLIENTES_CUENTA", "source.SDG_Vault_demo.raw.HUB_CLIENTES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Business_Vault\\pit_clientes.sql", "compiled": true, "compiled_code": "-- Tabla PIT PIT_CLIENTES para la obtenci\u00f3n eficiente del hist\u00f3rico persistido en las\n-- tablas satelites de Cliente\n\n\nwith\n    sat_contacto as (\n        select hub_cliente_id, max(fecha_carga) as fecha_cliente_contacto\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CONTACTO\n        group by hub_cliente_id\n    ),\n    sat_cuenta as (\n        select hub_cliente_id, max(fecha_carga) as fecha_cliente_cuenta\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA\n        group by hub_cliente_id\n    ),\n    pit_clientes as (\n        select\n            h.hub_cliente_id,\n            current_date as pit_fecha,\n            s1.fecha_cliente_contacto,\n            s2.fecha_cliente_cuenta\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES h\n        left join sat_contacto s1 on h.hub_cliente_id = s1.hub_cliente_id\n        left join sat_cuenta s2 on h.hub_cliente_id = s2.hub_cliente_id\n    ),\n    filtrado as (\n        select p.*\n        from pit_clientes p\n        left join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.pit_clientes t\n            on p.hub_cliente_id = t.hub_cliente_id\n            and p.fecha_cliente_contacto = t.fecha_cliente_contacto\n            and p.fecha_cliente_cuenta = t.fecha_cliente_cuenta\n        where t.hub_cliente_id is null\n    )\nselect *\nfrom filtrado", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.v_business_bridge_pedidos_eu": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "v_business_bridge_pedidos_eu", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Business_Vault\\v_business_bridge_pedidos_eu.sql", "original_file_path": "models\\Business_Vault\\v_business_bridge_pedidos_eu.sql", "unique_id": "model.SDG_Vault_demo.v_business_bridge_pedidos_eu", "fqn": ["SDG_Vault_demo", "Business_Vault", "v_business_bridge_pedidos_eu"], "alias": "v_business_bridge_pedidos_eu", "checksum": {"name": "sha256", "checksum": "060294a70cc04613395248bc72d79546a8b5a4268275625022e300b23663b67f"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.8509924, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.v_business_bridge_pedidos_eu", "raw_code": "{{ config(materialized=\"view\") }}\r\n\r\nselect *\r\nfrom {{ source(\"business\", \"BRIDGE_PEDIDOS\") }}\r\nwhere\r\n    nombre_pais\r\n    in ('ESPA\u00d1A', 'GERMANY', 'RUSSIA', 'ROMANIA', 'UNITED KINGDOM', 'FRANCE')", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["business", "BRIDGE_PEDIDOS"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.business.BRIDGE_PEDIDOS"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Business_Vault\\v_business_bridge_pedidos_eu.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom SDGVAULTMART.DBT_SDGVAULT_BRONZE.BRIDGE_PEDIDOS\nwhere\n    nombre_pais\n    in ('ESPA\u00d1A', 'GERMANY', 'RUSSIA', 'ROMANIA', 'UNITED KINGDOM', 'FRANCE')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.dim1_clientes": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_GOLD", "name": "dim1_clientes", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Mart_Vault\\Information_Mart\\dim1_clientes.sql", "original_file_path": "models\\Mart_Vault\\Information_Mart\\dim1_clientes.sql", "unique_id": "model.SDG_Vault_demo.dim1_clientes", "fqn": ["SDG_Vault_demo", "Mart_Vault", "Information_Mart", "dim1_clientes"], "alias": "dim1_clientes", "checksum": {"name": "sha256", "checksum": "383e9e5dbffff5bdd638720a27fa48009cde93c37544c752552f689becd007d2"}, "config": {"enabled": true, "alias": null, "schema": "GOLD", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dim1_cliente_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS", "merge_update_columns": ["nombre_cliente", "segmento_marketing", "fecha", "origen"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "GOLD", "unique_key": "dim1_cliente_id", "merge_update_columns": ["nombre_cliente", "segmento_marketing", "fecha", "origen"]}, "created_at": 1754387771.8555331, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_GOLD.dim1_clientes", "raw_code": "{{\r\n    config(\r\n        materialized=\"incremental\",\r\n        unique_key=\"dim1_cliente_id\",\r\n        merge_update_columns=[\r\n            \"nombre_cliente\",\r\n            \"segmento_marketing\",\r\n            \"fecha\",\r\n            \"origen\",\r\n        ],\r\n    )\r\n}}\r\n\r\nwith\r\n    dim1_clientes as (\r\n        select\r\n            hc.hub_cliente_id as dim1_cliente_id,\r\n            hc.nombre_cliente,\r\n            sc.segmento_marketing,\r\n            sc.fecha_carga as fecha,\r\n            sc.c_origen as origen\r\n        from {{ source(\"raw\", \"HUB_CLIENTES\") }} hc\r\n        join\r\n            {{ source(\"business\", \"PIT_CLIENTES\") }} pit\r\n            on hc.hub_cliente_id = pit.hub_cliente_id\r\n        left join\r\n            {{ source(\"raw\", \"SAT_CLIENTES_CUENTA\") }} sc\r\n            on sc.hub_cliente_id = pit.hub_cliente_id\r\n            and sc.fecha_carga = pit.fecha_cliente_cuenta\r\n            and sc.fecha_carga = (\r\n                select max(sc2.fecha_carga)\r\n                from {{ source(\"raw\", \"SAT_CLIENTES_CUENTA\") }} sc2\r\n                where sc.hub_cliente_id = sc2.hub_cliente_id\r\n            )\r\n    ),\r\n    filtrado as (\r\n        select s.*\r\n        from dim1_clientes s\r\n        left join\r\n            {{ this }} t\r\n            on s.dim1_cliente_id = t.dim1_cliente_id\r\n            and s.nombre_cliente = t.nombre_cliente\r\n            and s.segmento_marketing = t.segmento_marketing\r\n            and s.fecha = t.fecha\r\n            and s.origen = t.origen\r\n        where t.dim1_cliente_id is null\r\n    )\r\nselect *\r\nfrom filtrado", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_CLIENTES"], ["business", "PIT_CLIENTES"], ["raw", "SAT_CLIENTES_CUENTA"], ["raw", "SAT_CLIENTES_CUENTA"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.HUB_CLIENTES", "source.SDG_Vault_demo.business.PIT_CLIENTES", "source.SDG_Vault_demo.raw.SAT_CLIENTES_CUENTA"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Mart_Vault\\Information_Mart\\dim1_clientes.sql", "compiled": true, "compiled_code": "\n\nwith\n    dim1_clientes as (\n        select\n            hc.hub_cliente_id as dim1_cliente_id,\n            hc.nombre_cliente,\n            sc.segmento_marketing,\n            sc.fecha_carga as fecha,\n            sc.c_origen as origen\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES hc\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.PIT_CLIENTES pit\n            on hc.hub_cliente_id = pit.hub_cliente_id\n        left join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA sc\n            on sc.hub_cliente_id = pit.hub_cliente_id\n            and sc.fecha_carga = pit.fecha_cliente_cuenta\n            and sc.fecha_carga = (\n                select max(sc2.fecha_carga)\n                from SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA sc2\n                where sc.hub_cliente_id = sc2.hub_cliente_id\n            )\n    ),\n    filtrado as (\n        select s.*\n        from dim1_clientes s\n        left join\n            SDGVAULTMART.DBT_SDGVAULT_GOLD.dim1_clientes t\n            on s.dim1_cliente_id = t.dim1_cliente_id\n            and s.nombre_cliente = t.nombre_cliente\n            and s.segmento_marketing = t.segmento_marketing\n            and s.fecha = t.fecha\n            and s.origen = t.origen\n        where t.dim1_cliente_id is null\n    )\nselect *\nfrom filtrado", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.fact_clientes_pedidos": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_GOLD", "name": "fact_clientes_pedidos", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Mart_Vault\\Information_Mart\\fact_clientes_pedidos.sql", "original_file_path": "models\\Mart_Vault\\Information_Mart\\fact_clientes_pedidos.sql", "unique_id": "model.SDG_Vault_demo.fact_clientes_pedidos", "fqn": ["SDG_Vault_demo", "Mart_Vault", "Information_Mart", "fact_clientes_pedidos"], "alias": "fact_clientes_pedidos", "checksum": {"name": "sha256", "checksum": "ce84c2d4b88dd9432044146f91ecfe34ef2cdcd4f58413600c567f5198d09b8b"}, "config": {"enabled": true, "alias": null, "schema": "GOLD", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["hub_pedido_id", "hub_cliente_id", "hub_pais_id", "fecha_carga"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "GOLD", "unique_key": ["hub_pedido_id", "hub_cliente_id", "hub_pais_id", "fecha_carga"]}, "created_at": 1754387771.8618293, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_GOLD.fact_clientes_pedidos", "raw_code": "{{\r\n    config(\r\n        materialized=\"incremental\",\r\n        unique_key=[\"hub_pedido_id\", \"hub_cliente_id\", \"hub_pais_id\", \"fecha_carga\"],\r\n    )\r\n}}\r\n\r\nwith\r\n    base as (\r\n        select\r\n            bp.hub_pedido_id,\r\n            bp.hub_cliente_id,\r\n            bp.hub_pais_id,\r\n            bp.fecha_carga,\r\n            lp.linea_pedido,\r\n            sp.precio_total\r\n        from {{ source(\"business\", \"BRIDGE_PEDIDOS\") }} bp\r\n        join\r\n            {{ source(\"raw\", \"SAT_PEDIDOS\") }} sp on bp.hub_pedido_id = sp.hub_pedido_id\r\n        join\r\n            {{ source(\"raw\", \"LNK_PEDIDOS_LINEAS_PEDIDOS\") }} lp\r\n            on bp.hub_pedido_id = lp.hub_pedido_id\r\n\r\n        {% if is_incremental() %}\r\n            -- Solo considerar nuevas fechas de carga en modo incremental\r\n            where bp.fecha_carga > (select max(fecha_carga) from {{ this }})\r\n        {% endif %}\r\n    ),\r\n    agregado as (\r\n        select\r\n            hub_pedido_id,\r\n            hub_cliente_id,\r\n            hub_pais_id,\r\n            fecha_carga,\r\n            sum(precio_total) as precio_total_acumulado,\r\n            sum(linea_pedido) as cantidad_lineas_pedido\r\n        from base\r\n        group by hub_pedido_id, hub_cliente_id, hub_pais_id, fecha_carga\r\n    )\r\nselect *\r\nfrom agregado", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["business", "BRIDGE_PEDIDOS"], ["raw", "SAT_PEDIDOS"], ["raw", "LNK_PEDIDOS_LINEAS_PEDIDOS"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.business.BRIDGE_PEDIDOS", "source.SDG_Vault_demo.raw.SAT_PEDIDOS", "source.SDG_Vault_demo.raw.LNK_PEDIDOS_LINEAS_PEDIDOS"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Mart_Vault\\Information_Mart\\fact_clientes_pedidos.sql", "compiled": true, "compiled_code": "\n\nwith\n    base as (\n        select\n            bp.hub_pedido_id,\n            bp.hub_cliente_id,\n            bp.hub_pais_id,\n            bp.fecha_carga,\n            lp.linea_pedido,\n            sp.precio_total\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.BRIDGE_PEDIDOS bp\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PEDIDOS sp on bp.hub_pedido_id = sp.hub_pedido_id\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PEDIDOS_LINEAS_PEDIDOS lp\n            on bp.hub_pedido_id = lp.hub_pedido_id\n\n        \n            -- Solo considerar nuevas fechas de carga en modo incremental\n            where bp.fecha_carga > (select max(fecha_carga) from SDGVAULTMART.DBT_SDGVAULT_GOLD.fact_clientes_pedidos)\n        \n    ),\n    agregado as (\n        select\n            hub_pedido_id,\n            hub_cliente_id,\n            hub_pais_id,\n            fecha_carga,\n            sum(precio_total) as precio_total_acumulado,\n            sum(linea_pedido) as cantidad_lineas_pedido\n        from base\n        group by hub_pedido_id, hub_cliente_id, hub_pais_id, fecha_carga\n    )\nselect *\nfrom agregado", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.dim1_paises": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_SILVER", "name": "dim1_paises", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Mart_Vault\\Raw_Mart\\dim1_paises.sql", "original_file_path": "models\\Mart_Vault\\Raw_Mart\\dim1_paises.sql", "unique_id": "model.SDG_Vault_demo.dim1_paises", "fqn": ["SDG_Vault_demo", "Mart_Vault", "Raw_Mart", "dim1_paises"], "alias": "dim1_paises", "checksum": {"name": "sha256", "checksum": "0e3c97bd2b2c2f2dbfaba206635b62a80ebaa33c2a24894a4ceda08114573d5a"}, "config": {"enabled": true, "alias": null, "schema": "SILVER", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dim1_pais_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS", "merge_update_columns": ["dim1_region_id", "nombre_pais", "nombre_region", "fecha_actual", "origen"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "SILVER", "unique_key": "dim1_pais_id", "merge_update_columns": ["dim1_region_id", "nombre_pais", "nombre_region", "fecha_actual", "origen"]}, "created_at": 1754387771.8676755, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_SILVER.dim1_paises", "raw_code": "{{\r\n    config(\r\n        materialized=\"incremental\",\r\n        unique_key=\"dim1_pais_id\",\r\n        merge_update_columns=[\r\n            \"dim1_region_id\",\r\n            \"nombre_pais\",\r\n            \"nombre_region\",\r\n            \"fecha_actual\",\r\n            \"origen\",\r\n        ],\r\n    )\r\n}}\r\n\r\nwith\r\n    dim1_paises as (\r\n\r\n        select\r\n            rp.hub_pais_id as dim1_pais_id,\r\n            rp.hub_region_id as dim1_region_id,\r\n            rp.nombre_pais,\r\n            rp.nombre_region,\r\n            rp.fecha_carga as fecha_actual,\r\n            rp.origen_pais as origen\r\n        from {{ source(\"raw\", \"LNK_REGIONES_PAISES\") }} rp\r\n        join {{ source(\"raw\", \"SAT_PAISES\") }} sp on rp.hub_pais_id = sp.hub_pais_id\r\n        where\r\n            sp.fecha_carga = (\r\n                select max(sp2.fecha_carga)\r\n                from {{ source(\"raw\", \"SAT_PAISES\") }} sp2\r\n                where sp2.hub_pais_id = sp.hub_pais_id\r\n            )\r\n\r\n    ),\r\n    filtrado as (\r\n        select s.*\r\n        from dim1_paises s\r\n        left join\r\n            {{ this }} t\r\n            on s.dim1_pais_id = t.dim1_pais_id\r\n            and s.dim1_region_id = t.dim1_region_id\r\n            and s.nombre_pais = t.nombre_pais\r\n            and s.nombre_region = t.nombre_region\r\n            and s.origen = t.origen\r\n        where t.dim1_pais_id is null\r\n    )\r\nselect *\r\nfrom filtrado", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "LNK_REGIONES_PAISES"], ["raw", "SAT_PAISES"], ["raw", "SAT_PAISES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.LNK_REGIONES_PAISES", "source.SDG_Vault_demo.raw.SAT_PAISES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Mart_Vault\\Raw_Mart\\dim1_paises.sql", "compiled": true, "compiled_code": "\n\nwith\n    dim1_paises as (\n\n        select\n            rp.hub_pais_id as dim1_pais_id,\n            rp.hub_region_id as dim1_region_id,\n            rp.nombre_pais,\n            rp.nombre_region,\n            rp.fecha_carga as fecha_actual,\n            rp.origen_pais as origen\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_REGIONES_PAISES rp\n        join SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PAISES sp on rp.hub_pais_id = sp.hub_pais_id\n        where\n            sp.fecha_carga = (\n                select max(sp2.fecha_carga)\n                from SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PAISES sp2\n                where sp2.hub_pais_id = sp.hub_pais_id\n            )\n\n    ),\n    filtrado as (\n        select s.*\n        from dim1_paises s\n        left join\n            SDGVAULTMART.DBT_SDGVAULT_SILVER.dim1_paises t\n            on s.dim1_pais_id = t.dim1_pais_id\n            and s.dim1_region_id = t.dim1_region_id\n            and s.nombre_pais = t.nombre_pais\n            and s.nombre_region = t.nombre_region\n            and s.origen = t.origen\n        where t.dim1_pais_id is null\n    )\nselect *\nfrom filtrado", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.dim2_clientes": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_SILVER", "name": "dim2_clientes", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Mart_Vault\\Raw_Mart\\dim2_clientes.sql", "original_file_path": "models\\Mart_Vault\\Raw_Mart\\dim2_clientes.sql", "unique_id": "model.SDG_Vault_demo.dim2_clientes", "fqn": ["SDG_Vault_demo", "Mart_Vault", "Raw_Mart", "dim2_clientes"], "alias": "dim2_clientes", "checksum": {"name": "sha256", "checksum": "b68d6632011bc0c50e50db2210b91d80c3066cbb436d3651ac4f00ef5784a268"}, "config": {"enabled": true, "alias": null, "schema": "SILVER", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dim2_cliente_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "SILVER", "unique_key": "dim2_cliente_id"}, "created_at": 1754387771.8738577, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_SILVER.dim2_clientes", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"dim2_cliente_id\") }}\r\n\r\nwith\r\n    sat_clientes_cuenta as (\r\n        select\r\n            sc.hub_cliente_id,\r\n            hc.nombre_cliente,\r\n            sc.segmento_marketing,\r\n            sc.c_origen as origen,\r\n            sc.fecha_carga as fecha_inicial_validez,\r\n            lead(sc.fecha_carga) over (\r\n                partition by sc.hub_cliente_id order by sc.fecha_carga\r\n            ) as fecha_final_validez\r\n        from {{ source(\"raw\", \"SAT_CLIENTES_CUENTA\") }} sc\r\n        join\r\n            {{ source(\"raw\", \"HUB_CLIENTES\") }} hc\r\n            on hc.hub_cliente_id = sc.hub_cliente_id\r\n    ),\r\n    con_ids as (\r\n        select\r\n            md5(\r\n                upper(trim(nvl(nombre_cliente, '')))\r\n                || to_char(fecha_inicial_validez, 'YYYY-MM-DD')\r\n            ) as dim2_cliente_id,\r\n            nombre_cliente,\r\n            segmento_marketing,\r\n            origen,\r\n            fecha_inicial_validez,\r\n            fecha_final_validez\r\n        from sat_clientes_cuenta\r\n    ),\r\n    filtrado as (\r\n        select c.*\r\n        from con_ids c\r\n        left join {{ this }} t on c.dim2_cliente_id = t.dim2_cliente_id\r\n        where t.dim2_cliente_id is null\r\n    )\r\nselect *\r\nfrom filtrado", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "SAT_CLIENTES_CUENTA"], ["raw", "HUB_CLIENTES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.SAT_CLIENTES_CUENTA", "source.SDG_Vault_demo.raw.HUB_CLIENTES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Mart_Vault\\Raw_Mart\\dim2_clientes.sql", "compiled": true, "compiled_code": "\n\nwith\n    sat_clientes_cuenta as (\n        select\n            sc.hub_cliente_id,\n            hc.nombre_cliente,\n            sc.segmento_marketing,\n            sc.c_origen as origen,\n            sc.fecha_carga as fecha_inicial_validez,\n            lead(sc.fecha_carga) over (\n                partition by sc.hub_cliente_id order by sc.fecha_carga\n            ) as fecha_final_validez\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA sc\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES hc\n            on hc.hub_cliente_id = sc.hub_cliente_id\n    ),\n    con_ids as (\n        select\n            md5(\n                upper(trim(nvl(nombre_cliente, '')))\n                || to_char(fecha_inicial_validez, 'YYYY-MM-DD')\n            ) as dim2_cliente_id,\n            nombre_cliente,\n            segmento_marketing,\n            origen,\n            fecha_inicial_validez,\n            fecha_final_validez\n        from sat_clientes_cuenta\n    ),\n    filtrado as (\n        select c.*\n        from con_ids c\n        left join SDGVAULTMART.DBT_SDGVAULT_SILVER.dim2_clientes t on c.dim2_cliente_id = t.dim2_cliente_id\n        where t.dim2_cliente_id is null\n    )\nselect *\nfrom filtrado", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.fact_clientes_cuentas": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_SILVER", "name": "fact_clientes_cuentas", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Mart_Vault\\Raw_Mart\\fact_clientes_cuentas.sql", "original_file_path": "models\\Mart_Vault\\Raw_Mart\\fact_clientes_cuentas.sql", "unique_id": "model.SDG_Vault_demo.fact_clientes_cuentas", "fqn": ["SDG_Vault_demo", "Mart_Vault", "Raw_Mart", "fact_clientes_cuentas"], "alias": "fact_clientes_cuentas", "checksum": {"name": "sha256", "checksum": "eb5818f2b5ab7429393d1c808e46d6d1829973b878dc1b9967919df7d6ee4863"}, "config": {"enabled": true, "alias": null, "schema": "SILVER", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["hub_cliente_id", "fecha"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "SILVER", "unique_key": ["hub_cliente_id", "fecha"]}, "created_at": 1754387771.8788345, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_SILVER.fact_clientes_cuentas", "raw_code": "{{ config(materialized=\"incremental\", unique_key=[\"hub_cliente_id\", \"fecha\"]) }}\r\n\r\nwith\r\n    max_fecha as (\r\n        select hub_cliente_id, max(fecha_carga) as fecha_cliente_cuenta\r\n        from {{ source(\"raw\", \"SAT_CLIENTES_CUENTA\") }}\r\n        group by hub_cliente_id\r\n    ),\r\n    pit_enriquecido as (\r\n        select pit.hub_cliente_id, mf.fecha_cliente_cuenta\r\n        from {{ source(\"business\", \"PIT_CLIENTES\") }} pit\r\n        join max_fecha mf on pit.hub_cliente_id = mf.hub_cliente_id\r\n    ),\r\n    fact_clientes_cuentas as (\r\n        select\r\n            pit.hub_cliente_id,\r\n            sc.cuenta_balance,\r\n            sc.fecha_carga as fecha,\r\n            sc.c_origen as origen\r\n        from pit_enriquecido pit\r\n        left join\r\n            {{ source(\"raw\", \"SAT_CLIENTES_CUENTA\") }} sc\r\n            on sc.hub_cliente_id = pit.hub_cliente_id\r\n            and sc.fecha_carga = pit.fecha_cliente_cuenta\r\n    )\r\n-- Solo inserta registros que no existen a\u00fan en la tabla de hechos\r\nselect *\r\nfrom fact_clientes_cuentas f\r\n{% if is_incremental() %}\r\n    where\r\n        not exists (\r\n            select 1\r\n            from {{ this }} t\r\n            where f.hub_cliente_id = t.hub_cliente_id and f.fecha = t.fecha\r\n        )\r\n{% endif %}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "SAT_CLIENTES_CUENTA"], ["business", "PIT_CLIENTES"], ["raw", "SAT_CLIENTES_CUENTA"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.raw.SAT_CLIENTES_CUENTA", "source.SDG_Vault_demo.business.PIT_CLIENTES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Mart_Vault\\Raw_Mart\\fact_clientes_cuentas.sql", "compiled": true, "compiled_code": "\n\nwith\n    max_fecha as (\n        select hub_cliente_id, max(fecha_carga) as fecha_cliente_cuenta\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA\n        group by hub_cliente_id\n    ),\n    pit_enriquecido as (\n        select pit.hub_cliente_id, mf.fecha_cliente_cuenta\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.PIT_CLIENTES pit\n        join max_fecha mf on pit.hub_cliente_id = mf.hub_cliente_id\n    ),\n    fact_clientes_cuentas as (\n        select\n            pit.hub_cliente_id,\n            sc.cuenta_balance,\n            sc.fecha_carga as fecha,\n            sc.c_origen as origen\n        from pit_enriquecido pit\n        left join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA sc\n            on sc.hub_cliente_id = pit.hub_cliente_id\n            and sc.fecha_carga = pit.fecha_cliente_cuenta\n    )\n-- Solo inserta registros que no existen a\u00fan en la tabla de hechos\nselect *\nfrom fact_clientes_cuentas f\n\n    where\n        not exists (\n            select 1\n            from SDGVAULTMART.DBT_SDGVAULT_SILVER.fact_clientes_cuentas t\n            where f.hub_cliente_id = t.hub_cliente_id and f.fecha = t.fecha\n        )\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.hub_clientes": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "hub_clientes", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\hub_clientes.sql", "original_file_path": "models\\Raw_Vault\\hub_clientes.sql", "unique_id": "model.SDG_Vault_demo.hub_clientes", "fqn": ["SDG_Vault_demo", "Raw_Vault", "hub_clientes"], "alias": "hub_clientes", "checksum": {"name": "sha256", "checksum": "22e9108e46d90d045b5be95d12b0edfb9261aa0f720312d4971e0349e86c2efe"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "nombre_cliente", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": "nombre_cliente"}, "created_at": 1754387771.8843918, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_clientes", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"nombre_cliente\") }}\r\n\r\nwith\r\n    hub_paises as (\r\n        {% if is_incremental() %}\r\n            select\r\n                md5(upper(trim(nvl(c_name, '')))) as hub_cliente_id,\r\n                c_name as nombre_cliente,\r\n                current_date as fecha_carga,\r\n                c_origen as origen\r\n            from {{ source(\"stg\", \"STG_CLIENTES\") }}\r\n            where c_name not in (select nombre_cliente from {{ this }})\r\n        {% else %}\r\n            select\r\n                md5(upper(trim(nvl(c_name, '')))) as hub_cliente_id,\r\n                c_name as nombre_cliente,\r\n                current_date as fecha_carga,\r\n                c_origen as origen\r\n            from {{ source(\"stg\", \"STG_CLIENTES\") }}\r\n        {% endif %}\r\n    )\r\nselect *\r\nfrom hub_paises", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_CLIENTES"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.stg.STG_CLIENTES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\hub_clientes.sql", "compiled": true, "compiled_code": "\n\nwith\n    hub_paises as (\n        \n            select\n                md5(upper(trim(nvl(c_name, '')))) as hub_cliente_id,\n                c_name as nombre_cliente,\n                current_date as fecha_carga,\n                c_origen as origen\n            from SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES\n            where c_name not in (select nombre_cliente from SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_clientes)\n        \n    )\nselect *\nfrom hub_paises", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.hub_lineas_pedidos": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "hub_lineas_pedidos", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\hub_lineas_pedidos.sql", "original_file_path": "models\\Raw_Vault\\hub_lineas_pedidos.sql", "unique_id": "model.SDG_Vault_demo.hub_lineas_pedidos", "fqn": ["SDG_Vault_demo", "Raw_Vault", "hub_lineas_pedidos"], "alias": "hub_lineas_pedidos", "checksum": {"name": "sha256", "checksum": "2f4f73ab7c4151a04edb32ff87a1ebc05cc068b4e2f6a7805b604eb74b862b28"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.8898137, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_lineas_pedidos", "raw_code": "with\r\n    hub_lineas_pedidos as (\r\n        select\r\n            md5(\r\n                upper(trim(nvl(l_orderkey, ''))) || upper(trim(nvl(l_linenumber, '')))\r\n            ) as hub_lineas_pedido_id,\r\n            l_orderkey as clave_pedido,\r\n            l_linenumber as linea_pedido,\r\n            current_date as fecha_carga,\r\n            l_origen as origen\r\n        from {{ source(\"stg\", \"STG_LINEAS_PEDIDO\") }}\r\n    )\r\nselect *\r\nfrom hub_lineas_pedidos", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_LINEAS_PEDIDO"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\hub_lineas_pedidos.sql", "compiled": true, "compiled_code": "with\n    hub_lineas_pedidos as (\n        select\n            md5(\n                upper(trim(nvl(l_orderkey, ''))) || upper(trim(nvl(l_linenumber, '')))\n            ) as hub_lineas_pedido_id,\n            l_orderkey as clave_pedido,\n            l_linenumber as linea_pedido,\n            current_date as fecha_carga,\n            l_origen as origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_LINEAS_PEDIDO\n    )\nselect *\nfrom hub_lineas_pedidos", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.hub_paises": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "hub_paises", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\hub_paises.sql", "original_file_path": "models\\Raw_Vault\\hub_paises.sql", "unique_id": "model.SDG_Vault_demo.hub_paises", "fqn": ["SDG_Vault_demo", "Raw_Vault", "hub_paises"], "alias": "hub_paises", "checksum": {"name": "sha256", "checksum": "2dc0cef4b54072948b7d984e55e1e42636a47aca3c9976ba11bd98890490df3b"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "nombre_pais", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": "nombre_pais"}, "created_at": 1754387771.8921065, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_paises", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"nombre_pais\") }}\r\n\r\nwith\r\n    hub_paises as (\r\n        {% if is_incremental() %}\r\n            select\r\n                md5(upper(trim(nvl(n_name, '')))) as hub_pais_id,\r\n                n_name as nombre_pais,\r\n                current_date as fecha_carga,\r\n                n_origen as origen\r\n            from {{ source(\"stg\", \"STG_PAISES\") }}\r\n            where n_name not in (select nombre_pais from {{ this }})\r\n        {% else %}\r\n            select\r\n                md5(upper(trim(nvl(n_name, '')))) as hub_pais_id,\r\n                n_name as nombre_pais,\r\n                current_date as fecha_carga,\r\n                n_origen as origen\r\n            from {{ source(\"stg\", \"STG_PAISES\") }}\r\n        {% endif %}\r\n    )\r\nselect *\r\nfrom hub_paises", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_PAISES"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.stg.STG_PAISES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\hub_paises.sql", "compiled": true, "compiled_code": "\n\nwith\n    hub_paises as (\n        \n            select\n                md5(upper(trim(nvl(n_name, '')))) as hub_pais_id,\n                n_name as nombre_pais,\n                current_date as fecha_carga,\n                n_origen as origen\n            from SDGVAULTMART.DBT_SDGVAULT.STG_PAISES\n            where n_name not in (select nombre_pais from SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_paises)\n        \n    )\nselect *\nfrom hub_paises", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.hub_partes": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "hub_partes", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\hub_partes.sql", "original_file_path": "models\\Raw_Vault\\hub_partes.sql", "unique_id": "model.SDG_Vault_demo.hub_partes", "fqn": ["SDG_Vault_demo", "Raw_Vault", "hub_partes"], "alias": "hub_partes", "checksum": {"name": "sha256", "checksum": "bc053e0304dad881202bea99a77d2c4532b50e05d33318a6796f9005652b915f"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.8972206, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_partes", "raw_code": "with\r\n    hub_partes as (\r\n        select\r\n            md5(\r\n                upper(trim(nvl(p_name, ''))) || upper(trim(nvl(p_brand, '')))\r\n            ) as hub_parte_id,\r\n            p_name as nombre_parte,\r\n            p_brand as nombre_marca,\r\n            current_date as fecha_carga,\r\n            p_origen as origen\r\n        from {{ source(\"stg\", \"STG_PARTES\") }}\r\n    )\r\nselect *\r\nfrom hub_partes", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_PARTES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.stg.STG_PARTES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\hub_partes.sql", "compiled": true, "compiled_code": "with\n    hub_partes as (\n        select\n            md5(\n                upper(trim(nvl(p_name, ''))) || upper(trim(nvl(p_brand, '')))\n            ) as hub_parte_id,\n            p_name as nombre_parte,\n            p_brand as nombre_marca,\n            current_date as fecha_carga,\n            p_origen as origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PARTES\n    )\nselect *\nfrom hub_partes", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.hub_pedidos": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "hub_pedidos", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\hub_pedidos.sql", "original_file_path": "models\\Raw_Vault\\hub_pedidos.sql", "unique_id": "model.SDG_Vault_demo.hub_pedidos", "fqn": ["SDG_Vault_demo", "Raw_Vault", "hub_pedidos"], "alias": "hub_pedidos", "checksum": {"name": "sha256", "checksum": "9d060b56a2331eb163cdabb83f22682b524edde524182d5d0e6e7fc89e963b68"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["clave_pedido", "empleado"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": ["clave_pedido", "empleado"]}, "created_at": 1754387771.8995397, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_pedidos", "raw_code": "{{ config(materialized=\"incremental\", unique_key=[\"clave_pedido\", \"empleado\"]) }}\r\n\r\nwith\r\n    hub_pedidos as (\r\n        {% if is_incremental() %}\r\n            select\r\n                md5(\r\n                    upper(trim(nvl(o_orderkey, ''))) || upper(trim(nvl(o_clerk, '')))\r\n                ) as hub_pedido_id,\r\n                o_orderkey as clave_pedido,\r\n                o_clerk as empleado,\r\n                current_date as fecha_carga,\r\n                o_origen as origen\r\n            from {{ source(\"stg\", \"STG_PEDIDOS\") }}\r\n            where\r\n                (o_orderkey, o_clerk)\r\n                not in (select clave_pedido, empleado from {{ this }})\r\n        {% else %}\r\n            select\r\n                md5(\r\n                    upper(trim(nvl(o_orderkey, ''))) || upper(trim(nvl(o_clerk, '')))\r\n                ) as hub_pedido_id,\r\n                o_orderkey as clave_pedido,\r\n                o_clerk as empleado,\r\n                current_date as fecha_carga,\r\n                o_origen as origen\r\n            from {{ source(\"stg\", \"STG_PEDIDOS\") }}\r\n        {% endif %}\r\n    )\r\nselect *\r\nfrom hub_pedidos", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_PEDIDOS"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.stg.STG_PEDIDOS"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\hub_pedidos.sql", "compiled": true, "compiled_code": "\n\nwith\n    hub_pedidos as (\n        \n            select\n                md5(\n                    upper(trim(nvl(o_orderkey, ''))) || upper(trim(nvl(o_clerk, '')))\n                ) as hub_pedido_id,\n                o_orderkey as clave_pedido,\n                o_clerk as empleado,\n                current_date as fecha_carga,\n                o_origen as origen\n            from SDGVAULTMART.DBT_SDGVAULT.STG_PEDIDOS\n            where\n                (o_orderkey, o_clerk)\n                not in (select clave_pedido, empleado from SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_pedidos)\n        \n    )\nselect *\nfrom hub_pedidos", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.hub_proveedores": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "hub_proveedores", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\hub_proveedores.sql", "original_file_path": "models\\Raw_Vault\\hub_proveedores.sql", "unique_id": "model.SDG_Vault_demo.hub_proveedores", "fqn": ["SDG_Vault_demo", "Raw_Vault", "hub_proveedores"], "alias": "hub_proveedores", "checksum": {"name": "sha256", "checksum": "bc8d0e6fbec0ceb1b4277f10ddca09d40b23668cc4a98834f2eae1e4462499f7"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.907944, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_proveedores", "raw_code": "with\r\n    hub_proveedores as (\r\n        select\r\n            md5(upper(trim(nvl(s_name, '')))) as hub_proveedor_id,\r\n            s_name as nombre_proveedor,\r\n            current_date as fecha_carga,\r\n            s_origen as origen\r\n        from {{ source(\"stg\", \"STG_PROVEEDORES\") }}\r\n    )\r\nselect *\r\nfrom hub_proveedores", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_PROVEEDORES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.stg.STG_PROVEEDORES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\hub_proveedores.sql", "compiled": true, "compiled_code": "with\n    hub_proveedores as (\n        select\n            md5(upper(trim(nvl(s_name, '')))) as hub_proveedor_id,\n            s_name as nombre_proveedor,\n            current_date as fecha_carga,\n            s_origen as origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES\n    )\nselect *\nfrom hub_proveedores", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.hub_regiones": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "hub_regiones", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\hub_regiones.sql", "original_file_path": "models\\Raw_Vault\\hub_regiones.sql", "unique_id": "model.SDG_Vault_demo.hub_regiones", "fqn": ["SDG_Vault_demo", "Raw_Vault", "hub_regiones"], "alias": "hub_regiones", "checksum": {"name": "sha256", "checksum": "a479fd686da48c820d0e3d6dda65980d335d6690a66d80719f604340f8b04c7e"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.910174, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.hub_regiones", "raw_code": "with\r\n    hub_regiones as (\r\n        select\r\n            md5(upper(trim(nvl(r_name, '')))) as hub_region_id,\r\n            r_name as nombre_region,\r\n            current_date as fecha_carga,\r\n            r_origen as origen\r\n        from {{ source(\"stg\", \"STG_REGIONES\") }}\r\n    )\r\nselect *\r\nfrom hub_regiones", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_REGIONES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.stg.STG_REGIONES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\hub_regiones.sql", "compiled": true, "compiled_code": "with\n    hub_regiones as (\n        select\n            md5(upper(trim(nvl(r_name, '')))) as hub_region_id,\n            r_name as nombre_region,\n            current_date as fecha_carga,\n            r_origen as origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_REGIONES\n    )\nselect *\nfrom hub_regiones", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.lnk_clientes_pedidos": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "lnk_clientes_pedidos", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\lnk_clientes_pedidos.sql", "original_file_path": "models\\Raw_Vault\\lnk_clientes_pedidos.sql", "unique_id": "model.SDG_Vault_demo.lnk_clientes_pedidos", "fqn": ["SDG_Vault_demo", "Raw_Vault", "lnk_clientes_pedidos"], "alias": "lnk_clientes_pedidos", "checksum": {"name": "sha256", "checksum": "70f6257f935d5c7f96431c20f309a55b9ac5ab67f7934fc5e3e85dccaa31f136"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "lnk_cliente_pedido_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": "lnk_cliente_pedido_id"}, "created_at": 1754387771.9123769, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_clientes_pedidos", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"lnk_cliente_pedido_id\") }}\r\n\r\nwith\r\n    hub_clientes as (\r\n        select hub_cliente_id, nombre_cliente, from {{ source(\"raw\", \"HUB_CLIENTES\") }}\r\n    ),\r\n    hub_pedidos as (\r\n        select hub_pedido_id, clave_pedido, empleado\r\n        from {{ source(\"raw\", \"HUB_PEDIDOS\") }}\r\n    ),\r\n    stg_clientes_pedidos as (\r\n        select a.c_name, b.o_orderkey, b.o_clerk, a.c_origen, b.o_origen\r\n        from {{ source(\"stg\", \"STG_CLIENTES\") }} a\r\n        join {{ source(\"stg\", \"STG_PEDIDOS\") }} b\r\n        where a.c_custkey = b.o_custkey\r\n    ),\r\n    combinaciones as (\r\n        select\r\n            md5(\r\n                upper(trim(nvl(p1.nombre_cliente, '')))\r\n                || upper(trim(nvl(clave_pedido, '')))\r\n                || upper(trim(nvl(empleado, '')))\r\n            ) as lnk_cliente_pedido_id,\r\n            p1.hub_cliente_id,\r\n            p2.hub_pedido_id,\r\n            p1.nombre_cliente,\r\n            p2.clave_pedido,\r\n            p2.empleado,\r\n            current_date as fecha_carga,\r\n            c_origen as origen_cliente,\r\n            o_origen as origen_pedido\r\n        from hub_clientes p1, hub_pedidos p2, stg_clientes_pedidos p3\r\n        where\r\n            p1.nombre_cliente = p3.c_name\r\n            and (p2.clave_pedido = p3.o_orderkey and p2.empleado = p3.o_clerk)\r\n    )\r\n\r\nselect *\r\nfrom combinaciones\r\n\r\n{% if is_incremental() %}\r\n    where lnk_cliente_pedido_id not in (select lnk_cliente_pedido_id from {{ this }})\r\n{% endif %}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_CLIENTES"], ["raw", "HUB_PEDIDOS"], ["stg", "STG_CLIENTES"], ["stg", "STG_PEDIDOS"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.raw.HUB_CLIENTES", "source.SDG_Vault_demo.raw.HUB_PEDIDOS", "source.SDG_Vault_demo.stg.STG_CLIENTES", "source.SDG_Vault_demo.stg.STG_PEDIDOS"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\lnk_clientes_pedidos.sql", "compiled": true, "compiled_code": "\n\nwith\n    hub_clientes as (\n        select hub_cliente_id, nombre_cliente, from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES\n    ),\n    hub_pedidos as (\n        select hub_pedido_id, clave_pedido, empleado\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PEDIDOS\n    ),\n    stg_clientes_pedidos as (\n        select a.c_name, b.o_orderkey, b.o_clerk, a.c_origen, b.o_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PEDIDOS b\n        where a.c_custkey = b.o_custkey\n    ),\n    combinaciones as (\n        select\n            md5(\n                upper(trim(nvl(p1.nombre_cliente, '')))\n                || upper(trim(nvl(clave_pedido, '')))\n                || upper(trim(nvl(empleado, '')))\n            ) as lnk_cliente_pedido_id,\n            p1.hub_cliente_id,\n            p2.hub_pedido_id,\n            p1.nombre_cliente,\n            p2.clave_pedido,\n            p2.empleado,\n            current_date as fecha_carga,\n            c_origen as origen_cliente,\n            o_origen as origen_pedido\n        from hub_clientes p1, hub_pedidos p2, stg_clientes_pedidos p3\n        where\n            p1.nombre_cliente = p3.c_name\n            and (p2.clave_pedido = p3.o_orderkey and p2.empleado = p3.o_clerk)\n    )\n\nselect *\nfrom combinaciones\n\n\n    where lnk_cliente_pedido_id not in (select lnk_cliente_pedido_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_clientes_pedidos)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.lnk_paises_clientes": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "lnk_paises_clientes", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\lnk_paises_clientes.sql", "original_file_path": "models\\Raw_Vault\\lnk_paises_clientes.sql", "unique_id": "model.SDG_Vault_demo.lnk_paises_clientes", "fqn": ["SDG_Vault_demo", "Raw_Vault", "lnk_paises_clientes"], "alias": "lnk_paises_clientes", "checksum": {"name": "sha256", "checksum": "b3baaa2255602e137f06eebfc870a9170cd130053a4200198aef276a75588572"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "lnk_pais_cliente_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": "lnk_pais_cliente_id"}, "created_at": 1754387771.918086, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_paises_clientes", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"lnk_pais_cliente_id\") }}\r\n\r\nwith\r\n    hub_paises as (\r\n        select hub_pais_id, nombre_pais, from {{ source(\"raw\", \"HUB_PAISES\") }}\r\n    ),\r\n    hub_clientes as (\r\n        select hub_cliente_id, nombre_cliente from {{ source(\"raw\", \"HUB_CLIENTES\") }}\r\n    ),\r\n    stg_paises_clientes as (\r\n        select a.n_name, b.c_name, a.n_origen, b.c_origen\r\n        from {{ source(\"stg\", \"STG_PAISES\") }} a\r\n        join {{ source(\"stg\", \"STG_CLIENTES\") }} b\r\n        where a.n_nationkey = b.c_nationkey\r\n    ),\r\n    combinaciones as (\r\n        select\r\n            md5(\r\n                upper(trim(nvl(p1.nombre_pais, '')))\r\n                || upper(trim(nvl(p2.nombre_cliente, '')))\r\n            ) as lnk_pais_cliente_id,\r\n            p1.hub_pais_id,\r\n            p2.hub_cliente_id,\r\n            p1.nombre_pais,\r\n            p2.nombre_cliente,\r\n            current_date as fecha_carga,\r\n            p3.n_origen as origen_pais,\r\n            p3.c_origen as origen_cliente\r\n        from hub_paises p1, hub_clientes p2, stg_paises_clientes p3\r\n        where p1.nombre_pais = p3.n_name and p2.nombre_cliente = p3.c_name\r\n    )\r\n\r\nselect *\r\nfrom combinaciones\r\n\r\n{% if is_incremental() %}\r\n    where lnk_pais_cliente_id not in (select lnk_pais_cliente_id from {{ this }})\r\n{% endif %}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_PAISES"], ["raw", "HUB_CLIENTES"], ["stg", "STG_PAISES"], ["stg", "STG_CLIENTES"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.raw.HUB_PAISES", "source.SDG_Vault_demo.raw.HUB_CLIENTES", "source.SDG_Vault_demo.stg.STG_PAISES", "source.SDG_Vault_demo.stg.STG_CLIENTES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\lnk_paises_clientes.sql", "compiled": true, "compiled_code": "\n\nwith\n    hub_paises as (\n        select hub_pais_id, nombre_pais, from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PAISES\n    ),\n    hub_clientes as (\n        select hub_cliente_id, nombre_cliente from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES\n    ),\n    stg_paises_clientes as (\n        select a.n_name, b.c_name, a.n_origen, b.c_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PAISES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES b\n        where a.n_nationkey = b.c_nationkey\n    ),\n    combinaciones as (\n        select\n            md5(\n                upper(trim(nvl(p1.nombre_pais, '')))\n                || upper(trim(nvl(p2.nombre_cliente, '')))\n            ) as lnk_pais_cliente_id,\n            p1.hub_pais_id,\n            p2.hub_cliente_id,\n            p1.nombre_pais,\n            p2.nombre_cliente,\n            current_date as fecha_carga,\n            p3.n_origen as origen_pais,\n            p3.c_origen as origen_cliente\n        from hub_paises p1, hub_clientes p2, stg_paises_clientes p3\n        where p1.nombre_pais = p3.n_name and p2.nombre_cliente = p3.c_name\n    )\n\nselect *\nfrom combinaciones\n\n\n    where lnk_pais_cliente_id not in (select lnk_pais_cliente_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_paises_clientes)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.lnk_paises_proveedores": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "lnk_paises_proveedores", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\lnk_paises_proveedores.sql", "original_file_path": "models\\Raw_Vault\\lnk_paises_proveedores.sql", "unique_id": "model.SDG_Vault_demo.lnk_paises_proveedores", "fqn": ["SDG_Vault_demo", "Raw_Vault", "lnk_paises_proveedores"], "alias": "lnk_paises_proveedores", "checksum": {"name": "sha256", "checksum": "685611892396ec5febc1cf29fa7b60a4f81f732b2180e6e30f0f3940ba3f4584"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "lnk_pais_proveedor_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": "lnk_pais_proveedor_id"}, "created_at": 1754387771.92402, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_paises_proveedores", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"lnk_pais_proveedor_id\") }}\r\n\r\nwith\r\n    hub_paises as (\r\n        select hub_pais_id, nombre_pais from {{ source(\"raw\", \"HUB_PAISES\") }}\r\n    ),\r\n    hub_proveedores as (\r\n        select hub_proveedor_id, nombre_proveedor\r\n        from {{ source(\"raw\", \"HUB_PROVEEDORES\") }}\r\n    ),\r\n    stg_paises_proveedores as (\r\n        select a.n_name, b.s_name, a.n_origen, b.s_origen\r\n        from {{ source(\"stg\", \"STG_PAISES\") }} a\r\n        join {{ source(\"stg\", \"STG_PROVEEDORES\") }} b on a.n_nationkey = b.s_nationkey\r\n    ),\r\n    combinaciones as (\r\n        select\r\n            md5(\r\n                upper(trim(coalesce(p1.nombre_pais, '')))\r\n                || upper(trim(coalesce(p2.nombre_proveedor, '')))\r\n            ) as lnk_pais_proveedor_id,\r\n            p1.hub_pais_id,\r\n            p2.hub_proveedor_id,\r\n            p1.nombre_pais,\r\n            p2.nombre_proveedor,\r\n            current_date as fecha_carga,\r\n            p3.n_origen as origen_pais,\r\n            p3.s_origen as origen_proveedor\r\n        from hub_paises p1\r\n        join stg_paises_proveedores p3 on p1.nombre_pais = p3.n_name\r\n        join hub_proveedores p2 on p2.nombre_proveedor = p3.s_name\r\n    )\r\n\r\nselect *\r\nfrom combinaciones\r\n\r\n{% if is_incremental() %}\r\n    -- Evita insertar v\u00ednculos ya existentes\r\n    where lnk_pais_proveedor_id not in (select lnk_pais_proveedor_id from {{ this }})\r\n{% endif %}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_PAISES"], ["raw", "HUB_PROVEEDORES"], ["stg", "STG_PAISES"], ["stg", "STG_PROVEEDORES"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.raw.HUB_PAISES", "source.SDG_Vault_demo.raw.HUB_PROVEEDORES", "source.SDG_Vault_demo.stg.STG_PAISES", "source.SDG_Vault_demo.stg.STG_PROVEEDORES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\lnk_paises_proveedores.sql", "compiled": true, "compiled_code": "\n\nwith\n    hub_paises as (\n        select hub_pais_id, nombre_pais from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PAISES\n    ),\n    hub_proveedores as (\n        select hub_proveedor_id, nombre_proveedor\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PROVEEDORES\n    ),\n    stg_paises_proveedores as (\n        select a.n_name, b.s_name, a.n_origen, b.s_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PAISES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES b on a.n_nationkey = b.s_nationkey\n    ),\n    combinaciones as (\n        select\n            md5(\n                upper(trim(coalesce(p1.nombre_pais, '')))\n                || upper(trim(coalesce(p2.nombre_proveedor, '')))\n            ) as lnk_pais_proveedor_id,\n            p1.hub_pais_id,\n            p2.hub_proveedor_id,\n            p1.nombre_pais,\n            p2.nombre_proveedor,\n            current_date as fecha_carga,\n            p3.n_origen as origen_pais,\n            p3.s_origen as origen_proveedor\n        from hub_paises p1\n        join stg_paises_proveedores p3 on p1.nombre_pais = p3.n_name\n        join hub_proveedores p2 on p2.nombre_proveedor = p3.s_name\n    )\n\nselect *\nfrom combinaciones\n\n\n    -- Evita insertar v\u00ednculos ya existentes\n    where lnk_pais_proveedor_id not in (select lnk_pais_proveedor_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_paises_proveedores)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.lnk_partes_lineas_pedidos": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "lnk_partes_lineas_pedidos", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\lnk_partes_lineas_pedidos.sql", "original_file_path": "models\\Raw_Vault\\lnk_partes_lineas_pedidos.sql", "unique_id": "model.SDG_Vault_demo.lnk_partes_lineas_pedidos", "fqn": ["SDG_Vault_demo", "Raw_Vault", "lnk_partes_lineas_pedidos"], "alias": "lnk_partes_lineas_pedidos", "checksum": {"name": "sha256", "checksum": "150dd95a8a1101968ee6e84edb5d2381471cffc0e4e707b42cf08d2228fe62a6"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.9294357, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_partes_lineas_pedidos", "raw_code": "with\r\n    hub_partes as (\r\n        select hub_parte_id, nombre_parte, nombre_marca\r\n        from {{ source(\"raw\", \"HUB_PARTES\") }}\r\n    ),\r\n    hub_lineas_pedidos as (\r\n        select hub_lineas_pedido_id, clave_pedido, linea_pedido\r\n        from {{ source(\"raw\", \"HUB_LINEAS_PEDIDOS\") }}\r\n    ),\r\n    stg_partes_lineas_pedidos as (\r\n        select a.p_name, a.p_brand, b.l_orderkey, b.l_linenumber, a.p_origen, b.l_origen\r\n        from {{ source(\"stg\", \"STG_PARTES\") }} a\r\n        join {{ source(\"stg\", \"STG_LINEAS_PEDIDO\") }} b\r\n        where a.p_partkey = b.l_partkey\r\n    )\r\nselect\r\n    md5(\r\n        upper(trim(nvl(nombre_parte, '')))\r\n        || upper(trim(nvl(nombre_marca, '')))\r\n        || upper(trim(nvl(l_orderkey, '')))\r\n        || upper(trim(nvl(l_linenumber, '')))\r\n    ) as lnk_parte_lin_pedido_id,\r\n    p1.hub_parte_id,\r\n    p2.hub_lineas_pedido_id,\r\n    p1.nombre_parte,\r\n    p1.nombre_marca,\r\n    p2.clave_pedido,\r\n    p2.linea_pedido,\r\n    current_date as fecha_carga,\r\n    p3.p_origen as origen_parte,\r\n    p3.l_origen as origen_linea_pedido\r\nfrom hub_partes p1, hub_lineas_pedidos p2, stg_partes_lineas_pedidos p3\r\nwhere\r\n    (p1.nombre_parte = p3.p_name and p1.nombre_marca = p3.p_brand)\r\n    and (p2.clave_pedido = p3.l_orderkey and p2.linea_pedido = p3.l_linenumber)", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_PARTES"], ["stg", "STG_PARTES"], ["raw", "HUB_LINEAS_PEDIDOS"], ["stg", "STG_LINEAS_PEDIDO"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.HUB_PARTES", "source.SDG_Vault_demo.stg.STG_PARTES", "source.SDG_Vault_demo.raw.HUB_LINEAS_PEDIDOS", "source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\lnk_partes_lineas_pedidos.sql", "compiled": true, "compiled_code": "with\n    hub_partes as (\n        select hub_parte_id, nombre_parte, nombre_marca\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PARTES\n    ),\n    hub_lineas_pedidos as (\n        select hub_lineas_pedido_id, clave_pedido, linea_pedido\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_LINEAS_PEDIDOS\n    ),\n    stg_partes_lineas_pedidos as (\n        select a.p_name, a.p_brand, b.l_orderkey, b.l_linenumber, a.p_origen, b.l_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PARTES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_LINEAS_PEDIDO b\n        where a.p_partkey = b.l_partkey\n    )\nselect\n    md5(\n        upper(trim(nvl(nombre_parte, '')))\n        || upper(trim(nvl(nombre_marca, '')))\n        || upper(trim(nvl(l_orderkey, '')))\n        || upper(trim(nvl(l_linenumber, '')))\n    ) as lnk_parte_lin_pedido_id,\n    p1.hub_parte_id,\n    p2.hub_lineas_pedido_id,\n    p1.nombre_parte,\n    p1.nombre_marca,\n    p2.clave_pedido,\n    p2.linea_pedido,\n    current_date as fecha_carga,\n    p3.p_origen as origen_parte,\n    p3.l_origen as origen_linea_pedido\nfrom hub_partes p1, hub_lineas_pedidos p2, stg_partes_lineas_pedidos p3\nwhere\n    (p1.nombre_parte = p3.p_name and p1.nombre_marca = p3.p_brand)\n    and (p2.clave_pedido = p3.l_orderkey and p2.linea_pedido = p3.l_linenumber)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.lnk_pedidos_lineas_pedidos": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "lnk_pedidos_lineas_pedidos", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\lnk_pedidos_lineas_pedidos.sql", "original_file_path": "models\\Raw_Vault\\lnk_pedidos_lineas_pedidos.sql", "unique_id": "model.SDG_Vault_demo.lnk_pedidos_lineas_pedidos", "fqn": ["SDG_Vault_demo", "Raw_Vault", "lnk_pedidos_lineas_pedidos"], "alias": "lnk_pedidos_lineas_pedidos", "checksum": {"name": "sha256", "checksum": "07a60c4294f8f15d766ce496145d1271cb421c90d0a749e81eb573823804a784"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.932213, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_pedidos_lineas_pedidos", "raw_code": "with\r\n    hub_pedidos as (\r\n        select hub_pedido_id, clave_pedido, empleado\r\n        from {{ source(\"raw\", \"HUB_PEDIDOS\") }}\r\n    ),\r\n    hub_lineas_pedidos as (\r\n        select hub_lineas_pedido_id, clave_pedido, linea_pedido\r\n        from {{ source(\"raw\", \"HUB_LINEAS_PEDIDOS\") }}\r\n    ),\r\n    stg_pedidos_lineas_pedidos as (\r\n        select\r\n            a.o_orderkey,\r\n            a.o_clerk,\r\n            b.l_orderkey,\r\n            b.l_linenumber,\r\n            a.o_origen,\r\n            b.l_origen\r\n        from {{ source(\"stg\", \"STG_PEDIDOS\") }} a\r\n        join {{ source(\"stg\", \"STG_LINEAS_PEDIDO\") }} b\r\n        where a.o_orderkey = b.l_orderkey\r\n    )\r\nselect\r\n    md5(\r\n        upper(trim(nvl(o_orderkey, '')))\r\n        || upper(trim(nvl(o_clerk, '')))\r\n        || upper(trim(nvl(l_orderkey, '')))\r\n        || upper(trim(nvl(l_linenumber, '')))\r\n    ) as lnk_pedido_lin_pedido_id,\r\n    p1.hub_pedido_id,\r\n    p2.hub_lineas_pedido_id,\r\n    p1.clave_pedido,\r\n    p1.empleado,\r\n    p2.linea_pedido,\r\n    current_date as fecha_carga,\r\n    p3.o_origen as origen_pedido,\r\n    p3.l_origen as origen_linea_pedido\r\nfrom hub_pedidos p1, hub_lineas_pedidos p2, stg_pedidos_lineas_pedidos p3\r\nwhere\r\n    (p1.clave_pedido = p3.o_orderkey and p1.empleado = p3.o_clerk)\r\n    and (p2.clave_pedido = p3.l_orderkey and p2.linea_pedido = p3.l_linenumber)", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_PEDIDOS"], ["raw", "HUB_LINEAS_PEDIDOS"], ["raw", "HUB_PEDIDOS"], ["stg", "STG_LINEAS_PEDIDO"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.stg.STG_PEDIDOS", "source.SDG_Vault_demo.raw.HUB_LINEAS_PEDIDOS", "source.SDG_Vault_demo.raw.HUB_PEDIDOS", "source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\lnk_pedidos_lineas_pedidos.sql", "compiled": true, "compiled_code": "with\n    hub_pedidos as (\n        select hub_pedido_id, clave_pedido, empleado\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PEDIDOS\n    ),\n    hub_lineas_pedidos as (\n        select hub_lineas_pedido_id, clave_pedido, linea_pedido\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_LINEAS_PEDIDOS\n    ),\n    stg_pedidos_lineas_pedidos as (\n        select\n            a.o_orderkey,\n            a.o_clerk,\n            b.l_orderkey,\n            b.l_linenumber,\n            a.o_origen,\n            b.l_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PEDIDOS a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_LINEAS_PEDIDO b\n        where a.o_orderkey = b.l_orderkey\n    )\nselect\n    md5(\n        upper(trim(nvl(o_orderkey, '')))\n        || upper(trim(nvl(o_clerk, '')))\n        || upper(trim(nvl(l_orderkey, '')))\n        || upper(trim(nvl(l_linenumber, '')))\n    ) as lnk_pedido_lin_pedido_id,\n    p1.hub_pedido_id,\n    p2.hub_lineas_pedido_id,\n    p1.clave_pedido,\n    p1.empleado,\n    p2.linea_pedido,\n    current_date as fecha_carga,\n    p3.o_origen as origen_pedido,\n    p3.l_origen as origen_linea_pedido\nfrom hub_pedidos p1, hub_lineas_pedidos p2, stg_pedidos_lineas_pedidos p3\nwhere\n    (p1.clave_pedido = p3.o_orderkey and p1.empleado = p3.o_clerk)\n    and (p2.clave_pedido = p3.l_orderkey and p2.linea_pedido = p3.l_linenumber)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.lnk_proveedores_lineas_pedidos": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "lnk_proveedores_lineas_pedidos", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\lnk_proveedores_lineas_pedidos.sql", "original_file_path": "models\\Raw_Vault\\lnk_proveedores_lineas_pedidos.sql", "unique_id": "model.SDG_Vault_demo.lnk_proveedores_lineas_pedidos", "fqn": ["SDG_Vault_demo", "Raw_Vault", "lnk_proveedores_lineas_pedidos"], "alias": "lnk_proveedores_lineas_pedidos", "checksum": {"name": "sha256", "checksum": "0a5e126eb7ae0a4b9ede1ad12bf01f9995483f0f9048c7112cd533a3973f81fe"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.9351976, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_proveedores_lineas_pedidos", "raw_code": "with\r\n    hub_proveedores as (\r\n        select hub_proveedor_id, nombre_proveedor\r\n        from {{ source(\"raw\", \"HUB_PROVEEDORES\") }}\r\n    ),\r\n    hub_lineas_pedidos as (\r\n        select hub_lineas_pedido_id, clave_pedido, linea_pedido\r\n        from {{ source(\"raw\", \"HUB_LINEAS_PEDIDOS\") }}\r\n    ),\r\n    stg_proveedores_lineas_pedidos as (\r\n        select a.s_name, b.l_orderkey, b.l_linenumber, a.s_origen, b.l_origen\r\n        from {{ source(\"stg\", \"STG_PROVEEDORES\") }} a\r\n        join {{ source(\"stg\", \"STG_LINEAS_PEDIDO\") }} b\r\n        where a.s_suppkey = b.l_suppkey\r\n    )\r\nselect\r\n    md5(\r\n        upper(trim(nvl(nombre_proveedor, '')))\r\n        || upper(trim(nvl(l_orderkey, '')))\r\n        || upper(trim(nvl(l_linenumber, '')))\r\n    ) as lnk_proveedor_lin_pedido_id,\r\n    p1.hub_proveedor_id,\r\n    p2.hub_lineas_pedido_id,\r\n    p1.nombre_proveedor,\r\n    p2.clave_pedido,\r\n    p2.linea_pedido,\r\n    current_date as fecha_carga,\r\n    p3.s_origen as origen_proveedor,\r\n    p3.l_origen as origen_linea_pedido\r\nfrom hub_proveedores p1, hub_lineas_pedidos p2, stg_proveedores_lineas_pedidos p3\r\nwhere\r\n    p1.nombre_proveedor = p3.s_name\r\n    and (p2.clave_pedido = p3.l_orderkey and p2.linea_pedido = p3.l_linenumber)", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_PROVEEDORES"], ["stg", "STG_PROVEEDORES"], ["raw", "HUB_LINEAS_PEDIDOS"], ["stg", "STG_LINEAS_PEDIDO"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.HUB_PROVEEDORES", "source.SDG_Vault_demo.stg.STG_PROVEEDORES", "source.SDG_Vault_demo.raw.HUB_LINEAS_PEDIDOS", "source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\lnk_proveedores_lineas_pedidos.sql", "compiled": true, "compiled_code": "with\n    hub_proveedores as (\n        select hub_proveedor_id, nombre_proveedor\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PROVEEDORES\n    ),\n    hub_lineas_pedidos as (\n        select hub_lineas_pedido_id, clave_pedido, linea_pedido\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_LINEAS_PEDIDOS\n    ),\n    stg_proveedores_lineas_pedidos as (\n        select a.s_name, b.l_orderkey, b.l_linenumber, a.s_origen, b.l_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_LINEAS_PEDIDO b\n        where a.s_suppkey = b.l_suppkey\n    )\nselect\n    md5(\n        upper(trim(nvl(nombre_proveedor, '')))\n        || upper(trim(nvl(l_orderkey, '')))\n        || upper(trim(nvl(l_linenumber, '')))\n    ) as lnk_proveedor_lin_pedido_id,\n    p1.hub_proveedor_id,\n    p2.hub_lineas_pedido_id,\n    p1.nombre_proveedor,\n    p2.clave_pedido,\n    p2.linea_pedido,\n    current_date as fecha_carga,\n    p3.s_origen as origen_proveedor,\n    p3.l_origen as origen_linea_pedido\nfrom hub_proveedores p1, hub_lineas_pedidos p2, stg_proveedores_lineas_pedidos p3\nwhere\n    p1.nombre_proveedor = p3.s_name\n    and (p2.clave_pedido = p3.l_orderkey and p2.linea_pedido = p3.l_linenumber)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.lnk_proveedores_partes": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "lnk_proveedores_partes", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\lnk_proveedores_partes.sql", "original_file_path": "models\\Raw_Vault\\lnk_proveedores_partes.sql", "unique_id": "model.SDG_Vault_demo.lnk_proveedores_partes", "fqn": ["SDG_Vault_demo", "Raw_Vault", "lnk_proveedores_partes"], "alias": "lnk_proveedores_partes", "checksum": {"name": "sha256", "checksum": "1573863856f3f18fa2fe90c6f6aca4b8e6c469a8555a8538bb8d68c574287180"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.9381788, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_proveedores_partes", "raw_code": "with\r\n    hub_proveedores as (\r\n        select hub_proveedor_id, nombre_proveedor,\r\n        from {{ source(\"raw\", \"HUB_PROVEEDORES\") }}\r\n    ),\r\n    hub_partes as (\r\n        select hub_parte_id, nombre_parte, nombre_marca\r\n        from {{ source(\"raw\", \"HUB_PARTES\") }}\r\n    ),\r\n    stg_proveedores_partes as (\r\n        select a.s_name, c.p_name, c.p_brand, a.s_origen, c.p_origen\r\n        from {{ source(\"stg\", \"STG_PROVEEDORES\") }} a\r\n        join {{ source(\"stg\", \"STG_PARTES_PROVEEDOR\") }} b on a.s_suppkey = b.ps_suppkey\r\n        join {{ source(\"stg\", \"STG_PARTES\") }} c on b.ps_partkey = c.p_partkey\r\n    )\r\nselect\r\n    md5(\r\n        upper(trim(nvl(p1.nombre_proveedor, '')))\r\n        || upper(trim(nvl(p2.nombre_parte, '')))\r\n        || upper(trim(nvl(p2.nombre_marca, '')))\r\n    ) as lnk_proveedor_parte_id,\r\n    p1.hub_proveedor_id,\r\n    p2.hub_parte_id,\r\n    p1.nombre_proveedor,\r\n    p2.nombre_parte,\r\n    p2.nombre_marca,\r\n    current_date as fecha_carga,\r\n    p3.s_origen as origen_proveedor,\r\n    p3.p_origen as origen_parte\r\nfrom hub_proveedores p1, hub_partes p2, stg_proveedores_partes p3\r\nwhere\r\n    p1.nombre_proveedor = p3.s_name\r\n    and (p2.nombre_parte = p3.p_name and p2.nombre_marca = p3.p_brand)", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_PARTES"], ["raw", "HUB_PROVEEDORES"], ["stg", "STG_PARTES"], ["stg", "STG_PARTES_PROVEEDOR"], ["stg", "STG_PROVEEDORES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.HUB_PARTES", "source.SDG_Vault_demo.raw.HUB_PROVEEDORES", "source.SDG_Vault_demo.stg.STG_PARTES", "source.SDG_Vault_demo.stg.STG_PARTES_PROVEEDOR", "source.SDG_Vault_demo.stg.STG_PROVEEDORES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\lnk_proveedores_partes.sql", "compiled": true, "compiled_code": "with\n    hub_proveedores as (\n        select hub_proveedor_id, nombre_proveedor,\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PROVEEDORES\n    ),\n    hub_partes as (\n        select hub_parte_id, nombre_parte, nombre_marca\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PARTES\n    ),\n    stg_proveedores_partes as (\n        select a.s_name, c.p_name, c.p_brand, a.s_origen, c.p_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PARTES_PROVEEDOR b on a.s_suppkey = b.ps_suppkey\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PARTES c on b.ps_partkey = c.p_partkey\n    )\nselect\n    md5(\n        upper(trim(nvl(p1.nombre_proveedor, '')))\n        || upper(trim(nvl(p2.nombre_parte, '')))\n        || upper(trim(nvl(p2.nombre_marca, '')))\n    ) as lnk_proveedor_parte_id,\n    p1.hub_proveedor_id,\n    p2.hub_parte_id,\n    p1.nombre_proveedor,\n    p2.nombre_parte,\n    p2.nombre_marca,\n    current_date as fecha_carga,\n    p3.s_origen as origen_proveedor,\n    p3.p_origen as origen_parte\nfrom hub_proveedores p1, hub_partes p2, stg_proveedores_partes p3\nwhere\n    p1.nombre_proveedor = p3.s_name\n    and (p2.nombre_parte = p3.p_name and p2.nombre_marca = p3.p_brand)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.lnk_regiones_paises": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "lnk_regiones_paises", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\lnk_regiones_paises.sql", "original_file_path": "models\\Raw_Vault\\lnk_regiones_paises.sql", "unique_id": "model.SDG_Vault_demo.lnk_regiones_paises", "fqn": ["SDG_Vault_demo", "Raw_Vault", "lnk_regiones_paises"], "alias": "lnk_regiones_paises", "checksum": {"name": "sha256", "checksum": "9c48d52553c5a152f3bf7cd886dac49f34cf726e6d5994e89981156bedcd65ca"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "lnk_regiones_paises_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": "lnk_regiones_paises_id"}, "created_at": 1754387771.9411685, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_regiones_paises", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"lnk_regiones_paises_id\") }}\r\n\r\nwith\r\n    hub_regiones as (\r\n        select hub_region_id, nombre_region from {{ source(\"raw\", \"HUB_REGIONES\") }}\r\n    ),\r\n    hub_paises as (\r\n        select hub_pais_id, nombre_pais, from {{ source(\"raw\", \"HUB_PAISES\") }}\r\n    ),\r\n    stg_regiones_paises as (\r\n        select a.n_name, b.r_name, a.n_origen, b.r_origen\r\n        from {{ source(\"stg\", \"STG_PAISES\") }} a\r\n        join {{ source(\"stg\", \"STG_REGIONES\") }} b\r\n        where a.n_regionkey = b.r_regionkey\r\n    ),\r\n    combinaciones as (\r\n        select\r\n            md5(\r\n                upper(trim(nvl(p1.nombre_region, '')))\r\n                || upper(trim(nvl(p2.nombre_pais, '')))\r\n            ) as lnk_regiones_paises_id,\r\n            p1.hub_region_id,\r\n            p2.hub_pais_id,\r\n            p1.nombre_region,\r\n            p2.nombre_pais,\r\n            current_date as fecha_carga,\r\n            p3.r_origen as origen_region,\r\n            p3.n_origen as origen_pais\r\n        from hub_regiones p1, hub_paises p2, stg_regiones_paises p3\r\n        where p1.nombre_region = p3.r_name and p2.nombre_pais = p3.n_name\r\n    )\r\n\r\nselect *\r\nfrom combinaciones\r\n\r\n{% if is_incremental() %}\r\n    where lnk_regiones_paises_id not in (select lnk_regiones_paises_id from {{ this }})\r\n{% endif %}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_REGIONES"], ["raw", "HUB_PAISES"], ["stg", "STG_PAISES"], ["stg", "STG_REGIONES"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.raw.HUB_REGIONES", "source.SDG_Vault_demo.raw.HUB_PAISES", "source.SDG_Vault_demo.stg.STG_PAISES", "source.SDG_Vault_demo.stg.STG_REGIONES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\lnk_regiones_paises.sql", "compiled": true, "compiled_code": "\n\nwith\n    hub_regiones as (\n        select hub_region_id, nombre_region from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_REGIONES\n    ),\n    hub_paises as (\n        select hub_pais_id, nombre_pais, from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PAISES\n    ),\n    stg_regiones_paises as (\n        select a.n_name, b.r_name, a.n_origen, b.r_origen\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PAISES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_REGIONES b\n        where a.n_regionkey = b.r_regionkey\n    ),\n    combinaciones as (\n        select\n            md5(\n                upper(trim(nvl(p1.nombre_region, '')))\n                || upper(trim(nvl(p2.nombre_pais, '')))\n            ) as lnk_regiones_paises_id,\n            p1.hub_region_id,\n            p2.hub_pais_id,\n            p1.nombre_region,\n            p2.nombre_pais,\n            current_date as fecha_carga,\n            p3.r_origen as origen_region,\n            p3.n_origen as origen_pais\n        from hub_regiones p1, hub_paises p2, stg_regiones_paises p3\n        where p1.nombre_region = p3.r_name and p2.nombre_pais = p3.n_name\n    )\n\nselect *\nfrom combinaciones\n\n\n    where lnk_regiones_paises_id not in (select lnk_regiones_paises_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.lnk_regiones_paises)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.sat_clientes_contacto": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "sat_clientes_contacto", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\sat_clientes_contacto.sql", "original_file_path": "models\\Raw_Vault\\sat_clientes_contacto.sql", "unique_id": "model.SDG_Vault_demo.sat_clientes_contacto", "fqn": ["SDG_Vault_demo", "Raw_Vault", "sat_clientes_contacto"], "alias": "sat_clientes_contacto", "checksum": {"name": "sha256", "checksum": "43fc761a38b196f4f4839326ea4de9e2b146684e83aa74ced13404ece7b7ad62"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hub_cliente_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": "hub_cliente_id"}, "created_at": 1754387771.9473083, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_clientes_contacto", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"hub_cliente_id\") }}\r\n\r\nwith\r\n    sat_clientes_contacto as (\r\n        {% if is_incremental() %}\r\n\r\n            select\r\n                b.hub_cliente_id,\r\n                current_date as fecha_carga,\r\n                md5(\r\n                    upper(trim(nvl(c_address, '')))\r\n                    || upper(trim(nvl(c_comment, '')))\r\n                    || upper(trim(nvl(c_phone, '')))\r\n                    || upper(trim(nvl(c_origen, '')))\r\n                ) as foto_cliente,\r\n                a.c_origen,\r\n                a.c_address as direccion,\r\n                a.c_comment as comentario,\r\n                a.c_phone as telefono\r\n            from {{ source(\"stg\", \"STG_CLIENTES\") }} a\r\n            join {{ source(\"raw\", \"HUB_CLIENTES\") }} b on a.c_name = b.nombre_cliente\r\n            where hub_cliente_id not in (select hub_cliente_id from {{ this }})\r\n        {% else %}\r\n            select\r\n                b.hub_cliente_id,\r\n                current_date as fecha_carga,\r\n                md5(\r\n                    upper(trim(nvl(c_address, '')))\r\n                    || upper(trim(nvl(c_comment, '')))\r\n                    || upper(trim(nvl(c_phone, '')))\r\n                    || upper(trim(nvl(c_origen, '')))\r\n                ) as foto_cliente,\r\n                a.c_origen,\r\n                a.c_address as direccion,\r\n                a.c_comment as comentario,\r\n                a.c_phone as telefono\r\n            from {{ source(\"stg\", \"STG_CLIENTES\") }} a\r\n            join {{ source(\"raw\", \"HUB_CLIENTES\") }} b on a.c_name = b.nombre_cliente\r\n        {% endif %}\r\n    )\r\nselect *\r\nfrom sat_clientes_contacto", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_CLIENTES"], ["raw", "HUB_CLIENTES"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.stg.STG_CLIENTES", "source.SDG_Vault_demo.raw.HUB_CLIENTES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\sat_clientes_contacto.sql", "compiled": true, "compiled_code": "\n\nwith\n    sat_clientes_contacto as (\n        \n\n            select\n                b.hub_cliente_id,\n                current_date as fecha_carga,\n                md5(\n                    upper(trim(nvl(c_address, '')))\n                    || upper(trim(nvl(c_comment, '')))\n                    || upper(trim(nvl(c_phone, '')))\n                    || upper(trim(nvl(c_origen, '')))\n                ) as foto_cliente,\n                a.c_origen,\n                a.c_address as direccion,\n                a.c_comment as comentario,\n                a.c_phone as telefono\n            from SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES a\n            join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES b on a.c_name = b.nombre_cliente\n            where hub_cliente_id not in (select hub_cliente_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_clientes_contacto)\n        \n    )\nselect *\nfrom sat_clientes_contacto", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.sat_clientes_cuenta": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "sat_clientes_cuenta", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\sat_clientes_cuenta.sql", "original_file_path": "models\\Raw_Vault\\sat_clientes_cuenta.sql", "unique_id": "model.SDG_Vault_demo.sat_clientes_cuenta", "fqn": ["SDG_Vault_demo", "Raw_Vault", "sat_clientes_cuenta"], "alias": "sat_clientes_cuenta", "checksum": {"name": "sha256", "checksum": "b8711cb30db530be7a6c5a9f635a7a4d11b72afe7bc3bfaa91da4802cc4b5913"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hub_cliente_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": "hub_cliente_id"}, "created_at": 1754387771.9533107, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_clientes_cuenta", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"hub_cliente_id\") }}\r\n\r\nwith\r\n    sat_clientes_cuenta as (\r\n        {% if is_incremental() %}\r\n            select\r\n                b.hub_cliente_id,\r\n                current_date as fecha_carga,\r\n                md5(\r\n                    upper(trim(nvl(c_acctbal, '')))\r\n                    || upper(trim(nvl(c_comment, '')))\r\n                    || upper(trim(nvl(c_mktsegment, '')))\r\n                    || upper(trim(nvl(c_origen, '')))\r\n                ) as foto_cliente,\r\n                a.c_origen,\r\n                a.c_acctbal as cuenta_balance,\r\n                a.c_comment as comentario,\r\n                a.c_mktsegment as segmento_marketing\r\n            from {{ source(\"stg\", \"STG_CLIENTES\") }} a\r\n            join {{ source(\"raw\", \"HUB_CLIENTES\") }} b on a.c_name = b.nombre_cliente\r\n            where hub_cliente_id not in (select hub_cliente_id from {{ this }})\r\n        {% else %}\r\n            select\r\n                b.hub_cliente_id,\r\n                current_date as fecha_carga,\r\n                md5(\r\n                    upper(trim(nvl(c_acctbal, '')))\r\n                    || upper(trim(nvl(c_comment, '')))\r\n                    || upper(trim(nvl(c_mktsegment, '')))\r\n                    || upper(trim(nvl(c_origen, '')))\r\n                ) as foto_cliente,\r\n                a.c_origen,\r\n                a.c_acctbal as cuenta_balance,\r\n                a.c_comment as comentario,\r\n                a.c_mktsegment as segmento_marketing\r\n            from {{ source(\"stg\", \"STG_CLIENTES\") }} a\r\n            join {{ source(\"raw\", \"HUB_CLIENTES\") }} b on a.c_name = b.nombre_cliente\r\n        {% endif %}\r\n    )\r\nselect *\r\nfrom sat_clientes_cuenta", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_CLIENTES"], ["raw", "HUB_CLIENTES"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.stg.STG_CLIENTES", "source.SDG_Vault_demo.raw.HUB_CLIENTES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\sat_clientes_cuenta.sql", "compiled": true, "compiled_code": "\n\nwith\n    sat_clientes_cuenta as (\n        \n            select\n                b.hub_cliente_id,\n                current_date as fecha_carga,\n                md5(\n                    upper(trim(nvl(c_acctbal, '')))\n                    || upper(trim(nvl(c_comment, '')))\n                    || upper(trim(nvl(c_mktsegment, '')))\n                    || upper(trim(nvl(c_origen, '')))\n                ) as foto_cliente,\n                a.c_origen,\n                a.c_acctbal as cuenta_balance,\n                a.c_comment as comentario,\n                a.c_mktsegment as segmento_marketing\n            from SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES a\n            join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES b on a.c_name = b.nombre_cliente\n            where hub_cliente_id not in (select hub_cliente_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_clientes_cuenta)\n        \n    )\nselect *\nfrom sat_clientes_cuenta", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.sat_lineas_pedidos": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "sat_lineas_pedidos", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\sat_lineas_pedidos.sql", "original_file_path": "models\\Raw_Vault\\sat_lineas_pedidos.sql", "unique_id": "model.SDG_Vault_demo.sat_lineas_pedidos", "fqn": ["SDG_Vault_demo", "Raw_Vault", "sat_lineas_pedidos"], "alias": "sat_lineas_pedidos", "checksum": {"name": "sha256", "checksum": "9f3b93541bf21a43a36206a0673a60dfc5f0189d43d36e18827645021374c457"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.9593556, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_lineas_pedidos", "raw_code": "with\r\n    sat_lineas_pedidos as (\r\n        select\r\n            b.hub_lineas_pedido_id,\r\n            current_date as fecha_carga,\r\n            md5(\r\n                upper(trim(nvl(a.l_quantity, '')))\r\n                || upper(trim(nvl(a.l_extendedprice, '')))\r\n                || upper(trim(nvl(a.l_discount, '')))\r\n                || upper(trim(nvl(a.l_tax, '')))\r\n                || upper(trim(nvl(a.l_returnflag, '')))\r\n                || upper(trim(nvl(a.l_linestatus, '')))\r\n                || upper(trim(nvl(a.l_shipdate, '')))\r\n                || upper(trim(nvl(a.l_commitdate, '')))\r\n                || upper(trim(nvl(a.l_receiptdate, '')))\r\n                || upper(trim(nvl(a.l_shipinstruct, '')))\r\n                || upper(trim(nvl(a.l_shipmode, '')))\r\n                || upper(trim(nvl(a.l_comment, '')))\r\n                || upper(trim(nvl(a.l_origen, '')))\r\n            ) as foto_linea_pedido,\r\n            a.l_origen,\r\n            a.l_quantity,\r\n            a.l_extendedprice,\r\n            a.l_discount,\r\n            a.l_tax,\r\n            a.l_returnflag,\r\n            a.l_linestatus,\r\n            a.l_shipdate,\r\n            a.l_commitdate,\r\n            a.l_receiptdate,\r\n            a.l_shipinstruct,\r\n            a.l_shipmode,\r\n            a.l_comment\r\n        from {{ source(\"stg\", \"STG_LINEAS_PEDIDO\") }} a\r\n        join\r\n            {{ source(\"raw\", \"HUB_LINEAS_PEDIDOS\") }} b\r\n            on a.l_orderkey = b.clave_pedido\r\n            and a.l_linenumber = b.linea_pedido\r\n    )\r\nselect *\r\nfrom sat_lineas_pedidos", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_LINEAS_PEDIDOS"], ["stg", "STG_LINEAS_PEDIDO"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.HUB_LINEAS_PEDIDOS", "source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\sat_lineas_pedidos.sql", "compiled": true, "compiled_code": "with\n    sat_lineas_pedidos as (\n        select\n            b.hub_lineas_pedido_id,\n            current_date as fecha_carga,\n            md5(\n                upper(trim(nvl(a.l_quantity, '')))\n                || upper(trim(nvl(a.l_extendedprice, '')))\n                || upper(trim(nvl(a.l_discount, '')))\n                || upper(trim(nvl(a.l_tax, '')))\n                || upper(trim(nvl(a.l_returnflag, '')))\n                || upper(trim(nvl(a.l_linestatus, '')))\n                || upper(trim(nvl(a.l_shipdate, '')))\n                || upper(trim(nvl(a.l_commitdate, '')))\n                || upper(trim(nvl(a.l_receiptdate, '')))\n                || upper(trim(nvl(a.l_shipinstruct, '')))\n                || upper(trim(nvl(a.l_shipmode, '')))\n                || upper(trim(nvl(a.l_comment, '')))\n                || upper(trim(nvl(a.l_origen, '')))\n            ) as foto_linea_pedido,\n            a.l_origen,\n            a.l_quantity,\n            a.l_extendedprice,\n            a.l_discount,\n            a.l_tax,\n            a.l_returnflag,\n            a.l_linestatus,\n            a.l_shipdate,\n            a.l_commitdate,\n            a.l_receiptdate,\n            a.l_shipinstruct,\n            a.l_shipmode,\n            a.l_comment\n        from SDGVAULTMART.DBT_SDGVAULT.STG_LINEAS_PEDIDO a\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_LINEAS_PEDIDOS b\n            on a.l_orderkey = b.clave_pedido\n            and a.l_linenumber = b.linea_pedido\n    )\nselect *\nfrom sat_lineas_pedidos", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.sat_paises": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "sat_paises", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\sat_paises.sql", "original_file_path": "models\\Raw_Vault\\sat_paises.sql", "unique_id": "model.SDG_Vault_demo.sat_paises", "fqn": ["SDG_Vault_demo", "Raw_Vault", "sat_paises"], "alias": "sat_paises", "checksum": {"name": "sha256", "checksum": "2a672d38009c4f931b591b5912a0a0caab906263ca2b7ffbb95152558b4a000a"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hub_pais_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": "hub_pais_id"}, "created_at": 1754387771.9630919, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_paises", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"hub_pais_id\") }}\r\n\r\nwith\r\n    sat_paises as (\r\n        {% if is_incremental() %}\r\n            select\r\n                hub_pais_id,\r\n                current_date as fecha_carga,\r\n                md5(\r\n                    upper(trim(nvl(n_comment, ''))) || upper(trim(nvl(n_origen, '')))\r\n                ) as foto_pais,\r\n                n_origen,\r\n                n_comment as comentario,\r\n            from {{ source(\"stg\", \"STG_PAISES\") }} a\r\n            join {{ source(\"raw\", \"HUB_PAISES\") }} b on a.n_name = b.nombre_pais \r\n            where hub_pais_id not in (select hub_pais_id from {{ this }})\r\n        {% else %}\r\n            select\r\n                b.hub_pais_id,\r\n                current_date as fecha_carga,\r\n                md5(\r\n                    upper(trim(nvl(n_comment, ''))) || upper(trim(nvl(n_origen, '')))\r\n                ) as foto_pais,\r\n                a.n_origen,\r\n                a.n_comment as comentario,\r\n            from {{ source(\"stg\", \"STG_PAISES\") }} a\r\n            join {{ source(\"raw\", \"HUB_PAISES\") }} b on a.n_name = b.nombre_pais\r\n        {% endif %}\r\n    )\r\nselect *\r\nfrom sat_paises", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_PAISES"], ["raw", "HUB_PAISES"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.stg.STG_PAISES", "source.SDG_Vault_demo.raw.HUB_PAISES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\sat_paises.sql", "compiled": true, "compiled_code": "\n\nwith\n    sat_paises as (\n        \n            select\n                hub_pais_id,\n                current_date as fecha_carga,\n                md5(\n                    upper(trim(nvl(n_comment, ''))) || upper(trim(nvl(n_origen, '')))\n                ) as foto_pais,\n                n_origen,\n                n_comment as comentario,\n            from SDGVAULTMART.DBT_SDGVAULT.STG_PAISES a\n            join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PAISES b on a.n_name = b.nombre_pais \n            where hub_pais_id not in (select hub_pais_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_paises)\n        \n    )\nselect *\nfrom sat_paises", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.sat_partes": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "sat_partes", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\sat_partes.sql", "original_file_path": "models\\Raw_Vault\\sat_partes.sql", "unique_id": "model.SDG_Vault_demo.sat_partes", "fqn": ["SDG_Vault_demo", "Raw_Vault", "sat_partes"], "alias": "sat_partes", "checksum": {"name": "sha256", "checksum": "d70f189f3c04983763334ca10c0a730ad42f14bbb00eedd911489b757ccbd975"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.9689376, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_partes", "raw_code": "with\r\n    sat_partes as (\r\n        select\r\n            b.hub_parte_id,\r\n            current_date as fecha_carga,\r\n            md5(\r\n                upper(trim(nvl(a.p_mfgr, '')))\r\n                || upper(trim(nvl(a.p_type, '')))\r\n                || upper(trim(nvl(a.p_size, '')))\r\n                || upper(trim(nvl(a.p_container, '')))\r\n                || upper(trim(nvl(a.p_retailprice, '')))\r\n                || upper(trim(nvl(a.p_comment, '')))\r\n                || upper(trim(nvl(a.p_origen, '')))\r\n            ) as foto_parte,\r\n            a.p_origen,\r\n            a.p_mfgr as fabricante,\r\n            a.p_type as tipo,\r\n            a.p_size as medida,\r\n            a.p_container as contenedor,\r\n            a.p_retailprice as precio_venta,\r\n            a.p_comment as comentario,\r\n        from {{ source(\"stg\", \"STG_PARTES\") }} a\r\n        join\r\n            {{ source(\"raw\", \"HUB_PARTES\") }} b\r\n            on a.p_name = b.nombre_parte\r\n            and a.p_brand = b.nombre_marca\r\n    )\r\nselect *\r\nfrom sat_partes", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_PARTES"], ["stg", "STG_PARTES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.HUB_PARTES", "source.SDG_Vault_demo.stg.STG_PARTES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\sat_partes.sql", "compiled": true, "compiled_code": "with\n    sat_partes as (\n        select\n            b.hub_parte_id,\n            current_date as fecha_carga,\n            md5(\n                upper(trim(nvl(a.p_mfgr, '')))\n                || upper(trim(nvl(a.p_type, '')))\n                || upper(trim(nvl(a.p_size, '')))\n                || upper(trim(nvl(a.p_container, '')))\n                || upper(trim(nvl(a.p_retailprice, '')))\n                || upper(trim(nvl(a.p_comment, '')))\n                || upper(trim(nvl(a.p_origen, '')))\n            ) as foto_parte,\n            a.p_origen,\n            a.p_mfgr as fabricante,\n            a.p_type as tipo,\n            a.p_size as medida,\n            a.p_container as contenedor,\n            a.p_retailprice as precio_venta,\n            a.p_comment as comentario,\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PARTES a\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PARTES b\n            on a.p_name = b.nombre_parte\n            and a.p_brand = b.nombre_marca\n    )\nselect *\nfrom sat_partes", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.sat_partes_proveedores": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "sat_partes_proveedores", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\sat_partes_proveedores.sql", "original_file_path": "models\\Raw_Vault\\sat_partes_proveedores.sql", "unique_id": "model.SDG_Vault_demo.sat_partes_proveedores", "fqn": ["SDG_Vault_demo", "Raw_Vault", "sat_partes_proveedores"], "alias": "sat_partes_proveedores", "checksum": {"name": "sha256", "checksum": "608d299b7f76eef95ffadbce69dd4886fb6ac2631b6cf15b6ef28e43301f8f08"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.9727135, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_partes_proveedores", "raw_code": "with\r\n    sat_partes_proveedores as (\r\n        select\r\n            b.hub_parte_id,\r\n            c.hub_proveedor_id,\r\n            current_date as fecha_carga,\r\n            md5(\r\n                upper(trim(nvl(a.ps_availqty, '')))\r\n                || upper(trim(nvl(a.ps_supplycost, '')))\r\n                || upper(trim(nvl(a.ps_comment, '')))\r\n                || upper(trim(nvl(a.ps_origen, '')))\r\n            ) as foto_parte_pedido,\r\n            a.ps_origen,\r\n            a.ps_availqty as disponibilidad,\r\n            a.ps_supplycost as coste_envio,\r\n            a.ps_comment as comentario,\r\n        from {{ source(\"stg\", \"STG_PARTES_PROVEEDOR\") }} a\r\n        join {{ source(\"stg\", \"STG_PARTES\") }} a1 on a.ps_partkey = a1.p_partkey\r\n        join {{ source(\"stg\", \"STG_PROVEEDORES\") }} a2 on a.ps_suppkey = a2.s_suppkey\r\n        join\r\n            {{ source(\"raw\", \"HUB_PARTES\") }} b\r\n            on a1.p_name = b.nombre_parte\r\n            and a1.p_brand = b.nombre_marca\r\n        join {{ source(\"raw\", \"HUB_PROVEEDORES\") }} c on a2.s_name = c.nombre_proveedor\r\n    )\r\nselect *\r\nfrom sat_partes_proveedores", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_PARTES"], ["raw", "HUB_PROVEEDORES"], ["stg", "STG_PARTES"], ["stg", "STG_PARTES_PROVEEDOR"], ["stg", "STG_PROVEEDORES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.HUB_PARTES", "source.SDG_Vault_demo.raw.HUB_PROVEEDORES", "source.SDG_Vault_demo.stg.STG_PARTES", "source.SDG_Vault_demo.stg.STG_PARTES_PROVEEDOR", "source.SDG_Vault_demo.stg.STG_PROVEEDORES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\sat_partes_proveedores.sql", "compiled": true, "compiled_code": "with\n    sat_partes_proveedores as (\n        select\n            b.hub_parte_id,\n            c.hub_proveedor_id,\n            current_date as fecha_carga,\n            md5(\n                upper(trim(nvl(a.ps_availqty, '')))\n                || upper(trim(nvl(a.ps_supplycost, '')))\n                || upper(trim(nvl(a.ps_comment, '')))\n                || upper(trim(nvl(a.ps_origen, '')))\n            ) as foto_parte_pedido,\n            a.ps_origen,\n            a.ps_availqty as disponibilidad,\n            a.ps_supplycost as coste_envio,\n            a.ps_comment as comentario,\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PARTES_PROVEEDOR a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PARTES a1 on a.ps_partkey = a1.p_partkey\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES a2 on a.ps_suppkey = a2.s_suppkey\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PARTES b\n            on a1.p_name = b.nombre_parte\n            and a1.p_brand = b.nombre_marca\n        join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PROVEEDORES c on a2.s_name = c.nombre_proveedor\n    )\nselect *\nfrom sat_partes_proveedores", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.sat_pedidos": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "sat_pedidos", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\sat_pedidos.sql", "original_file_path": "models\\Raw_Vault\\sat_pedidos.sql", "unique_id": "model.SDG_Vault_demo.sat_pedidos", "fqn": ["SDG_Vault_demo", "Raw_Vault", "sat_pedidos"], "alias": "sat_pedidos", "checksum": {"name": "sha256", "checksum": "3868e7f666db34cd004256effa5d8d6da5147695eb6345162fb63af39fb49aaa"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hub_pedido_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE", "unique_key": "hub_pedido_id"}, "created_at": 1754387771.9756606, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_pedidos", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"hub_pedido_id\") }}\r\nwith\r\n    sat_pedidos as (\r\n        {% if is_incremental() %}\r\n            select\r\n                b.hub_pedido_id,\r\n                current_date as fecha_carga,\r\n                md5(\r\n                    upper(trim(nvl(a.o_orderstatus, '')))\r\n                    || upper(trim(nvl(a.o_totalprice, '')))\r\n                    || upper(trim(nvl(a.o_orderdate, '')))\r\n                    || upper(trim(nvl(a.o_orderpriority, '')))\r\n                    || upper(trim(nvl(a.o_shippriority, '')))\r\n                    || upper(trim(nvl(a.o_comment, '')))\r\n                    || upper(trim(nvl(a.o_origen, '')))\r\n                ) as foto_pedido,\r\n                a.o_origen,\r\n                a.o_orderstatus as estado_pedido,\r\n                a.o_totalprice as precio_total,\r\n                a.o_orderdate as fecha_pedido,\r\n                a.o_orderpriority as prioridad_ped,\r\n                a.o_shippriority as prioridad_env,\r\n                a.o_comment as comentario,\r\n            from {{ source(\"stg\", \"STG_PEDIDOS\") }} a\r\n            join\r\n                {{ source(\"raw\", \"HUB_PEDIDOS\") }} b\r\n                on a.o_orderkey = b.clave_pedido\r\n                and a.o_clerk = b.empleado\r\n            where hub_pedido_id not in (select hub_pedido_id from {{ this }})\r\n        {% else %}\r\n            select\r\n                b.hub_pedido_id,\r\n                current_date as fecha_carga,\r\n                md5(\r\n                    upper(trim(nvl(a.o_orderstatus, '')))\r\n                    || upper(trim(nvl(a.o_totalprice, '')))\r\n                    || upper(trim(nvl(a.o_orderdate, '')))\r\n                    || upper(trim(nvl(a.o_orderpriority, '')))\r\n                    || upper(trim(nvl(a.o_shippriority, '')))\r\n                    || upper(trim(nvl(a.o_comment, '')))\r\n                    || upper(trim(nvl(a.o_origen, '')))\r\n                ) as foto_pedido,\r\n                a.o_origen,\r\n                a.o_orderstatus as estado_pedido,\r\n                a.o_totalprice as precio_total,\r\n                a.o_orderdate as fecha_pedido,\r\n                a.o_orderpriority as prioridad_ped,\r\n                a.o_shippriority as prioridad_env,\r\n                a.o_comment as comentario,\r\n            from {{ source(\"stg\", \"STG_PEDIDOS\") }} a\r\n            join\r\n                {{ source(\"raw\", \"HUB_PEDIDOS\") }} b\r\n                on a.o_orderkey = b.clave_pedido\r\n                and a.o_clerk = b.empleado\r\n        {% endif %}\r\n    )\r\nselect *\r\nfrom sat_pedidos", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_PEDIDOS"], ["raw", "HUB_PEDIDOS"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.stg.STG_PEDIDOS", "source.SDG_Vault_demo.raw.HUB_PEDIDOS"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\sat_pedidos.sql", "compiled": true, "compiled_code": "\nwith\n    sat_pedidos as (\n        \n            select\n                b.hub_pedido_id,\n                current_date as fecha_carga,\n                md5(\n                    upper(trim(nvl(a.o_orderstatus, '')))\n                    || upper(trim(nvl(a.o_totalprice, '')))\n                    || upper(trim(nvl(a.o_orderdate, '')))\n                    || upper(trim(nvl(a.o_orderpriority, '')))\n                    || upper(trim(nvl(a.o_shippriority, '')))\n                    || upper(trim(nvl(a.o_comment, '')))\n                    || upper(trim(nvl(a.o_origen, '')))\n                ) as foto_pedido,\n                a.o_origen,\n                a.o_orderstatus as estado_pedido,\n                a.o_totalprice as precio_total,\n                a.o_orderdate as fecha_pedido,\n                a.o_orderpriority as prioridad_ped,\n                a.o_shippriority as prioridad_env,\n                a.o_comment as comentario,\n            from SDGVAULTMART.DBT_SDGVAULT.STG_PEDIDOS a\n            join\n                SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PEDIDOS b\n                on a.o_orderkey = b.clave_pedido\n                and a.o_clerk = b.empleado\n            where hub_pedido_id not in (select hub_pedido_id from SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_pedidos)\n        \n    )\nselect *\nfrom sat_pedidos", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.sat_proveedores": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "sat_proveedores", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\sat_proveedores.sql", "original_file_path": "models\\Raw_Vault\\sat_proveedores.sql", "unique_id": "model.SDG_Vault_demo.sat_proveedores", "fqn": ["SDG_Vault_demo", "Raw_Vault", "sat_proveedores"], "alias": "sat_proveedores", "checksum": {"name": "sha256", "checksum": "038563ca6f8db8272a1b85fc7b2e8bb2d8e7811d1966c31b4291dbb74dec084d"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.9821677, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_proveedores", "raw_code": "with\r\n    sat_proveedores as (\r\n        select\r\n            b.hub_proveedor_id,\r\n            current_date as fecha_carga,\r\n            md5(\r\n                upper(trim(nvl(s_acctbal, '')))\r\n                || upper(trim(nvl(s_address, '')))\r\n                || upper(trim(nvl(s_comment, '')))\r\n                || upper(trim(nvl(s_phone, '')))\r\n                || upper(trim(nvl(s_origen, '')))\r\n            ) as foto_proveedor,\r\n            a.s_origen,\r\n            a.s_acctbal as cuenta_balance,\r\n            a.s_address as direccion,\r\n            a.s_comment as comentario,\r\n            a.s_phone as telefono\r\n        from {{ source(\"stg\", \"STG_PROVEEDORES\") }} a\r\n        join {{ source(\"raw\", \"HUB_PROVEEDORES\") }} b on a.s_name = b.nombre_proveedor\r\n    )\r\nselect *\r\nfrom sat_proveedores", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "HUB_PROVEEDORES"], ["stg", "STG_PROVEEDORES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.HUB_PROVEEDORES", "source.SDG_Vault_demo.stg.STG_PROVEEDORES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\sat_proveedores.sql", "compiled": true, "compiled_code": "with\n    sat_proveedores as (\n        select\n            b.hub_proveedor_id,\n            current_date as fecha_carga,\n            md5(\n                upper(trim(nvl(s_acctbal, '')))\n                || upper(trim(nvl(s_address, '')))\n                || upper(trim(nvl(s_comment, '')))\n                || upper(trim(nvl(s_phone, '')))\n                || upper(trim(nvl(s_origen, '')))\n            ) as foto_proveedor,\n            a.s_origen,\n            a.s_acctbal as cuenta_balance,\n            a.s_address as direccion,\n            a.s_comment as comentario,\n            a.s_phone as telefono\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES a\n        join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PROVEEDORES b on a.s_name = b.nombre_proveedor\n    )\nselect *\nfrom sat_proveedores", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.sat_regiones": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "sat_regiones", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\sat_regiones.sql", "original_file_path": "models\\Raw_Vault\\sat_regiones.sql", "unique_id": "model.SDG_Vault_demo.sat_regiones", "fqn": ["SDG_Vault_demo", "Raw_Vault", "sat_regiones"], "alias": "sat_regiones", "checksum": {"name": "sha256", "checksum": "f5e03cf36176d987a34a03fbdd4c882629337f151e87c6dbcd7dfa3712892449"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.9848964, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.sat_regiones", "raw_code": "with\r\n    sat_regiones as (\r\n        select\r\n            b.hub_region_id,\r\n            current_date as fecha_carga,\r\n            md5(\r\n                upper(trim(nvl(r_comment, ''))) || upper(trim(nvl(r_origen, '')))\r\n            ) as foto_cliente,\r\n            a.r_origen,\r\n            a.r_comment as comentario,\r\n        from {{ source(\"stg\", \"STG_REGIONES\") }} a\r\n        join {{ source(\"raw\", \"HUB_REGIONES\") }} b on a.r_name = b.nombre_region\r\n    )\r\nselect *\r\nfrom sat_regiones", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_REGIONES"], ["raw", "HUB_REGIONES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.stg.STG_REGIONES", "source.SDG_Vault_demo.raw.HUB_REGIONES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\sat_regiones.sql", "compiled": true, "compiled_code": "with\n    sat_regiones as (\n        select\n            b.hub_region_id,\n            current_date as fecha_carga,\n            md5(\n                upper(trim(nvl(r_comment, ''))) || upper(trim(nvl(r_origen, '')))\n            ) as foto_cliente,\n            a.r_origen,\n            a.r_comment as comentario,\n        from SDGVAULTMART.DBT_SDGVAULT.STG_REGIONES a\n        join SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_REGIONES b on a.r_name = b.nombre_region\n    )\nselect *\nfrom sat_regiones", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.v_hub_sat_pedidos_eu": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "v_hub_sat_pedidos_eu", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\v_hub_sat_pedidos_eu.sql", "original_file_path": "models\\Raw_Vault\\v_hub_sat_pedidos_eu.sql", "unique_id": "model.SDG_Vault_demo.v_hub_sat_pedidos_eu", "fqn": ["SDG_Vault_demo", "Raw_Vault", "v_hub_sat_pedidos_eu"], "alias": "v_hub_sat_pedidos_eu", "checksum": {"name": "sha256", "checksum": "1fd0a351e2cafefcec36f451ed3667228ca23aa3d76697b3dc6bc8c91cdf5073"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.9884453, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.v_hub_sat_pedidos_eu", "raw_code": "{{ config(materialized=\"view\") }}\r\n\r\nwith\r\n    v_hub_sat_pedidos_eu as (\r\n        select\r\n            hpe.hub_pedido_id,\r\n            hpe.clave_pedido as hub_clave_pedido,\r\n            hpe.empleado as hub_empleado,\r\n            hpe.fecha_carga as hub_fecha_carga,\r\n            hpe.origen as hub_origen,\r\n            spe.fecha_carga as sat_fecha_carga,\r\n            spe.foto_pedido as sat_foto_pedido,\r\n            spe.o_origen as sat_origen,\r\n            spe.estado_pedido as sat_estado_pedido,\r\n            spe.precio_total as sat_precio_total,\r\n            spe.fecha_pedido as sat_fecha_pedido,\r\n            spe.prioridad_env as sat_prioridad_env,\r\n            spe.prioridad_ped as sat_prioridad_ped,\r\n            spe.comentario as sat_comentario\r\n        from {{ source(\"raw\", \"HUB_PEDIDOS\") }} hpe\r\n        join\r\n            {{ source(\"raw\", \"SAT_PEDIDOS\") }} spe\r\n            on hpe.hub_pedido_id = spe.hub_pedido_id\r\n        join\r\n            {{ source(\"raw\", \"LNK_CLIENTES_PEDIDOS\") }} lcp\r\n            on hpe.hub_pedido_id = lcp.hub_pedido_id\r\n        join\r\n            {{ source(\"raw\", \"LNK_PAISES_CLIENTES\") }} lpc\r\n            on lcp.hub_cliente_id = lpc.hub_cliente_id\r\n            and lpc.nombre_pais\r\n            in ('ESPA\u00d1A', 'GERMANY', 'RUSSIA', 'ROMANIA', 'UNITED KINGDOM', 'FRANCE')\r\n    )\r\nselect *\r\nfrom v_hub_sat_pedidos_eu", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "LNK_PAISES_CLIENTES"], ["raw", "HUB_PEDIDOS"], ["raw", "SAT_PEDIDOS"], ["raw", "LNK_CLIENTES_PEDIDOS"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.LNK_PAISES_CLIENTES", "source.SDG_Vault_demo.raw.HUB_PEDIDOS", "source.SDG_Vault_demo.raw.SAT_PEDIDOS", "source.SDG_Vault_demo.raw.LNK_CLIENTES_PEDIDOS"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\v_hub_sat_pedidos_eu.sql", "compiled": true, "compiled_code": "\n\nwith\n    v_hub_sat_pedidos_eu as (\n        select\n            hpe.hub_pedido_id,\n            hpe.clave_pedido as hub_clave_pedido,\n            hpe.empleado as hub_empleado,\n            hpe.fecha_carga as hub_fecha_carga,\n            hpe.origen as hub_origen,\n            spe.fecha_carga as sat_fecha_carga,\n            spe.foto_pedido as sat_foto_pedido,\n            spe.o_origen as sat_origen,\n            spe.estado_pedido as sat_estado_pedido,\n            spe.precio_total as sat_precio_total,\n            spe.fecha_pedido as sat_fecha_pedido,\n            spe.prioridad_env as sat_prioridad_env,\n            spe.prioridad_ped as sat_prioridad_ped,\n            spe.comentario as sat_comentario\n        from SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PEDIDOS hpe\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PEDIDOS spe\n            on hpe.hub_pedido_id = spe.hub_pedido_id\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_CLIENTES_PEDIDOS lcp\n            on hpe.hub_pedido_id = lcp.hub_pedido_id\n        join\n            SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PAISES_CLIENTES lpc\n            on lcp.hub_cliente_id = lpc.hub_cliente_id\n            and lpc.nombre_pais\n            in ('ESPA\u00d1A', 'GERMANY', 'RUSSIA', 'ROMANIA', 'UNITED KINGDOM', 'FRANCE')\n    )\nselect *\nfrom v_hub_sat_pedidos_eu", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.v_raw_lnk_clientes_pedidos_eu": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "v_raw_lnk_clientes_pedidos_eu", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\v_raw_lnk_clientes_pedidos_eu.sql", "original_file_path": "models\\Raw_Vault\\v_raw_lnk_clientes_pedidos_eu.sql", "unique_id": "model.SDG_Vault_demo.v_raw_lnk_clientes_pedidos_eu", "fqn": ["SDG_Vault_demo", "Raw_Vault", "v_raw_lnk_clientes_pedidos_eu"], "alias": "v_raw_lnk_clientes_pedidos_eu", "checksum": {"name": "sha256", "checksum": "05efc9e281dd75c449e73b5cba0f6d45fc4d4ff2eacb7f16281826c9554b1673"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.993138, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.v_raw_lnk_clientes_pedidos_eu", "raw_code": "{{ config(materialized=\"view\") }}\r\n\r\nselect lcp.*\r\nfrom {{ source(\"raw\", \"LNK_CLIENTES_PEDIDOS\") }} lcp\r\njoin\r\n    {{ source(\"raw\", \"LNK_PAISES_CLIENTES\") }} lpc\r\n    on lcp.hub_cliente_id = lpc.hub_cliente_id\r\n    and lpc.nombre_pais\r\n    in ('ESPA\u00d1A', 'GERMANY', 'RUSSIA', 'ROMANIA', 'UNITED KINGDOM', 'FRANCE')", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "LNK_PAISES_CLIENTES"], ["raw", "LNK_CLIENTES_PEDIDOS"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.LNK_PAISES_CLIENTES", "source.SDG_Vault_demo.raw.LNK_CLIENTES_PEDIDOS"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\v_raw_lnk_clientes_pedidos_eu.sql", "compiled": true, "compiled_code": "\n\nselect lcp.*\nfrom SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_CLIENTES_PEDIDOS lcp\njoin\n    SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PAISES_CLIENTES lpc\n    on lcp.hub_cliente_id = lpc.hub_cliente_id\n    and lpc.nombre_pais\n    in ('ESPA\u00d1A', 'GERMANY', 'RUSSIA', 'ROMANIA', 'UNITED KINGDOM', 'FRANCE')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.v_raw_lnk_paises_clientes_eu": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "v_raw_lnk_paises_clientes_eu", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "Raw_Vault\\v_raw_lnk_paises_clientes_eu.sql", "original_file_path": "models\\Raw_Vault\\v_raw_lnk_paises_clientes_eu.sql", "unique_id": "model.SDG_Vault_demo.v_raw_lnk_paises_clientes_eu", "fqn": ["SDG_Vault_demo", "Raw_Vault", "v_raw_lnk_paises_clientes_eu"], "alias": "v_raw_lnk_paises_clientes_eu", "checksum": {"name": "sha256", "checksum": "ce1af4f73c454f023c3bb2220c2980036cc99c982f1e0459c62f76f2dd214581"}, "config": {"enabled": true, "alias": null, "schema": "BRONZE", "database": "SDGVAULTMART", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "snowflake_warehouse": "SDGVAULTANALYTICS", "database": "SDGVAULTMART", "schema": "BRONZE"}, "created_at": 1754387771.99672, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.v_raw_lnk_paises_clientes_eu", "raw_code": "{{ config(materialized=\"view\") }}\r\n\r\nselect *\r\nfrom {{ source(\"raw\", \"LNK_PAISES_CLIENTES\") }}\r\nwhere\r\n    nombre_pais\r\n    in ('ESPA\u00d1A', 'GERMANY', 'RUSSIA', 'ROMANIA', 'UNITED KINGDOM', 'FRANCE')", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "LNK_PAISES_CLIENTES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.raw.LNK_PAISES_CLIENTES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\Raw_Vault\\v_raw_lnk_paises_clientes_eu.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PAISES_CLIENTES\nwhere\n    nombre_pais\n    in ('ESPA\u00d1A', 'GERMANY', 'RUSSIA', 'ROMANIA', 'UNITED KINGDOM', 'FRANCE')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.stg_clientes": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "stg_clientes", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "stg\\stg_clientes.sql", "original_file_path": "models\\stg\\stg_clientes.sql", "unique_id": "model.SDG_Vault_demo.stg_clientes", "fqn": ["SDG_Vault_demo", "stg", "stg_clientes"], "alias": "stg_clientes", "checksum": {"name": "sha256", "checksum": "87f8b6068353bdb969556a4d4377b86f5091ac23d1d6b1e6514df0bdc53fcdc4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "c_custkey", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "unique_key": "c_custkey"}, "created_at": 1754387771.9996586, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_clientes", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"c_custkey\") }}\r\n\r\n-- Selecci\u00f3n condicional de la fuente de datos\r\nwith\r\n    source_data as (\r\n        {% if is_incremental() %}\r\n            select\r\n                c_acctbal,\r\n                c_address,\r\n                c_comment,\r\n                c_custkey,\r\n                c_mktsegment,\r\n                c_name,\r\n                c_nationkey,\r\n                c_phone,\r\n                c_origen\r\n            from {{ source(\"stg\", \"CLIENTES_ELT\") }}\r\n            where c_custkey not in (select c_custkey from {{ this }})\r\n        {% else %}\r\n            select\r\n                c_acctbal,\r\n                c_address,\r\n                c_comment,\r\n                c_custkey,\r\n                c_mktsegment,\r\n                c_name,\r\n                c_nationkey,\r\n                c_phone,\r\n                'Snowflake' as c_origen\r\n            from {{ source(\"src\", \"CUSTOMER\") }}\r\n        {% endif %}\r\n    )\r\nselect *\r\nfrom source_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["src", "CUSTOMER"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.src.CUSTOMER"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\stg\\stg_clientes.sql", "compiled": true, "compiled_code": "\n\n-- Selecci\u00f3n condicional de la fuente de datos\nwith\n    source_data as (\n        \n            select\n                c_acctbal,\n                c_address,\n                c_comment,\n                c_custkey,\n                c_mktsegment,\n                c_name,\n                c_nationkey,\n                c_phone,\n                c_origen\n            from SDGVAULTMART.DBT_SDGVAULT.CLIENTES_ELT\n            where c_custkey not in (select c_custkey from SDGVAULTMART.DBT_SDGVAULT.stg_clientes)\n        \n    )\nselect *\nfrom source_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.stg_lineas_pedido": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "stg_lineas_pedido", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "stg\\stg_lineas_pedido.sql", "original_file_path": "models\\stg\\stg_lineas_pedido.sql", "unique_id": "model.SDG_Vault_demo.stg_lineas_pedido", "fqn": ["SDG_Vault_demo", "stg", "stg_lineas_pedido"], "alias": "stg_lineas_pedido", "checksum": {"name": "sha256", "checksum": "55362a3219596b6e553bb28d0437a1752b198b3e1afa5e70b26ee8fb8ee1107f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS"}, "created_at": 1754387772.006075, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_lineas_pedido", "raw_code": "-- {{ config(materialized=\"table\") }}\r\nwith stg_lineas_pedido as (select * from {{ source(\"src\", \"LINEITEM\") }})\r\nselect\r\n    l_orderkey,\r\n    l_partkey,\r\n    l_suppkey,\r\n    l_linenumber,\r\n    l_quantity,\r\n    l_extendedprice,\r\n    l_discount,\r\n    l_tax,\r\n    l_returnflag,\r\n    l_linestatus,\r\n    l_shipdate,\r\n    l_commitdate,\r\n    l_receiptdate,\r\n    l_shipinstruct,\r\n    l_shipmode,\r\n    l_comment,\r\n    'Snowflake' as l_origen\r\nfrom stg_lineas_pedido", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["src", "LINEITEM"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.src.LINEITEM"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\stg\\stg_lineas_pedido.sql", "compiled": true, "compiled_code": "-- \nwith stg_lineas_pedido as (select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.LINEITEM)\nselect\n    l_orderkey,\n    l_partkey,\n    l_suppkey,\n    l_linenumber,\n    l_quantity,\n    l_extendedprice,\n    l_discount,\n    l_tax,\n    l_returnflag,\n    l_linestatus,\n    l_shipdate,\n    l_commitdate,\n    l_receiptdate,\n    l_shipinstruct,\n    l_shipmode,\n    l_comment,\n    'Snowflake' as l_origen\nfrom stg_lineas_pedido", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.stg_paises": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "stg_paises", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "stg\\stg_paises.sql", "original_file_path": "models\\stg\\stg_paises.sql", "unique_id": "model.SDG_Vault_demo.stg_paises", "fqn": ["SDG_Vault_demo", "stg", "stg_paises"], "alias": "stg_paises", "checksum": {"name": "sha256", "checksum": "81740acbf40cc2f54862e1197c9a922f3c8d782902cc78a64b2f769726111c17"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "n_nationkey", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "unique_key": "n_nationkey"}, "created_at": 1754387772.0092115, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_paises", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"n_nationkey\") }}\r\n\r\n-- Selecci\u00f3n condicional de la fuente de datos\r\nwith\r\n    source_data as (\r\n\r\n        {% if is_incremental() %}\r\n            select n_nationkey, n_name, n_regionkey, n_comment, n_origen\r\n            from {{ source(\"stg\", \"PAISES_ELT\") }}\r\n            where n_nationkey not in (select n_nationkey from {{ this }})\r\n        {% else %}\r\n            select n_nationkey, n_name, n_regionkey, n_comment, 'Snowflake' as n_origen\r\n            from {{ source(\"src\", \"NATION\") }}\r\n        {% endif %}\r\n\r\n    )\r\nselect *\r\nfrom source_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["src", "NATION"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.src.NATION"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\stg\\stg_paises.sql", "compiled": true, "compiled_code": "\n\n-- Selecci\u00f3n condicional de la fuente de datos\nwith\n    source_data as (\n\n        \n            select n_nationkey, n_name, n_regionkey, n_comment, n_origen\n            from SDGVAULTMART.DBT_SDGVAULT.PAISES_ELT\n            where n_nationkey not in (select n_nationkey from SDGVAULTMART.DBT_SDGVAULT.stg_paises)\n        \n\n    )\nselect *\nfrom source_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.stg_partes": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "stg_partes", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "stg\\stg_partes.sql", "original_file_path": "models\\stg\\stg_partes.sql", "unique_id": "model.SDG_Vault_demo.stg_partes", "fqn": ["SDG_Vault_demo", "stg", "stg_partes"], "alias": "stg_partes", "checksum": {"name": "sha256", "checksum": "d71d5e24dfe466ff55eece5b7148e19bbd71d50437f7e5bafc657309f0006691"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS"}, "created_at": 1754387772.015916, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_partes", "raw_code": "with stg_partes as (select * from {{ source(\"src\", \"PART\") }})\r\nselect\r\n    p_partkey,\r\n    p_name,\r\n    p_mfgr,\r\n    p_brand,\r\n    p_type,\r\n    p_size,\r\n    p_container,\r\n    p_retailprice,\r\n    p_comment,\r\n    'Snowflake' as p_origen\r\nfrom stg_partes", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["src", "PART"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.src.PART"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\stg\\stg_partes.sql", "compiled": true, "compiled_code": "with stg_partes as (select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.PART)\nselect\n    p_partkey,\n    p_name,\n    p_mfgr,\n    p_brand,\n    p_type,\n    p_size,\n    p_container,\n    p_retailprice,\n    p_comment,\n    'Snowflake' as p_origen\nfrom stg_partes", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.stg_partes_proveedor": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "stg_partes_proveedor", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "stg\\stg_partes_proveedor.sql", "original_file_path": "models\\stg\\stg_partes_proveedor.sql", "unique_id": "model.SDG_Vault_demo.stg_partes_proveedor", "fqn": ["SDG_Vault_demo", "stg", "stg_partes_proveedor"], "alias": "stg_partes_proveedor", "checksum": {"name": "sha256", "checksum": "3607ea532771ba1e8196d02699ba60384c7d5060e9142529719b196a1838025e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS"}, "created_at": 1754387772.018798, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_partes_proveedor", "raw_code": "with stg_partes_proveedor as (select * from {{ source(\"src\", \"PARTSUPP\") }})\r\nselect\r\n    ps_partkey,\r\n    ps_suppkey,\r\n    ps_availqty,\r\n    ps_supplycost,\r\n    ps_comment,\r\n    'Snowflake' as ps_origen\r\nfrom stg_partes_proveedor", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["src", "PARTSUPP"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.src.PARTSUPP"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\stg\\stg_partes_proveedor.sql", "compiled": true, "compiled_code": "with stg_partes_proveedor as (select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.PARTSUPP)\nselect\n    ps_partkey,\n    ps_suppkey,\n    ps_availqty,\n    ps_supplycost,\n    ps_comment,\n    'Snowflake' as ps_origen\nfrom stg_partes_proveedor", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.stg_pedidos": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "stg_pedidos", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "stg\\stg_pedidos.sql", "original_file_path": "models\\stg\\stg_pedidos.sql", "unique_id": "model.SDG_Vault_demo.stg_pedidos", "fqn": ["SDG_Vault_demo", "stg", "stg_pedidos"], "alias": "stg_pedidos", "checksum": {"name": "sha256", "checksum": "78dcd49c10e571357309760ffe930b96717e4210353a157a49c367cdf9e439dd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "o_orderkey", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "snowflake_warehouse": "SDGVAULTANALYTICS", "unique_key": "o_orderkey"}, "created_at": 1754387772.0215054, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_pedidos", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"o_orderkey\") }}\r\n\r\nwith\r\n    source_data as (\r\n        {% if is_incremental() %}\r\n            select\r\n                o_orderkey,\r\n                o_custkey,\r\n                o_orderstatus,\r\n                o_totalprice,\r\n                o_orderdate,\r\n                o_orderpriority,\r\n                o_clerk,\r\n                o_shippriority,\r\n                o_comment,\r\n                o_origen\r\n            from {{ source(\"stg\", \"PEDIDOS_ELT\") }}\r\n            where o_orderkey not in (select o_orderkey from {{ this }})\r\n        {% else %}\r\n            select\r\n                o_orderkey,\r\n                o_custkey,\r\n                o_orderstatus,\r\n                o_totalprice,\r\n                o_orderdate,\r\n                o_orderpriority,\r\n                o_clerk,\r\n                o_shippriority,\r\n                o_comment,\r\n                'Snowflake' as o_origen\r\n            from {{ source(\"src\", \"ORDERS\") }}\r\n        {% endif %}\r\n    )\r\nselect *\r\nfrom source_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["src", "ORDERS"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.SDG_Vault_demo.src.ORDERS"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\stg\\stg_pedidos.sql", "compiled": true, "compiled_code": "\n\nwith\n    source_data as (\n        \n            select\n                o_orderkey,\n                o_custkey,\n                o_orderstatus,\n                o_totalprice,\n                o_orderdate,\n                o_orderpriority,\n                o_clerk,\n                o_shippriority,\n                o_comment,\n                o_origen\n            from SDGVAULTMART.DBT_SDGVAULT.PEDIDOS_ELT\n            where o_orderkey not in (select o_orderkey from SDGVAULTMART.DBT_SDGVAULT.stg_pedidos)\n        \n    )\nselect *\nfrom source_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.stg_proveedores": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "stg_proveedores", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "stg\\stg_proveedores.sql", "original_file_path": "models\\stg\\stg_proveedores.sql", "unique_id": "model.SDG_Vault_demo.stg_proveedores", "fqn": ["SDG_Vault_demo", "stg", "stg_proveedores"], "alias": "stg_proveedores", "checksum": {"name": "sha256", "checksum": "b0f6df67d603a6d3f2478ab8897fca156ddeeb1bba1f528173d2a8319e87366a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS"}, "created_at": 1754387772.0298903, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_proveedores", "raw_code": "with stg_proveedor as (select * from {{ source(\"src\", \"SUPPLIER\") }})\r\nselect\r\n    s_suppkey,\r\n    s_name,\r\n    s_address,\r\n    s_nationkey,\r\n    s_phone,\r\n    s_acctbal,\r\n    s_comment,\r\n    'Snowflake' as s_origen\r\nfrom stg_proveedor", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["src", "SUPPLIER"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.src.SUPPLIER"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\stg\\stg_proveedores.sql", "compiled": true, "compiled_code": "with stg_proveedor as (select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.SUPPLIER)\nselect\n    s_suppkey,\n    s_name,\n    s_address,\n    s_nationkey,\n    s_phone,\n    s_acctbal,\n    s_comment,\n    'Snowflake' as s_origen\nfrom stg_proveedor", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.stg_regiones": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "stg_regiones", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "stg\\stg_regiones.sql", "original_file_path": "models\\stg\\stg_regiones.sql", "unique_id": "model.SDG_Vault_demo.stg_regiones", "fqn": ["SDG_Vault_demo", "stg", "stg_regiones"], "alias": "stg_regiones", "checksum": {"name": "sha256", "checksum": "09a99d8d59116f07ce3d8f096aa61605c6e603206b67fa6e9c13b00c76cf689f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS"}, "created_at": 1754387772.0327587, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.stg_regiones", "raw_code": "with stg_partes_region as (select * from {{ source(\"src\", \"REGION\") }})\r\nselect r_regionkey, r_name, r_comment, 'Snowflake' as r_origen\r\nfrom stg_partes_region", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["src", "REGION"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.src.REGION"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\stg\\stg_regiones.sql", "compiled": true, "compiled_code": "with stg_partes_region as (select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.REGION)\nselect r_regionkey, r_name, r_comment, 'Snowflake' as r_origen\nfrom stg_partes_region", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.v_stg_clientes_pedidos_eu": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "v_stg_clientes_pedidos_eu", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "stg\\v_stg_clientes_pedidos_eu.sql", "original_file_path": "models\\stg\\v_stg_clientes_pedidos_eu.sql", "unique_id": "model.SDG_Vault_demo.v_stg_clientes_pedidos_eu", "fqn": ["SDG_Vault_demo", "stg", "v_stg_clientes_pedidos_eu"], "alias": "v_stg_clientes_pedidos_eu", "checksum": {"name": "sha256", "checksum": "b732dcb889e3ee8715ee759255cd59cf8fdc63ba5e1cc2b7a04452e2b0fd2d39"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "snowflake_warehouse": "SDGVAULTANALYTICS"}, "created_at": 1754387772.03557, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.v_stg_clientes_pedidos_eu", "raw_code": "{{ config(materialized=\"view\") }}\r\n\r\nwith\r\n    stg_clientes_pedidos_europa as (\r\n        select *\r\n        from {{ source(\"stg\", \"STG_CLIENTES\") }} a\r\n        join {{ source(\"stg\", \"STG_PEDIDOS\") }} b on a.c_custkey = b.o_custkey\r\n        join\r\n            {{ ref(\"v_stg_regiones_paises\") }} c\r\n            on a.c_nationkey = c.n_nationkey\r\n            and c.n_nationkey in (6, 19, 22, 23, 99, 7)\r\n    )\r\nselect *\r\nfrom stg_clientes_pedidos_europa", "doc_blocks": [], "language": "sql", "refs": [{"name": "v_stg_regiones_paises", "package": null, "version": null}], "sources": [["stg", "STG_PEDIDOS"], ["stg", "STG_CLIENTES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.stg.STG_PEDIDOS", "source.SDG_Vault_demo.stg.STG_CLIENTES", "model.SDG_Vault_demo.v_stg_regiones_paises"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\stg\\v_stg_clientes_pedidos_eu.sql", "compiled": true, "compiled_code": "\n\nwith\n    stg_clientes_pedidos_europa as (\n        select *\n        from SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PEDIDOS b on a.c_custkey = b.o_custkey\n        join\n            SDGVAULTMART.DBT_SDGVAULT.v_stg_regiones_paises c\n            on a.c_nationkey = c.n_nationkey\n            and c.n_nationkey in (6, 19, 22, 23, 99, 7)\n    )\nselect *\nfrom stg_clientes_pedidos_europa", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.v_stg_provee_partes_pedidos_eu": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "v_stg_provee_partes_pedidos_eu", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "stg\\v_stg_provee_partes_pedidos_eu.sql", "original_file_path": "models\\stg\\v_stg_provee_partes_pedidos_eu.sql", "unique_id": "model.SDG_Vault_demo.v_stg_provee_partes_pedidos_eu", "fqn": ["SDG_Vault_demo", "stg", "v_stg_provee_partes_pedidos_eu"], "alias": "v_stg_provee_partes_pedidos_eu", "checksum": {"name": "sha256", "checksum": "c03d0a5c3321ac29dc6ea920147cadcdee18a1e84ca2e4e234594b3e16c3a978"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "snowflake_warehouse": "SDGVAULTANALYTICS"}, "created_at": 1754387772.0392547, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.v_stg_provee_partes_pedidos_eu", "raw_code": "{{ config(materialized=\"view\") }}\r\n\r\nwith\r\n    stg_provee_partes_pedidos_europa as (\r\n        select *\r\n        from {{ source(\"stg\", \"STG_PROVEEDORES\") }} a\r\n        join {{ source(\"stg\", \"STG_PARTES_PROVEEDOR\") }} b on a.s_suppkey = b.ps_suppkey\r\n        join {{ source(\"stg\", \"STG_PARTES\") }} c on b.ps_partkey = c.p_partkey\r\n        join\r\n            {{ ref(\"v_stg_regiones_paises\") }} d\r\n            on a.s_nationkey = d.n_nationkey\r\n            and d.n_nationkey in (6, 19, 22, 23, 99, 7)\r\n    )\r\nselect *\r\nfrom stg_provee_partes_pedidos_europa", "doc_blocks": [], "language": "sql", "refs": [{"name": "v_stg_regiones_paises", "package": null, "version": null}], "sources": [["stg", "STG_PROVEEDORES"], ["stg", "STG_PARTES"], ["stg", "STG_PARTES_PROVEEDOR"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.stg.STG_PROVEEDORES", "source.SDG_Vault_demo.stg.STG_PARTES", "source.SDG_Vault_demo.stg.STG_PARTES_PROVEEDOR", "model.SDG_Vault_demo.v_stg_regiones_paises"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\stg\\v_stg_provee_partes_pedidos_eu.sql", "compiled": true, "compiled_code": "\n\nwith\n    stg_provee_partes_pedidos_europa as (\n        select *\n        from SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES a\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PARTES_PROVEEDOR b on a.s_suppkey = b.ps_suppkey\n        join SDGVAULTMART.DBT_SDGVAULT.STG_PARTES c on b.ps_partkey = c.p_partkey\n        join\n            SDGVAULTMART.DBT_SDGVAULT.v_stg_regiones_paises d\n            on a.s_nationkey = d.n_nationkey\n            and d.n_nationkey in (6, 19, 22, 23, 99, 7)\n    )\nselect *\nfrom stg_provee_partes_pedidos_europa", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.SDG_Vault_demo.v_stg_regiones_paises": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "v_stg_regiones_paises", "resource_type": "model", "package_name": "SDG_Vault_demo", "path": "stg\\v_stg_regiones_paises.sql", "original_file_path": "models\\stg\\v_stg_regiones_paises.sql", "unique_id": "model.SDG_Vault_demo.v_stg_regiones_paises", "fqn": ["SDG_Vault_demo", "stg", "v_stg_regiones_paises"], "alias": "v_stg_regiones_paises", "checksum": {"name": "sha256", "checksum": "61b92abf4161a3a869c88f5c749268de0c509b17046d62e67319328ee8f54d71"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "snowflake_warehouse": "SDGVAULTANALYTICS"}, "created_at": 1754387772.0434413, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.v_stg_regiones_paises", "raw_code": "{{ config(materialized=\"view\") }}\r\n\r\nselect a.*, b.*\r\nfrom {{ source(\"stg\", \"STG_REGIONES\") }} a\r\njoin {{ source(\"stg\", \"STG_PAISES\") }} b on a.r_regionkey = b.n_regionkey", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["stg", "STG_PAISES"], ["stg", "STG_REGIONES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.SDG_Vault_demo.stg.STG_PAISES", "source.SDG_Vault_demo.stg.STG_REGIONES"]}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\models\\stg\\v_stg_regiones_paises.sql", "compiled": true, "compiled_code": "\n\nselect a.*, b.*\nfrom SDGVAULTMART.DBT_SDGVAULT.STG_REGIONES a\njoin SDGVAULTMART.DBT_SDGVAULT.STG_PAISES b on a.r_regionkey = b.n_regionkey", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "analysis.SDG_Vault_demo.prueba": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "prueba", "resource_type": "analysis", "package_name": "SDG_Vault_demo", "path": "analysis\\prueba.sql", "original_file_path": "analyses\\prueba.sql", "unique_id": "analysis.SDG_Vault_demo.prueba", "fqn": ["SDG_Vault_demo", "analysis", "prueba"], "alias": "prueba", "checksum": {"name": "sha256", "checksum": "8b795642806a22c1ff79b4c8ffcd8eaec5ef5603b06b6d18504621e8feb42052"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "snowflake_warehouse": "SDGVAULTANALYTICS"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "snowflake_warehouse": "SDGVAULTANALYTICS"}, "created_at": 1754387772.2191908, "relation_name": null, "raw_code": "select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\SDG_Vault_demo\\analyses\\prueba.sql", "compiled": true, "compiled_code": "select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.SDG_Vault_demo.clientes_elt": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "clientes_elt", "resource_type": "seed", "package_name": "SDG_Vault_demo", "path": "2907\\clientes_elt.csv", "original_file_path": "seeds\\2907\\clientes_elt.csv", "unique_id": "seed.SDG_Vault_demo.clientes_elt", "fqn": ["SDG_Vault_demo", "2907", "clientes_elt"], "alias": "clientes_elt", "checksum": {"name": "sha256", "checksum": "73c447846317a2bf49e2a0570ee8838b92a976b5f0306a68a0895956c05ad88c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754387772.400394, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.clientes_elt", "raw_code": "", "doc_blocks": [], "root_path": "C:\\Users\\0021643\\Documents\\Practica\\proyecto-git\\gobdat", "depends_on": {"macros": []}}, "seed.SDG_Vault_demo.paises_elt": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "paises_elt", "resource_type": "seed", "package_name": "SDG_Vault_demo", "path": "2907\\paises_elt.csv", "original_file_path": "seeds\\2907\\paises_elt.csv", "unique_id": "seed.SDG_Vault_demo.paises_elt", "fqn": ["SDG_Vault_demo", "2907", "paises_elt"], "alias": "paises_elt", "checksum": {"name": "sha256", "checksum": "37c7ee5654bcbdd8161322618d50ade0d0697c158cea513eeb0426ab19378244"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754387772.4026997, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.paises_elt", "raw_code": "", "doc_blocks": [], "root_path": "C:\\Users\\0021643\\Documents\\Practica\\proyecto-git\\gobdat", "depends_on": {"macros": []}}, "seed.SDG_Vault_demo.pedidos_elt": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "pedidos_elt", "resource_type": "seed", "package_name": "SDG_Vault_demo", "path": "2907\\pedidos_elt.csv", "original_file_path": "seeds\\2907\\pedidos_elt.csv", "unique_id": "seed.SDG_Vault_demo.pedidos_elt", "fqn": ["SDG_Vault_demo", "2907", "pedidos_elt"], "alias": "pedidos_elt", "checksum": {"name": "sha256", "checksum": "c2ec2a451332bb757aed4c79ac3dfc203f3ef5c3c411b2901eb224eb8367629f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1754387772.4047093, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.pedidos_elt", "raw_code": "", "doc_blocks": [], "root_path": "C:\\Users\\0021643\\Documents\\Practica\\proyecto-git\\gobdat", "depends_on": {"macros": []}}}, "sources": {"source.SDG_Vault_demo.src.CUSTOMER": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF1", "name": "CUSTOMER", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.src.CUSTOMER", "fqn": ["SDG_Vault_demo", "src", "CUSTOMER"], "source_name": "src", "source_description": "", "loader": "", "identifier": "CUSTOMER", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla original de CLIENTES", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER", "created_at": 1754387772.5535328, "unrendered_database": "SNOWFLAKE_SAMPLE_DATA", "unrendered_schema": "TPCH_SF1", "doc_blocks": []}, "source.SDG_Vault_demo.src.LINEITEM": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF1", "name": "LINEITEM", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.src.LINEITEM", "fqn": ["SDG_Vault_demo", "src", "LINEITEM"], "source_name": "src", "source_description": "", "loader": "", "identifier": "LINEITEM", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla original de LINEAS DE PEDIDOS", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.LINEITEM", "created_at": 1754387772.5551562, "unrendered_database": "SNOWFLAKE_SAMPLE_DATA", "unrendered_schema": "TPCH_SF1", "doc_blocks": []}, "source.SDG_Vault_demo.src.NATION": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF1", "name": "NATION", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.src.NATION", "fqn": ["SDG_Vault_demo", "src", "NATION"], "source_name": "src", "source_description": "", "loader": "", "identifier": "NATION", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla original de PAISES", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.NATION", "created_at": 1754387772.5556931, "unrendered_database": "SNOWFLAKE_SAMPLE_DATA", "unrendered_schema": "TPCH_SF1", "doc_blocks": []}, "source.SDG_Vault_demo.src.ORDERS": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF1", "name": "ORDERS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.src.ORDERS", "fqn": ["SDG_Vault_demo", "src", "ORDERS"], "source_name": "src", "source_description": "", "loader": "", "identifier": "ORDERS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla original de PEDIDOS", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.ORDERS", "created_at": 1754387772.5561433, "unrendered_database": "SNOWFLAKE_SAMPLE_DATA", "unrendered_schema": "TPCH_SF1", "doc_blocks": []}, "source.SDG_Vault_demo.src.PART": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF1", "name": "PART", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.src.PART", "fqn": ["SDG_Vault_demo", "src", "PART"], "source_name": "src", "source_description": "", "loader": "", "identifier": "PART", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla original de PARTES", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.PART", "created_at": 1754387772.5566354, "unrendered_database": "SNOWFLAKE_SAMPLE_DATA", "unrendered_schema": "TPCH_SF1", "doc_blocks": []}, "source.SDG_Vault_demo.src.PARTSUPP": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF1", "name": "PARTSUPP", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.src.PARTSUPP", "fqn": ["SDG_Vault_demo", "src", "PARTSUPP"], "source_name": "src", "source_description": "", "loader": "", "identifier": "PARTSUPP", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla original de PARTES DE PROVEEDORES", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.PARTSUPP", "created_at": 1754387772.5570633, "unrendered_database": "SNOWFLAKE_SAMPLE_DATA", "unrendered_schema": "TPCH_SF1", "doc_blocks": []}, "source.SDG_Vault_demo.src.REGION": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF1", "name": "REGION", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.src.REGION", "fqn": ["SDG_Vault_demo", "src", "REGION"], "source_name": "src", "source_description": "", "loader": "", "identifier": "REGION", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla original de REGIONES", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.REGION", "created_at": 1754387772.5575128, "unrendered_database": "SNOWFLAKE_SAMPLE_DATA", "unrendered_schema": "TPCH_SF1", "doc_blocks": []}, "source.SDG_Vault_demo.src.SUPPLIER": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF1", "name": "SUPPLIER", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.src.SUPPLIER", "fqn": ["SDG_Vault_demo", "src", "SUPPLIER"], "source_name": "src", "source_description": "", "loader": "", "identifier": "SUPPLIER", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla original de PROVEEDORES", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.SUPPLIER", "created_at": 1754387772.5579438, "unrendered_database": "SNOWFLAKE_SAMPLE_DATA", "unrendered_schema": "TPCH_SF1", "doc_blocks": []}, "source.SDG_Vault_demo.stg.STG_CLIENTES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "STG_CLIENTES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.stg.STG_CLIENTES", "fqn": ["SDG_Vault_demo", "stg", "STG_CLIENTES"], "source_name": "stg", "source_description": "", "loader": "", "identifier": "STG_CLIENTES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.STG_CLIENTES", "created_at": 1754387772.5583668, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT", "doc_blocks": []}, "source.SDG_Vault_demo.stg.STG_PAISES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "STG_PAISES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.stg.STG_PAISES", "fqn": ["SDG_Vault_demo", "stg", "STG_PAISES"], "source_name": "stg", "source_description": "", "loader": "", "identifier": "STG_PAISES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.STG_PAISES", "created_at": 1754387772.558795, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT", "doc_blocks": []}, "source.SDG_Vault_demo.stg.STG_PARTES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "STG_PARTES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.stg.STG_PARTES", "fqn": ["SDG_Vault_demo", "stg", "STG_PARTES"], "source_name": "stg", "source_description": "", "loader": "", "identifier": "STG_PARTES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.STG_PARTES", "created_at": 1754387772.5592206, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT", "doc_blocks": []}, "source.SDG_Vault_demo.stg.STG_PROVEEDORES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "STG_PROVEEDORES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.stg.STG_PROVEEDORES", "fqn": ["SDG_Vault_demo", "stg", "STG_PROVEEDORES"], "source_name": "stg", "source_description": "", "loader": "", "identifier": "STG_PROVEEDORES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.STG_PROVEEDORES", "created_at": 1754387772.5597153, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT", "doc_blocks": []}, "source.SDG_Vault_demo.stg.STG_REGIONES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "STG_REGIONES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.stg.STG_REGIONES", "fqn": ["SDG_Vault_demo", "stg", "STG_REGIONES"], "source_name": "stg", "source_description": "", "loader": "", "identifier": "STG_REGIONES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.STG_REGIONES", "created_at": 1754387772.5606842, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT", "doc_blocks": []}, "source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "STG_LINEAS_PEDIDO", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO", "fqn": ["SDG_Vault_demo", "stg", "STG_LINEAS_PEDIDO"], "source_name": "stg", "source_description": "", "loader": "", "identifier": "STG_LINEAS_PEDIDO", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.STG_LINEAS_PEDIDO", "created_at": 1754387772.5611765, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT", "doc_blocks": []}, "source.SDG_Vault_demo.stg.STG_PEDIDOS": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "STG_PEDIDOS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.stg.STG_PEDIDOS", "fqn": ["SDG_Vault_demo", "stg", "STG_PEDIDOS"], "source_name": "stg", "source_description": "", "loader": "", "identifier": "STG_PEDIDOS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.STG_PEDIDOS", "created_at": 1754387772.5616393, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT", "doc_blocks": []}, "source.SDG_Vault_demo.stg.STG_PARTES_PROVEEDOR": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "STG_PARTES_PROVEEDOR", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.stg.STG_PARTES_PROVEEDOR", "fqn": ["SDG_Vault_demo", "stg", "STG_PARTES_PROVEEDOR"], "source_name": "stg", "source_description": "", "loader": "", "identifier": "STG_PARTES_PROVEEDOR", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.STG_PARTES_PROVEEDOR", "created_at": 1754387772.5621028, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT", "doc_blocks": []}, "source.SDG_Vault_demo.stg.CLIENTES_ELT": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "CLIENTES_ELT", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.stg.CLIENTES_ELT", "fqn": ["SDG_Vault_demo", "stg", "CLIENTES_ELT"], "source_name": "stg", "source_description": "", "loader": "", "identifier": "CLIENTES_ELT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla de carga de CLIENTES via CSV de manera incremental", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.CLIENTES_ELT", "created_at": 1754387772.5625408, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT", "doc_blocks": []}, "source.SDG_Vault_demo.stg.PAISES_ELT": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "PAISES_ELT", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.stg.PAISES_ELT", "fqn": ["SDG_Vault_demo", "stg", "PAISES_ELT"], "source_name": "stg", "source_description": "", "loader": "", "identifier": "PAISES_ELT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla de carga de PAISES via CSV de manera incremental", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.PAISES_ELT", "created_at": 1754387772.5629623, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT", "doc_blocks": []}, "source.SDG_Vault_demo.stg.PEDIDOS_ELT": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT", "name": "PEDIDOS_ELT", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.stg.PEDIDOS_ELT", "fqn": ["SDG_Vault_demo", "stg", "PEDIDOS_ELT"], "source_name": "stg", "source_description": "", "loader": "", "identifier": "PEDIDOS_ELT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla de carga de PAISES via CSV de manera incremental", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT.PEDIDOS_ELT", "created_at": 1754387772.5633848, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT", "doc_blocks": []}, "source.SDG_Vault_demo.raw.HUB_CLIENTES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "HUB_CLIENTES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.HUB_CLIENTES", "fqn": ["SDG_Vault_demo", "raw", "HUB_CLIENTES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "HUB_CLIENTES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla HUB que almacena las claves \u00fanicas de negocio de los CLIENTES consolidando su identificaci\u00f3n desde diferentes fuentes de datos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_CLIENTES", "created_at": 1754387772.563813, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.HUB_PAISES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "HUB_PAISES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.HUB_PAISES", "fqn": ["SDG_Vault_demo", "raw", "HUB_PAISES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "HUB_PAISES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla HUB que almacena las claves \u00fanicas de negocio de los PAISES consolidando su identificaci\u00f3n desde diferentes fuentes de datos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PAISES", "created_at": 1754387772.5642245, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.HUB_PARTES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "HUB_PARTES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.HUB_PARTES", "fqn": ["SDG_Vault_demo", "raw", "HUB_PARTES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "HUB_PARTES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla HUB que almacena las claves \u00fanicas de negocio de los PARTES consolidando su identificaci\u00f3n desde diferentes fuentes de datos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PARTES", "created_at": 1754387772.564649, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.HUB_PEDIDOS": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "HUB_PEDIDOS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.HUB_PEDIDOS", "fqn": ["SDG_Vault_demo", "raw", "HUB_PEDIDOS"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "HUB_PEDIDOS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla HUB que almacena las claves \u00fanicas de negocio de los PEDIDOS consolidando su identificaci\u00f3n desde diferentes fuentes de datos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PEDIDOS", "created_at": 1754387772.5650663, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.HUB_PROVEEDORES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "HUB_PROVEEDORES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.HUB_PROVEEDORES", "fqn": ["SDG_Vault_demo", "raw", "HUB_PROVEEDORES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "HUB_PROVEEDORES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla HUB que almacena las claves \u00fanicas de negocio de los PROVEEDORES consolidando su identificaci\u00f3n desde diferentes fuentes de datos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_PROVEEDORES", "created_at": 1754387772.565489, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.HUB_REGIONES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "HUB_REGIONES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.HUB_REGIONES", "fqn": ["SDG_Vault_demo", "raw", "HUB_REGIONES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "HUB_REGIONES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla HUB que almacena las claves \u00fanicas de negocio de los REGIONES (Continentes) consolidando su identificaci\u00f3n desde diferentes fuentes de datos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_REGIONES", "created_at": 1754387772.5659277, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.HUB_LINEAS_PEDIDOS": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "HUB_LINEAS_PEDIDOS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.HUB_LINEAS_PEDIDOS", "fqn": ["SDG_Vault_demo", "raw", "HUB_LINEAS_PEDIDOS"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "HUB_LINEAS_PEDIDOS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla HUB que almacena las claves \u00fanicas de negocio de las LINEAS DE PEDIDO consolidando su identificaci\u00f3n desde diferentes fuentes de datos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.HUB_LINEAS_PEDIDOS", "created_at": 1754387772.566352, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.LNK_CLIENTES_PEDIDOS": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "LNK_CLIENTES_PEDIDOS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.LNK_CLIENTES_PEDIDOS", "fqn": ["SDG_Vault_demo", "raw", "LNK_CLIENTES_PEDIDOS"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "LNK_CLIENTES_PEDIDOS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla LINK que representa la relaci\u00f3n entre CLIENTES Y PEDIDOS, consolidando v\u00ednculos transaccionales entre ambas entidades", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_CLIENTES_PEDIDOS", "created_at": 1754387772.566793, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.LNK_PAISES_CLIENTES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "LNK_PAISES_CLIENTES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.LNK_PAISES_CLIENTES", "fqn": ["SDG_Vault_demo", "raw", "LNK_PAISES_CLIENTES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "LNK_PAISES_CLIENTES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla LINK que representa la relaci\u00f3n entre PAISES Y CLIENTES, consolidando v\u00ednculos transaccionales entre ambas entidades", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PAISES_CLIENTES", "created_at": 1754387772.5672193, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.LNK_PAISES_PROVEEDORES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "LNK_PAISES_PROVEEDORES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.LNK_PAISES_PROVEEDORES", "fqn": ["SDG_Vault_demo", "raw", "LNK_PAISES_PROVEEDORES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "LNK_PAISES_PROVEEDORES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla LINK que representa la relaci\u00f3n entre PA\u00cdSES Y PROVEEDORES, consolidando v\u00ednculos transaccionales entre ambas entidades", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PAISES_PROVEEDORES", "created_at": 1754387772.567647, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.LNK_PARTES_LINEAS_PEDIDOS": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "LNK_PARTES_LINEAS_PEDIDOS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.LNK_PARTES_LINEAS_PEDIDOS", "fqn": ["SDG_Vault_demo", "raw", "LNK_PARTES_LINEAS_PEDIDOS"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "LNK_PARTES_LINEAS_PEDIDOS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla LINK que representa la relaci\u00f3n entre PARTES Y L\u00cdNEAS DE PEDIDOS, consolidando v\u00ednculos transaccionales entre ambas entidades", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PARTES_LINEAS_PEDIDOS", "created_at": 1754387772.56806, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.LNK_PEDIDOS_LINEAS_PEDIDOS": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "LNK_PEDIDOS_LINEAS_PEDIDOS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.LNK_PEDIDOS_LINEAS_PEDIDOS", "fqn": ["SDG_Vault_demo", "raw", "LNK_PEDIDOS_LINEAS_PEDIDOS"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "LNK_PEDIDOS_LINEAS_PEDIDOS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla LINK que representa la relaci\u00f3n entre PEDIDOS Y L\u00cdNEAS DE PEDIDOS, consolidando v\u00ednculos transaccionales entre ambas entidades", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PEDIDOS_LINEAS_PEDIDOS", "created_at": 1754387772.5684955, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.LNK_PROVEEDORES_LINEAS_PEDIDOS": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "LNK_PROVEEDORES_LINEAS_PEDIDOS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.LNK_PROVEEDORES_LINEAS_PEDIDOS", "fqn": ["SDG_Vault_demo", "raw", "LNK_PROVEEDORES_LINEAS_PEDIDOS"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "LNK_PROVEEDORES_LINEAS_PEDIDOS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla LINK que representa la relaci\u00f3n entre PROVEEDORES Y L\u00cdNEAS DE PEDIDOS, consolidando v\u00ednculos transaccionales entre ambas entidades", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PROVEEDORES_LINEAS_PEDIDOS", "created_at": 1754387772.5689101, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.LNK_PROVEEDORES_PARTES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "LNK_PROVEEDORES_PARTES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.LNK_PROVEEDORES_PARTES", "fqn": ["SDG_Vault_demo", "raw", "LNK_PROVEEDORES_PARTES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "LNK_PROVEEDORES_PARTES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla LINK que representa la relaci\u00f3n entre PROVEEDORES Y PARTES, consolidando v\u00ednculos transaccionales entre ambas entidades", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_PROVEEDORES_PARTES", "created_at": 1754387772.569312, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.LNK_REGIONES_PAISES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "LNK_REGIONES_PAISES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.LNK_REGIONES_PAISES", "fqn": ["SDG_Vault_demo", "raw", "LNK_REGIONES_PAISES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "LNK_REGIONES_PAISES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla LINK que representa la relaci\u00f3n entre REGIONES Y PAISES, consolidando v\u00ednculos transaccionales entre ambas entidades", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.LNK_REGIONES_PAISES", "created_at": 1754387772.5697165, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.SAT_CLIENTES_CONTACTO": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "SAT_CLIENTES_CONTACTO", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.SAT_CLIENTES_CONTACTO", "fqn": ["SDG_Vault_demo", "raw", "SAT_CLIENTES_CONTACTO"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "SAT_CLIENTES_CONTACTO", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla SAT\u00c9LITE que almacena los datos de CONTACTO DE CLIENTES, permitiendo la trazabilidad de sus cambios hist\u00f3ricos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CONTACTO", "created_at": 1754387772.5701177, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.SAT_CLIENTES_CUENTA": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "SAT_CLIENTES_CUENTA", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.SAT_CLIENTES_CUENTA", "fqn": ["SDG_Vault_demo", "raw", "SAT_CLIENTES_CUENTA"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "SAT_CLIENTES_CUENTA", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla SAT\u00c9LITE que almacena los datos de CUENTA DE CLIENTES, permitiendo la trazabilidad de sus cambios hist\u00f3ricos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_CLIENTES_CUENTA", "created_at": 1754387772.57052, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.SAT_LINEAS_PEDIDOS": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "SAT_LINEAS_PEDIDOS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.SAT_LINEAS_PEDIDOS", "fqn": ["SDG_Vault_demo", "raw", "SAT_LINEAS_PEDIDOS"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "SAT_LINEAS_PEDIDOS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla SAT\u00c9LITE que almacena los datos de LINEAS DE PEDIDOS, permitiendo la trazabilidad de sus cambios hist\u00f3ricos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_LINEAS_PEDIDOS", "created_at": 1754387772.570924, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.SAT_PAISES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "SAT_PAISES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.SAT_PAISES", "fqn": ["SDG_Vault_demo", "raw", "SAT_PAISES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "SAT_PAISES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla SAT\u00c9LITE que almacena los datos de PAISES, permitiendo la trazabilidad de sus cambios hist\u00f3ricos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PAISES", "created_at": 1754387772.5713224, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.SAT_PARTES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "SAT_PARTES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.SAT_PARTES", "fqn": ["SDG_Vault_demo", "raw", "SAT_PARTES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "SAT_PARTES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla SAT\u00c9LITE que almacena los datos de PARTES, permitiendo la trazabilidad de sus cambios hist\u00f3ricos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PARTES", "created_at": 1754387772.5717387, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.SAT_PARTES_PROVEEDORES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "SAT_PARTES_PROVEEDORES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.SAT_PARTES_PROVEEDORES", "fqn": ["SDG_Vault_demo", "raw", "SAT_PARTES_PROVEEDORES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "SAT_PARTES_PROVEEDORES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla SAT\u00c9LITE que almacena los datos de PARTES DE PROVEEDORES, permitiendo la trazabilidad de sus cambios hist\u00f3ricos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PARTES_PROVEEDORES", "created_at": 1754387772.5721385, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.SAT_PEDIDOS": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "SAT_PEDIDOS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.SAT_PEDIDOS", "fqn": ["SDG_Vault_demo", "raw", "SAT_PEDIDOS"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "SAT_PEDIDOS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla SAT\u00c9LITE que almacena los datos de PEDIDOS, permitiendo la trazabilidad de sus cambios hist\u00f3ricos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PEDIDOS", "created_at": 1754387772.5725372, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.SAT_PROVEEDORES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "SAT_PROVEEDORES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.SAT_PROVEEDORES", "fqn": ["SDG_Vault_demo", "raw", "SAT_PROVEEDORES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "SAT_PROVEEDORES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla SAT\u00c9LITE que almacena los datos de PROVEEDORES, permitiendo la trazabilidad de sus cambios hist\u00f3ricos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_PROVEEDORES", "created_at": 1754387772.5729327, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.raw.SAT_REGIONES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "SAT_REGIONES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.raw.SAT_REGIONES", "fqn": ["SDG_Vault_demo", "raw", "SAT_REGIONES"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "SAT_REGIONES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla SAT\u00c9LITE que almacena los datos de REGIONES (continentes), permitiendo la trazabilidad de sus cambios hist\u00f3ricos.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.SAT_REGIONES", "created_at": 1754387772.5733259, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.business.PIT_CLIENTES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "PIT_CLIENTES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.business.PIT_CLIENTES", "fqn": ["SDG_Vault_demo", "business", "PIT_CLIENTES"], "source_name": "business", "source_description": "", "loader": "", "identifier": "PIT_CLIENTES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla PIT para recuperar el estado hist\u00f3rico de los atributos de CLIENTES en una fecha espec\u00edfica a partir de sus sat\u00e9lites.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.PIT_CLIENTES", "created_at": 1754387772.573753, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.business.BRIDGE_PEDIDOS": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_BRONZE", "name": "BRIDGE_PEDIDOS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.business.BRIDGE_PEDIDOS", "fqn": ["SDG_Vault_demo", "business", "BRIDGE_PEDIDOS"], "source_name": "business", "source_description": "", "loader": "", "identifier": "BRIDGE_PEDIDOS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla BRIDGE conteniendo la relaci\u00f3n entre PEDIDOS Y CLIENTES en forma jer\u00e1rquica para facilitar an\u00e1lisis de hist\u00f3ricos completos", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_BRONZE.BRIDGE_PEDIDOS", "created_at": 1754387772.5741553, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_BRONZE", "doc_blocks": []}, "source.SDG_Vault_demo.mart.DIM1_PAISES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_SILVER", "name": "DIM1_PAISES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.mart.DIM1_PAISES", "fqn": ["SDG_Vault_demo", "mart", "DIM1_PAISES"], "source_name": "mart", "source_description": "", "loader": "", "identifier": "DIM1_PAISES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla de dimensi\u00f3n Tipo 1 de PAISES", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_SILVER.DIM1_PAISES", "created_at": 1754387772.574558, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_SILVER", "doc_blocks": []}, "source.SDG_Vault_demo.mart.DIM2_CLIENTES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_SILVER", "name": "DIM2_CLIENTES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.mart.DIM2_CLIENTES", "fqn": ["SDG_Vault_demo", "mart", "DIM2_CLIENTES"], "source_name": "mart", "source_description": "", "loader": "", "identifier": "DIM2_CLIENTES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla de dimensi\u00f3n Tipo 2 de CLIENTES", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_SILVER.DIM2_CLIENTES", "created_at": 1754387772.5749562, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_SILVER", "doc_blocks": []}, "source.SDG_Vault_demo.mart.FACT_CLIENTES_CUENTAS": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_SILVER", "name": "FACT_CLIENTES_CUENTAS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.mart.FACT_CLIENTES_CUENTAS", "fqn": ["SDG_Vault_demo", "mart", "FACT_CLIENTES_CUENTAS"], "source_name": "mart", "source_description": "", "loader": "", "identifier": "FACT_CLIENTES_CUENTAS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla de Hechoi Tipo 2 de CLIENTES", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_SILVER.FACT_CLIENTES_CUENTAS", "created_at": 1754387772.5753636, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_SILVER", "doc_blocks": []}, "source.SDG_Vault_demo.infomart.DIM1_CLIENTES": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_GOLD", "name": "DIM1_CLIENTES", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.infomart.DIM1_CLIENTES", "fqn": ["SDG_Vault_demo", "infomart", "DIM1_CLIENTES"], "source_name": "infomart", "source_description": "", "loader": "", "identifier": "DIM1_CLIENTES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla de dimensi\u00f3n Tipo 1 de CLIENTES", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_GOLD.DIM1_CLIENTES", "created_at": 1754387772.5758111, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_GOLD", "doc_blocks": []}, "source.SDG_Vault_demo.infomart.FACT_CLIENTES_PEDIDOS": {"database": "SDGVAULTMART", "schema": "DBT_SDGVAULT_GOLD", "name": "FACT_CLIENTES_PEDIDOS", "resource_type": "source", "package_name": "SDG_Vault_demo", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "unique_id": "source.SDG_Vault_demo.infomart.FACT_CLIENTES_PEDIDOS", "fqn": ["SDG_Vault_demo", "infomart", "FACT_CLIENTES_PEDIDOS"], "source_name": "infomart", "source_description": "", "loader": "", "identifier": "FACT_CLIENTES_PEDIDOS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabla de hechos de CLIENTES PEDIDOS con m\u00e9tricas calculadas", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "SDGVAULTMART.DBT_SDGVAULT_GOLD.FACT_CLIENTES_PEDIDOS", "created_at": 1754387772.5762277, "unrendered_database": "SDGVAULTMART", "unrendered_schema": "DBT_SDGVAULT_GOLD", "doc_blocks": []}}, "macros": {"macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9348063, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9353247, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9365842, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_object_metadata": {"name": "snowflake__show_object_metadata", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_object_metadata", "macro_sql": "{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.937155, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9380212, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9385352, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9390175, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9395955, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9406996, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9409997, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.941257, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9419875, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.942279, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.943017, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9445596, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9449198, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9453356, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9458046, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9459956, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9473517, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9479563, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9482737, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9484673, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9486027, "supported_languages": null}, "macro.dbt_snowflake.snowflake__catalog_equals": {"name": "snowflake__catalog_equals", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals", "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9488628, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.949281, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9501932, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\metadata.sql", "original_file_path": "macros\\metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9511337, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9514887, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.951964, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9569051, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.959059, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9594514, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9602506, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9607213, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\", \"insert_overwrite\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9640799, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=catalog_relation.table_format\n  ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to update the incremental model `\" ~ target_relation.identifier ~ \"` from `\" ~ existing_relation.table_format ~ \"` to `\" ~ target_relation.table_format ~ \"` due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in the new catalog.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.drop_relation_if_exists", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9701989, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9705303, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9732535, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.973781, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9744215, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=catalog_relation.table_format\n   ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9770014, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9776301, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.978579, "supported_languages": ["sql"]}, "macro.dbt_snowflake.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental\\insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) -%}\n  {{ adapter.dispatch('insert_overwrite_get_sql', 'dbt')(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__insert_overwrite_get_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9794426, "supported_languages": null}, "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql": {"name": "snowflake__insert_overwrite_get_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental\\insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql", "macro_sql": "{% macro snowflake__insert_overwrite_get_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dml -%}\n\n    {%- set overwrite_columns = config.get('overwrite_columns', []) -%}\n\n    {{ config.get('sql_header', '') }}\n\n    {% set target_columns_list = '(' ~ ', '.join(overwrite_columns) ~ ')' if overwrite_columns else '' %}\n    {% set source_query_columns_list = ', '.join(overwrite_columns) if overwrite_columns else '*' %}\n    insert overwrite into {{ target.render() }} {{ target_columns_list }}\n        select {{ source_query_columns_list }}\n        from {{ source.render() }}\n\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9805815, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\incremental\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9824047, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\incremental\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9829276, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\incremental\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9833493, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\incremental\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9836953, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql": {"name": "snowflake__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\incremental\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql", "macro_sql": "{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9856327, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\metadata\\list_relations_without_caching.sql", "original_file_path": "macros\\metadata\\list_relations_without_caching.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10000, max_results_per_iter=10000) %}\n\n    {%- if schema_relation is string -%}\n        {%- set schema = schema_relation -%}\n    {%- else -%}\n        {%- set schema = schema_relation.include(identifier=False) -%}\n    {%- endif -%}\n\n    {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n    {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n    {%- set too_many_relations_msg -%}\n        dbt is currently configured to list a maximum of {{ max_results_per_iter * max_iter }} objects per schema.\n        {{ schema }} exceeds this limit. If this is expected, you may configure this limit\n        by setting list_relations_per_page and list_relations_page_limit in your project flags.\n        It is recommended to start by increasing list_relations_page_limit.\n    {%- endset -%}\n\n    {%- set paginated_state = namespace(paginated_results=[], watermark=none) -%}\n\n    {#-\n        loop an extra time to catch the breach of max iterations\n        Note: while range is 0-based, loop.index starts at 1\n    -#}\n    {%- for _ in range(max_iter + 1) -%}\n\n        {#-\n            raise a warning and break if we still didn't exit and we're beyond the max iterations limit\n            Note: while range is 0-based, loop.index starts at 1\n        -#}\n        {%- if loop.index == max_iter + 1 -%}\n            {%- do exceptions.warn(too_many_relations_msg) -%}\n            {%- break -%}\n        {%- endif -%}\n\n        {%- set show_objects_sql = snowflake__show_objects_sql(schema, max_results_per_iter, paginated_state.watermark) -%}\n        {%- set paginated_result = run_query(show_objects_sql) -%}\n        {%- do paginated_state.paginated_results.append(paginated_result) -%}\n        {%- set paginated_state.watermark = paginated_result.columns.get('name').values()[-1] -%}\n\n        {#- we got less results than the max_results_per_iter (includes 0), meaning we reached the end -#}\n        {%- if (paginated_result | length) < max_results_per_iter -%}\n            {%- break -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {#- grab the first table in the paginated results to access the `merge` method -#}\n    {%- set agate_table = paginated_state.paginated_results[0] -%}\n    {%- do return(agate_table.merge(paginated_state.paginated_results)) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__show_objects_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9886935, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_objects_sql": {"name": "snowflake__show_objects_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\metadata\\list_relations_without_caching.sql", "original_file_path": "macros\\metadata\\list_relations_without_caching.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_objects_sql", "macro_sql": "{% macro snowflake__show_objects_sql(schema, max_results_per_iter=10000, watermark=none) %}\n\n{%- set _sql -%}\nshow objects in {{ schema }}\n    limit {{ max_results_per_iter }}\n    {% if watermark is not none -%} from '{{ watermark }}' {%- endif %}\n;\n{%- endset -%}\n\n{%- do return(_sql) -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9893408, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9899569, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_backup_sql": {"name": "snowflake__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_backup_sql", "macro_sql": "{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9905837, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9911118, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9915853, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql": {"name": "snowflake__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql", "macro_sql": "{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9920745, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9927466, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\alter.sql", "original_file_path": "macros\\relations\\dynamic_table\\alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9942837, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\create.sql", "original_file_path": "macros\\relations\\dynamic_table\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n        {{ snowflake__create_dynamic_table_info_schema_sql(dynamic_table, relation, compiled_code) }}\n    {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n        {{ snowflake__create_dynamic_table_built_in_sql(dynamic_table, relation, compiled_code) }}\n    {%- else -%}\n        {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql", "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9957948, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql": {"name": "snowflake__create_dynamic_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\create.sql", "original_file_path": "macros\\relations\\dynamic_table\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql", "macro_sql": "{% macro snowflake__create_dynamic_table_info_schema_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that creates an info schema dynamic table\n\n    Implements CREATE DYNAMIC TABLE:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic info schema table.\n-#}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        {{ optional('with row access policy', dynamic_table.row_access_policy, equals_char='') }}\n        {{ optional('with tag', dynamic_table.table_tag, quote_char='(', equals_char='') }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9967287, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql": {"name": "snowflake__create_dynamic_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\create.sql", "original_file_path": "macros\\relations\\dynamic_table\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql", "macro_sql": "{% macro snowflake__create_dynamic_table_built_in_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that creates a dynamic iceberg table\n\n    Implements CREATE DYNAMIC ICEBERG TABLE (Snowflake as the Iceberg catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    create dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n        catalog = 'SNOWFLAKE'  -- required, and always SNOWFLAKE for built-in Iceberg tables\n        base_location = '{{ catalog_relation.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        {{ optional('row_access_policy', dynamic_table.row_access_policy) }}\n        {{ optional('table_tag', dynamic_table.table_tag) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.997827, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\describe.sql", "original_file_path": "macros\\relations\\dynamic_table\\describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n    {%- set results = adapter.describe_dynamic_table(relation) -%}\n    {%- do return(results) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.998272, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\drop.sql", "original_file_path": "macros\\relations\\dynamic_table\\drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.998534, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\refresh.sql", "original_file_path": "macros\\relations\\dynamic_table\\refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387770.9989045, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\replace.sql", "original_file_path": "macros\\relations\\dynamic_table\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n    Produce DDL that replaces a dynamic table with a new dynamic table\n\n    Args:\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Globals:\n    - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n    Returns:\n        A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {%- if catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n        {{ snowflake__replace_dynamic_table_info_schema_sql(dynamic_table, relation, sql) }}\n    {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n        {{ snowflake__replace_dynamic_table_built_in_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql", "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0005045, "supported_languages": null}, "macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql": {"name": "snowflake__replace_dynamic_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\replace.sql", "original_file_path": "macros\\relations\\dynamic_table\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql", "macro_sql": "{% macro snowflake__replace_dynamic_table_info_schema_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that replaces an info schema dynamic table with a new info schema dynamic table\n\n    This follows the syntax outlined here:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic info schema table.\n-#}\n\ncreate or replace dynamic table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    {{ optional('with row access policy', dynamic_table.row_access_policy, equals_char='') }}\n    {{ optional('with tag', dynamic_table.table_tag, quote_char='(', equals_char='') }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0013971, "supported_languages": null}, "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql": {"name": "snowflake__replace_dynamic_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\replace.sql", "original_file_path": "macros\\relations\\dynamic_table\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql", "macro_sql": "{% macro snowflake__replace_dynamic_table_built_in_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n\n    This follows the syntax outlined here:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\ncreate or replace dynamic iceberg table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'snowflake'\n    base_location = '{{ catalog_relation.base_location }}'\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    {{ optional('row_access_policy', dynamic_table.row_access_policy) }}\n    {{ optional('table_tag', dynamic_table.table_tag) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0024846, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {%- if language == 'sql' -%}\n        {%- if temporary -%}\n            {{ snowflake__create_table_temporary_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n            {{ snowflake__create_table_info_schema_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n            {{ snowflake__create_table_built_in_sql(relation, compiled_code) }}\n        {%- else -%}\n            {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n        {%- endif -%}\n\n    {%- elif language == 'python' -%}\n        {%- if catalog_relation.catalog_type == 'BUILT_IN' %}\n            {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n        {%- else -%}\n            {{ py_write_table(compiled_code, relation) }}\n        {%- endif %}\n\n    {%- else -%}\n        {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_temporary_sql", "macro.dbt_snowflake.snowflake__create_table_info_schema_sql", "macro.dbt_snowflake.snowflake__create_table_built_in_sql", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0056937, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_temporary_sql": {"name": "snowflake__create_table_temporary_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_temporary_sql", "macro_sql": "{% macro snowflake__create_table_temporary_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE TEMPORARY TABLE and CREATE TEMPORARY TABLE ... AS SELECT:\n    https://docs.snowflake.com/en/sql-reference/sql/create-table\n    https://docs.snowflake.com/en/sql-reference/sql/create-table#create-table-as-select-also-referred-to-as-ctas\n-#}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace temporary table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\nas (\n    {{ compiled_code }}\n    )\n;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0066767, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_info_schema_sql": {"name": "snowflake__create_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_info_schema_sql", "macro_sql": "{% macro snowflake__create_table_info_schema_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE TABLE and CREATE TABLE ... AS SELECT:\n    https://docs.snowflake.com/en/sql-reference/sql/create-table\n    https://docs.snowflake.com/en/sql-reference/sql/create-table#create-table-as-select-also-referred-to-as-ctas\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- if catalog_relation.is_transient -%}\n    {%- set transient='transient ' -%}\n{%- else -%}\n    {%- set transient='' -%}\n{%- endif -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set row_access_policy = config.get('row_access_policy', default=none) -%}\n{%- set table_tag = config.get('table_tag', default=none) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace {{ transient }}table {{ relation }}\n    {%- set contract_config = config.get('contract') -%}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {% if copy_grants -%} copy grants {%- endif %}\n    {% if row_access_policy -%} with row access policy {{ row_access_policy }} {%- endif %}\n    {% if table_tag -%} with tag ({{ table_tag }}) {%- endif %}\n    as (\n        {%- if catalog_relation.cluster_by is not none -%}\n        select * from (\n            {{ compiled_code }}\n        )\n        order by (\n            {{ catalog_relation.cluster_by }}\n        )\n        {%- else -%}\n        {{ compiled_code }}\n        {%- endif %}\n    )\n;\n\n{% if catalog_relation.cluster_by is not none -%}\nalter table {{ relation }} cluster by ({{ catalog_relation.cluster_by }});\n{%- endif -%}\n\n{% if catalog_relation.automatic_clustering and catalog_relation.cluster_by is not none %}\nalter table {{ relation }} resume recluster;\n{%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.009372, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_built_in_sql": {"name": "snowflake__create_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_built_in_sql", "macro_sql": "{% macro snowflake__create_table_built_in_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE ICEBERG TABLE and CREATE ICEBERG TABLE ... AS SELECT (Snowflake as the Iceberg catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table-snowflake\n\n    Limitations:\n    - Iceberg does not support temporary tables (use a standard Snowflake table)\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set row_access_policy = config.get('row_access_policy', default=none) -%}\n{%- set table_tag = config.get('table_tag', default=none) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace iceberg table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'SNOWFLAKE'  -- required, and always SNOWFLAKE for built-in Iceberg tables\n    base_location = '{{ catalog_relation.base_location }}'\n    {{ optional('storage_serialization_policy', catalog_relation.storage_serialization_policy, \"'\")}}\n    {{ optional('max_data_extension_time_in_days', catalog_relation.max_data_extension_time_in_days)}}\n    {{ optional('data_retention_time_in_days', catalog_relation.data_retention_time_in_days)}}\n    {{ optional('change_tracking', catalog_relation.change_tracking)}}\n    {% if row_access_policy -%} with row access policy {{ row_access_policy }} {%- endif %}\n    {% if table_tag -%} with tag ({{ table_tag }}) {%- endif %}\n    {% if copy_grants -%} copy grants {%- endif %}\nas (\n    {%- if catalog_relation.cluster_by is not none -%}\n    select * from (\n        {{ compiled_code }}\n    )\n    order by (\n        {{ catalog_relation.cluster_by }}\n    )\n    {%- else -%}\n    {{ compiled_code }}\n    {%- endif %}\n    )\n;\n\n{% if catalog_relation.cluster_by is not none -%}\nalter iceberg table {{ relation }} cluster by ({{ catalog_relation.cluster_by }});\n{%- endif -%}\n\n{% if catalog_relation.automatic_clustering and catalog_relation.cluster_by is not none %}\nalter iceberg table {{ relation }} resume recluster;\n{%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0124176, "supported_languages": null}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{% if catalog_relation.is_transient %}\n    {%- set table_type='transient' -%}\n{% endif %}\n\n{{ compiled_code }}\n\n\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n            session.use_database(target_relation.database)\n            session.use_schema(target_relation.schema)\n            # session.write_pandas does not have overwrite function\n            df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0131629, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0134835, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0138862, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0142486, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set row_access_policy = config.get('row_access_policy', default=none) -%}\n  {%- set table_tag = config.get('table_tag', default=none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %}\n  {% if row_access_policy -%} with row access policy {{ row_access_policy }} {%- endif %}\n  {% if table_tag -%} with tag ({{ table_tag }}) {%- endif %}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0169806, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0172665, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.019114, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0194118, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0198288, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0201628, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0205019, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0207496, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0214658, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0218124, "supported_languages": null}, "macro.dbt_snowflake.optional": {"name": "optional", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\optional.sql", "original_file_path": "macros\\utils\\optional.sql", "unique_id": "macro.dbt_snowflake.optional", "macro_sql": "{% macro optional(name, value, quote_char = '', equals_char = '= ') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. '\"', '(', etc.), leave blank if unnecessary\n--  - equals_char: the equals character to use (e.g. '= ')\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{%- set quote_char_right = ')' if quote_char == '(' else quote_char -%}\n{% if value is not none %}{{ name }} {{ equals_char }}{{ quote_char }}{{ value }}{{ quote_char_right }}{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0226622, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0230415, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0241966, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0245998, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0249403, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0251415, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0253348, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0255718, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0272613, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0274918, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.027793, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0280113, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0286717, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0290244, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0292454, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0301354, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0305276, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0309038, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.031262, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0316427, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.032814, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0331287, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0335627, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0339355, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0358853, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0376496, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0379467, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0385118, "supported_languages": null}, "macro.dbt.get_list_of_column_names": {"name": "get_list_of_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_list_of_column_names", "macro_sql": "\n\n{%- macro get_list_of_column_names(columns) -%}\n  {% set col_names = [] %}\n  {% for col in columns %}\n    {% do col_names.append(col.name) %}\n  {% endfor %}\n  {{ return(col_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0390298, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.039405, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0397744, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0400789, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.042054, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0426724, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.04298, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0435503, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0439162, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0450282, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0454543, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.quoted }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.quoted }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0468411, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0476086, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0483193, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.048696, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0492382, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0500076, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.050252, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0505388, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0512438, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0515647, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0518043, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0520759, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.052303, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0535781, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0540514, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0544176, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0548756, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.055188, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0554712, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.055786, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.056206, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0565565, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0571039, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0574179, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0576973, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0580068, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0582802, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0585809, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0588446, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0591824, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.059477, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0602615, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.060609, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.060968, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0612628, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.061712, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.062538, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0636518, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0639472, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0646374, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0651605, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0655675, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0661077, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.066423, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0667365, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0671506, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.068063, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0684538, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.068699, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0692701, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0700493, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0703442, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0706873, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0713582, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.071682, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0720205, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0727444, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0730083, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0732574, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0734549, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0741756, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0744846, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0746274, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0749066, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0751834, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0756524, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0760403, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.077261, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0793226, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0806072, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.081038, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0832057, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0841649, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.084686, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0856183, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0861478, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0866647, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0870943, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.087723, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0883954, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0890145, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0894692, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0901735, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0906682, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0911648, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0916874, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0922282, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0927804, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0942776, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0946422, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0949028, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0951583, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.095426, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0979292, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0986202, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.0990608, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1012723, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1016777, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1027813, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table.sql", "original_file_path": "macros\\materializations\\models\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.106293, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view.sql", "original_file_path": "macros\\materializations\\models\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.10984, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1102998, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1105356, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% if target_relation.database == defer_relation.database and\n            target_relation.schema == defer_relation.schema and\n            target_relation.identifier == defer_relation.identifier %}\n        {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n      {% else %}\n        {% call statement('main') %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n      {% endif %}\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1146774, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1152241, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.11553, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.116784, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1177588, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1188433, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1192265, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1204114, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1276867, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1287565, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.130341, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1331754, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1335988, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.134774, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1352096, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1362252, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1379716, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.139884, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1417406, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1431146, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1440628, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1444411, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.144752, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1451995, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.145484, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.145917, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1461995, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.146594, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1468825, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1471224, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.147446, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1477091, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1481485, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.149494, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.150929, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1512988, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1520884, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1523912, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1526248, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1528628, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1530612, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1533155, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1535068, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.154245, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1545272, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1564314, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1603112, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1631634, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column {{ adapter.quote(column.name) }} {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.163715, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1639938, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1641548, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.164418, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1646135, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.164934, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1653228, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n            {%- if strategy.hard_deletes == 'new_record' %}\n            and not (\n                --avoid updating the record's valid_to if the latest entry is marked as deleted\n                snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n                and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n            {%- endif %}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set snapshotted_cols = get_list_of_column_names(get_columns_in_relation(target_relation)) %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {#\n                If a column has been added to the source it won't yet exist in the\n                snapshotted table so we insert a null value as a placeholder for the column.\n             #}\n            {%- for col in source_sql_cols -%}\n            {%- if col.name in snapshotted_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {%- else -%}\n            NULL as {{ adapter.quote(col.column) }},\n            {%- endif -%}\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        and not (\n            --avoid inserting a new record if the latest one is marked as deleted\n            snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n            and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_list_of_column_names", "macro.dbt.get_columns_in_relation", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.171742, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1721034, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1729438, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.173623, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1745772, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1752732, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.175721, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1762938, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1771939, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.17755, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1778853, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1844072, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1851308, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1864605, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1900437, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1903596, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1907864, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1923323, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1926007, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.19288, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1951096, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.197362, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1981966, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.198695, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.1990247, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2000153, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2036054, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\unit.sql", "original_file_path": "macros\\materializations\\tests\\unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2060232, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2066245, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2073271, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.20842, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2087, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2102532, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2109323, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2118483, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2126122, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2127442, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2133663, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2141194, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.214645, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2150948, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2156668, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2161033, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2170007, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2176902, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2180285, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2183805, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2187238, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2192383, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2195954, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2203228, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2210526, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2213945, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2219055, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.222425, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2227867, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2236469, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.225549, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2260287, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2264051, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2274916, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2277162, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2286196, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.228906, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.229128, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2311273, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.231744, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2322943, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2331514, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2334735, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2339354, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2341807, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.234596, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.234838, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2352312, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2354443, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2359304, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2361648, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2365675, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2368088, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2372773, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2375321, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.238416, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2390969, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2397952, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.240885, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2416089, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.241898, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2421906, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.242615, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2428393, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2432504, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2434971, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2439086, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2441487, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2447095, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2449727, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2452695, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2459762, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2463598, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2465613, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2469735, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2472205, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2479718, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2482264, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2499776, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2503042, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2506995, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.254482, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2553842, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2571974, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2575407, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2577176, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2581327, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.25831, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2587514, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2589777, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2594023, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2596247, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2602046, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2605948, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.260972, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2611544, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.261579, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2618055, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2621768, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2624307, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2628083, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2630155, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2640219, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2643003, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.264586, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.264853, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2651136, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.265355, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2656093, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.265906, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.266168, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.266414, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.266668, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2668965, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.267174, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2674043, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2679324, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2683961, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2688963, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.269176, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2696881, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.269995, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.270752, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.271727, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2721188, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2727015, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2731466, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2733722, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.273869, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2747371, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2751691, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2753973, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2757668, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2759023, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2765355, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2772083, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2775114, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2783484, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.278759, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2790213, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2793965, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2795374, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2800295, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2805195, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2807639, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2811453, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2813306, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.282017, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2826738, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.283081, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2832582, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2836874, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2839339, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2844036, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2846715, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2850986, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2853189, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.28575, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2859929, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2865524, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.286827, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2871847, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2878573, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.28828, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2887628, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1754387771.2892122, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.SDG_Vault_demo.bridge_pedidos": ["source.SDG_Vault_demo.raw.HUB_CLIENTES", "source.SDG_Vault_demo.raw.HUB_PAISES", "source.SDG_Vault_demo.raw.HUB_PEDIDOS", "source.SDG_Vault_demo.raw.LNK_CLIENTES_PEDIDOS", "source.SDG_Vault_demo.raw.LNK_PAISES_CLIENTES"], "model.SDG_Vault_demo.pit_clientes": ["source.SDG_Vault_demo.raw.HUB_CLIENTES", "source.SDG_Vault_demo.raw.SAT_CLIENTES_CONTACTO", "source.SDG_Vault_demo.raw.SAT_CLIENTES_CUENTA"], "model.SDG_Vault_demo.v_business_bridge_pedidos_eu": ["source.SDG_Vault_demo.business.BRIDGE_PEDIDOS"], "model.SDG_Vault_demo.dim1_clientes": ["source.SDG_Vault_demo.business.PIT_CLIENTES", "source.SDG_Vault_demo.raw.HUB_CLIENTES", "source.SDG_Vault_demo.raw.SAT_CLIENTES_CUENTA"], "model.SDG_Vault_demo.fact_clientes_pedidos": ["source.SDG_Vault_demo.business.BRIDGE_PEDIDOS", "source.SDG_Vault_demo.raw.LNK_PEDIDOS_LINEAS_PEDIDOS", "source.SDG_Vault_demo.raw.SAT_PEDIDOS"], "model.SDG_Vault_demo.dim1_paises": ["source.SDG_Vault_demo.raw.LNK_REGIONES_PAISES", "source.SDG_Vault_demo.raw.SAT_PAISES"], "model.SDG_Vault_demo.dim2_clientes": ["source.SDG_Vault_demo.raw.HUB_CLIENTES", "source.SDG_Vault_demo.raw.SAT_CLIENTES_CUENTA"], "model.SDG_Vault_demo.fact_clientes_cuentas": ["source.SDG_Vault_demo.business.PIT_CLIENTES", "source.SDG_Vault_demo.raw.SAT_CLIENTES_CUENTA"], "model.SDG_Vault_demo.hub_clientes": ["source.SDG_Vault_demo.stg.STG_CLIENTES"], "model.SDG_Vault_demo.hub_lineas_pedidos": ["source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO"], "model.SDG_Vault_demo.hub_paises": ["source.SDG_Vault_demo.stg.STG_PAISES"], "model.SDG_Vault_demo.hub_partes": ["source.SDG_Vault_demo.stg.STG_PARTES"], "model.SDG_Vault_demo.hub_pedidos": ["source.SDG_Vault_demo.stg.STG_PEDIDOS"], "model.SDG_Vault_demo.hub_proveedores": ["source.SDG_Vault_demo.stg.STG_PROVEEDORES"], "model.SDG_Vault_demo.hub_regiones": ["source.SDG_Vault_demo.stg.STG_REGIONES"], "model.SDG_Vault_demo.lnk_clientes_pedidos": ["source.SDG_Vault_demo.raw.HUB_CLIENTES", "source.SDG_Vault_demo.raw.HUB_PEDIDOS", "source.SDG_Vault_demo.stg.STG_CLIENTES", "source.SDG_Vault_demo.stg.STG_PEDIDOS"], "model.SDG_Vault_demo.lnk_paises_clientes": ["source.SDG_Vault_demo.raw.HUB_CLIENTES", "source.SDG_Vault_demo.raw.HUB_PAISES", "source.SDG_Vault_demo.stg.STG_CLIENTES", "source.SDG_Vault_demo.stg.STG_PAISES"], "model.SDG_Vault_demo.lnk_paises_proveedores": ["source.SDG_Vault_demo.raw.HUB_PAISES", "source.SDG_Vault_demo.raw.HUB_PROVEEDORES", "source.SDG_Vault_demo.stg.STG_PAISES", "source.SDG_Vault_demo.stg.STG_PROVEEDORES"], "model.SDG_Vault_demo.lnk_partes_lineas_pedidos": ["source.SDG_Vault_demo.raw.HUB_LINEAS_PEDIDOS", "source.SDG_Vault_demo.raw.HUB_PARTES", "source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO", "source.SDG_Vault_demo.stg.STG_PARTES"], "model.SDG_Vault_demo.lnk_pedidos_lineas_pedidos": ["source.SDG_Vault_demo.raw.HUB_LINEAS_PEDIDOS", "source.SDG_Vault_demo.raw.HUB_PEDIDOS", "source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO", "source.SDG_Vault_demo.stg.STG_PEDIDOS"], "model.SDG_Vault_demo.lnk_proveedores_lineas_pedidos": ["source.SDG_Vault_demo.raw.HUB_LINEAS_PEDIDOS", "source.SDG_Vault_demo.raw.HUB_PROVEEDORES", "source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO", "source.SDG_Vault_demo.stg.STG_PROVEEDORES"], "model.SDG_Vault_demo.lnk_proveedores_partes": ["source.SDG_Vault_demo.raw.HUB_PARTES", "source.SDG_Vault_demo.raw.HUB_PROVEEDORES", "source.SDG_Vault_demo.stg.STG_PARTES", "source.SDG_Vault_demo.stg.STG_PARTES_PROVEEDOR", "source.SDG_Vault_demo.stg.STG_PROVEEDORES"], "model.SDG_Vault_demo.lnk_regiones_paises": ["source.SDG_Vault_demo.raw.HUB_PAISES", "source.SDG_Vault_demo.raw.HUB_REGIONES", "source.SDG_Vault_demo.stg.STG_PAISES", "source.SDG_Vault_demo.stg.STG_REGIONES"], "model.SDG_Vault_demo.sat_clientes_contacto": ["source.SDG_Vault_demo.raw.HUB_CLIENTES", "source.SDG_Vault_demo.stg.STG_CLIENTES"], "model.SDG_Vault_demo.sat_clientes_cuenta": ["source.SDG_Vault_demo.raw.HUB_CLIENTES", "source.SDG_Vault_demo.stg.STG_CLIENTES"], "model.SDG_Vault_demo.sat_lineas_pedidos": ["source.SDG_Vault_demo.raw.HUB_LINEAS_PEDIDOS", "source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO"], "model.SDG_Vault_demo.sat_paises": ["source.SDG_Vault_demo.raw.HUB_PAISES", "source.SDG_Vault_demo.stg.STG_PAISES"], "model.SDG_Vault_demo.sat_partes": ["source.SDG_Vault_demo.raw.HUB_PARTES", "source.SDG_Vault_demo.stg.STG_PARTES"], "model.SDG_Vault_demo.sat_partes_proveedores": ["source.SDG_Vault_demo.raw.HUB_PARTES", "source.SDG_Vault_demo.raw.HUB_PROVEEDORES", "source.SDG_Vault_demo.stg.STG_PARTES", "source.SDG_Vault_demo.stg.STG_PARTES_PROVEEDOR", "source.SDG_Vault_demo.stg.STG_PROVEEDORES"], "model.SDG_Vault_demo.sat_pedidos": ["source.SDG_Vault_demo.raw.HUB_PEDIDOS", "source.SDG_Vault_demo.stg.STG_PEDIDOS"], "model.SDG_Vault_demo.sat_proveedores": ["source.SDG_Vault_demo.raw.HUB_PROVEEDORES", "source.SDG_Vault_demo.stg.STG_PROVEEDORES"], "model.SDG_Vault_demo.sat_regiones": ["source.SDG_Vault_demo.raw.HUB_REGIONES", "source.SDG_Vault_demo.stg.STG_REGIONES"], "model.SDG_Vault_demo.v_hub_sat_pedidos_eu": ["source.SDG_Vault_demo.raw.HUB_PEDIDOS", "source.SDG_Vault_demo.raw.LNK_CLIENTES_PEDIDOS", "source.SDG_Vault_demo.raw.LNK_PAISES_CLIENTES", "source.SDG_Vault_demo.raw.SAT_PEDIDOS"], "model.SDG_Vault_demo.v_raw_lnk_clientes_pedidos_eu": ["source.SDG_Vault_demo.raw.LNK_CLIENTES_PEDIDOS", "source.SDG_Vault_demo.raw.LNK_PAISES_CLIENTES"], "model.SDG_Vault_demo.v_raw_lnk_paises_clientes_eu": ["source.SDG_Vault_demo.raw.LNK_PAISES_CLIENTES"], "model.SDG_Vault_demo.stg_clientes": ["source.SDG_Vault_demo.src.CUSTOMER"], "model.SDG_Vault_demo.stg_lineas_pedido": ["source.SDG_Vault_demo.src.LINEITEM"], "model.SDG_Vault_demo.stg_paises": ["source.SDG_Vault_demo.src.NATION"], "model.SDG_Vault_demo.stg_partes": ["source.SDG_Vault_demo.src.PART"], "model.SDG_Vault_demo.stg_partes_proveedor": ["source.SDG_Vault_demo.src.PARTSUPP"], "model.SDG_Vault_demo.stg_pedidos": ["source.SDG_Vault_demo.src.ORDERS"], "model.SDG_Vault_demo.stg_proveedores": ["source.SDG_Vault_demo.src.SUPPLIER"], "model.SDG_Vault_demo.stg_regiones": ["source.SDG_Vault_demo.src.REGION"], "model.SDG_Vault_demo.v_stg_clientes_pedidos_eu": ["model.SDG_Vault_demo.v_stg_regiones_paises", "source.SDG_Vault_demo.stg.STG_CLIENTES", "source.SDG_Vault_demo.stg.STG_PEDIDOS"], "model.SDG_Vault_demo.v_stg_provee_partes_pedidos_eu": ["model.SDG_Vault_demo.v_stg_regiones_paises", "source.SDG_Vault_demo.stg.STG_PARTES", "source.SDG_Vault_demo.stg.STG_PARTES_PROVEEDOR", "source.SDG_Vault_demo.stg.STG_PROVEEDORES"], "model.SDG_Vault_demo.v_stg_regiones_paises": ["source.SDG_Vault_demo.stg.STG_PAISES", "source.SDG_Vault_demo.stg.STG_REGIONES"], "analysis.SDG_Vault_demo.prueba": [], "seed.SDG_Vault_demo.clientes_elt": [], "seed.SDG_Vault_demo.paises_elt": [], "seed.SDG_Vault_demo.pedidos_elt": [], "source.SDG_Vault_demo.src.CUSTOMER": [], "source.SDG_Vault_demo.src.LINEITEM": [], "source.SDG_Vault_demo.src.NATION": [], "source.SDG_Vault_demo.src.ORDERS": [], "source.SDG_Vault_demo.src.PART": [], "source.SDG_Vault_demo.src.PARTSUPP": [], "source.SDG_Vault_demo.src.REGION": [], "source.SDG_Vault_demo.src.SUPPLIER": [], "source.SDG_Vault_demo.stg.STG_CLIENTES": [], "source.SDG_Vault_demo.stg.STG_PAISES": [], "source.SDG_Vault_demo.stg.STG_PARTES": [], "source.SDG_Vault_demo.stg.STG_PROVEEDORES": [], "source.SDG_Vault_demo.stg.STG_REGIONES": [], "source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO": [], "source.SDG_Vault_demo.stg.STG_PEDIDOS": [], "source.SDG_Vault_demo.stg.STG_PARTES_PROVEEDOR": [], "source.SDG_Vault_demo.stg.CLIENTES_ELT": [], "source.SDG_Vault_demo.stg.PAISES_ELT": [], "source.SDG_Vault_demo.stg.PEDIDOS_ELT": [], "source.SDG_Vault_demo.raw.HUB_CLIENTES": [], "source.SDG_Vault_demo.raw.HUB_PAISES": [], "source.SDG_Vault_demo.raw.HUB_PARTES": [], "source.SDG_Vault_demo.raw.HUB_PEDIDOS": [], "source.SDG_Vault_demo.raw.HUB_PROVEEDORES": [], "source.SDG_Vault_demo.raw.HUB_REGIONES": [], "source.SDG_Vault_demo.raw.HUB_LINEAS_PEDIDOS": [], "source.SDG_Vault_demo.raw.LNK_CLIENTES_PEDIDOS": [], "source.SDG_Vault_demo.raw.LNK_PAISES_CLIENTES": [], "source.SDG_Vault_demo.raw.LNK_PAISES_PROVEEDORES": [], "source.SDG_Vault_demo.raw.LNK_PARTES_LINEAS_PEDIDOS": [], "source.SDG_Vault_demo.raw.LNK_PEDIDOS_LINEAS_PEDIDOS": [], "source.SDG_Vault_demo.raw.LNK_PROVEEDORES_LINEAS_PEDIDOS": [], "source.SDG_Vault_demo.raw.LNK_PROVEEDORES_PARTES": [], "source.SDG_Vault_demo.raw.LNK_REGIONES_PAISES": [], "source.SDG_Vault_demo.raw.SAT_CLIENTES_CONTACTO": [], "source.SDG_Vault_demo.raw.SAT_CLIENTES_CUENTA": [], "source.SDG_Vault_demo.raw.SAT_LINEAS_PEDIDOS": [], "source.SDG_Vault_demo.raw.SAT_PAISES": [], "source.SDG_Vault_demo.raw.SAT_PARTES": [], "source.SDG_Vault_demo.raw.SAT_PARTES_PROVEEDORES": [], "source.SDG_Vault_demo.raw.SAT_PEDIDOS": [], "source.SDG_Vault_demo.raw.SAT_PROVEEDORES": [], "source.SDG_Vault_demo.raw.SAT_REGIONES": [], "source.SDG_Vault_demo.business.PIT_CLIENTES": [], "source.SDG_Vault_demo.business.BRIDGE_PEDIDOS": [], "source.SDG_Vault_demo.mart.DIM1_PAISES": [], "source.SDG_Vault_demo.mart.DIM2_CLIENTES": [], "source.SDG_Vault_demo.mart.FACT_CLIENTES_CUENTAS": [], "source.SDG_Vault_demo.infomart.DIM1_CLIENTES": [], "source.SDG_Vault_demo.infomart.FACT_CLIENTES_PEDIDOS": []}, "child_map": {"model.SDG_Vault_demo.bridge_pedidos": [], "model.SDG_Vault_demo.pit_clientes": [], "model.SDG_Vault_demo.v_business_bridge_pedidos_eu": [], "model.SDG_Vault_demo.dim1_clientes": [], "model.SDG_Vault_demo.fact_clientes_pedidos": [], "model.SDG_Vault_demo.dim1_paises": [], "model.SDG_Vault_demo.dim2_clientes": [], "model.SDG_Vault_demo.fact_clientes_cuentas": [], "model.SDG_Vault_demo.hub_clientes": [], "model.SDG_Vault_demo.hub_lineas_pedidos": [], "model.SDG_Vault_demo.hub_paises": [], "model.SDG_Vault_demo.hub_partes": [], "model.SDG_Vault_demo.hub_pedidos": [], "model.SDG_Vault_demo.hub_proveedores": [], "model.SDG_Vault_demo.hub_regiones": [], "model.SDG_Vault_demo.lnk_clientes_pedidos": [], "model.SDG_Vault_demo.lnk_paises_clientes": [], "model.SDG_Vault_demo.lnk_paises_proveedores": [], "model.SDG_Vault_demo.lnk_partes_lineas_pedidos": [], "model.SDG_Vault_demo.lnk_pedidos_lineas_pedidos": [], "model.SDG_Vault_demo.lnk_proveedores_lineas_pedidos": [], "model.SDG_Vault_demo.lnk_proveedores_partes": [], "model.SDG_Vault_demo.lnk_regiones_paises": [], "model.SDG_Vault_demo.sat_clientes_contacto": [], "model.SDG_Vault_demo.sat_clientes_cuenta": [], "model.SDG_Vault_demo.sat_lineas_pedidos": [], "model.SDG_Vault_demo.sat_paises": [], "model.SDG_Vault_demo.sat_partes": [], "model.SDG_Vault_demo.sat_partes_proveedores": [], "model.SDG_Vault_demo.sat_pedidos": [], "model.SDG_Vault_demo.sat_proveedores": [], "model.SDG_Vault_demo.sat_regiones": [], "model.SDG_Vault_demo.v_hub_sat_pedidos_eu": [], "model.SDG_Vault_demo.v_raw_lnk_clientes_pedidos_eu": [], "model.SDG_Vault_demo.v_raw_lnk_paises_clientes_eu": [], "model.SDG_Vault_demo.stg_clientes": [], "model.SDG_Vault_demo.stg_lineas_pedido": [], "model.SDG_Vault_demo.stg_paises": [], "model.SDG_Vault_demo.stg_partes": [], "model.SDG_Vault_demo.stg_partes_proveedor": [], "model.SDG_Vault_demo.stg_pedidos": [], "model.SDG_Vault_demo.stg_proveedores": [], "model.SDG_Vault_demo.stg_regiones": [], "model.SDG_Vault_demo.v_stg_clientes_pedidos_eu": [], "model.SDG_Vault_demo.v_stg_provee_partes_pedidos_eu": [], "model.SDG_Vault_demo.v_stg_regiones_paises": ["model.SDG_Vault_demo.v_stg_clientes_pedidos_eu", "model.SDG_Vault_demo.v_stg_provee_partes_pedidos_eu"], "analysis.SDG_Vault_demo.prueba": [], "seed.SDG_Vault_demo.clientes_elt": [], "seed.SDG_Vault_demo.paises_elt": [], "seed.SDG_Vault_demo.pedidos_elt": [], "source.SDG_Vault_demo.src.CUSTOMER": ["model.SDG_Vault_demo.stg_clientes"], "source.SDG_Vault_demo.src.LINEITEM": ["model.SDG_Vault_demo.stg_lineas_pedido"], "source.SDG_Vault_demo.src.NATION": ["model.SDG_Vault_demo.stg_paises"], "source.SDG_Vault_demo.src.ORDERS": ["model.SDG_Vault_demo.stg_pedidos"], "source.SDG_Vault_demo.src.PART": ["model.SDG_Vault_demo.stg_partes"], "source.SDG_Vault_demo.src.PARTSUPP": ["model.SDG_Vault_demo.stg_partes_proveedor"], "source.SDG_Vault_demo.src.REGION": ["model.SDG_Vault_demo.stg_regiones"], "source.SDG_Vault_demo.src.SUPPLIER": ["model.SDG_Vault_demo.stg_proveedores"], "source.SDG_Vault_demo.stg.STG_CLIENTES": ["model.SDG_Vault_demo.hub_clientes", "model.SDG_Vault_demo.lnk_clientes_pedidos", "model.SDG_Vault_demo.lnk_paises_clientes", "model.SDG_Vault_demo.sat_clientes_contacto", "model.SDG_Vault_demo.sat_clientes_cuenta", "model.SDG_Vault_demo.v_stg_clientes_pedidos_eu"], "source.SDG_Vault_demo.stg.STG_PAISES": ["model.SDG_Vault_demo.hub_paises", "model.SDG_Vault_demo.lnk_paises_clientes", "model.SDG_Vault_demo.lnk_paises_proveedores", "model.SDG_Vault_demo.lnk_regiones_paises", "model.SDG_Vault_demo.sat_paises", "model.SDG_Vault_demo.v_stg_regiones_paises"], "source.SDG_Vault_demo.stg.STG_PARTES": ["model.SDG_Vault_demo.hub_partes", "model.SDG_Vault_demo.lnk_partes_lineas_pedidos", "model.SDG_Vault_demo.lnk_proveedores_partes", "model.SDG_Vault_demo.sat_partes", "model.SDG_Vault_demo.sat_partes_proveedores", "model.SDG_Vault_demo.v_stg_provee_partes_pedidos_eu"], "source.SDG_Vault_demo.stg.STG_PROVEEDORES": ["model.SDG_Vault_demo.hub_proveedores", "model.SDG_Vault_demo.lnk_paises_proveedores", "model.SDG_Vault_demo.lnk_proveedores_lineas_pedidos", "model.SDG_Vault_demo.lnk_proveedores_partes", "model.SDG_Vault_demo.sat_partes_proveedores", "model.SDG_Vault_demo.sat_proveedores", "model.SDG_Vault_demo.v_stg_provee_partes_pedidos_eu"], "source.SDG_Vault_demo.stg.STG_REGIONES": ["model.SDG_Vault_demo.hub_regiones", "model.SDG_Vault_demo.lnk_regiones_paises", "model.SDG_Vault_demo.sat_regiones", "model.SDG_Vault_demo.v_stg_regiones_paises"], "source.SDG_Vault_demo.stg.STG_LINEAS_PEDIDO": ["model.SDG_Vault_demo.hub_lineas_pedidos", "model.SDG_Vault_demo.lnk_partes_lineas_pedidos", "model.SDG_Vault_demo.lnk_pedidos_lineas_pedidos", "model.SDG_Vault_demo.lnk_proveedores_lineas_pedidos", "model.SDG_Vault_demo.sat_lineas_pedidos"], "source.SDG_Vault_demo.stg.STG_PEDIDOS": ["model.SDG_Vault_demo.hub_pedidos", "model.SDG_Vault_demo.lnk_clientes_pedidos", "model.SDG_Vault_demo.lnk_pedidos_lineas_pedidos", "model.SDG_Vault_demo.sat_pedidos", "model.SDG_Vault_demo.v_stg_clientes_pedidos_eu"], "source.SDG_Vault_demo.stg.STG_PARTES_PROVEEDOR": ["model.SDG_Vault_demo.lnk_proveedores_partes", "model.SDG_Vault_demo.sat_partes_proveedores", "model.SDG_Vault_demo.v_stg_provee_partes_pedidos_eu"], "source.SDG_Vault_demo.stg.CLIENTES_ELT": [], "source.SDG_Vault_demo.stg.PAISES_ELT": [], "source.SDG_Vault_demo.stg.PEDIDOS_ELT": [], "source.SDG_Vault_demo.raw.HUB_CLIENTES": ["model.SDG_Vault_demo.bridge_pedidos", "model.SDG_Vault_demo.dim1_clientes", "model.SDG_Vault_demo.dim2_clientes", "model.SDG_Vault_demo.lnk_clientes_pedidos", "model.SDG_Vault_demo.lnk_paises_clientes", "model.SDG_Vault_demo.pit_clientes", "model.SDG_Vault_demo.sat_clientes_contacto", "model.SDG_Vault_demo.sat_clientes_cuenta"], "source.SDG_Vault_demo.raw.HUB_PAISES": ["model.SDG_Vault_demo.bridge_pedidos", "model.SDG_Vault_demo.lnk_paises_clientes", "model.SDG_Vault_demo.lnk_paises_proveedores", "model.SDG_Vault_demo.lnk_regiones_paises", "model.SDG_Vault_demo.sat_paises"], "source.SDG_Vault_demo.raw.HUB_PARTES": ["model.SDG_Vault_demo.lnk_partes_lineas_pedidos", "model.SDG_Vault_demo.lnk_proveedores_partes", "model.SDG_Vault_demo.sat_partes", "model.SDG_Vault_demo.sat_partes_proveedores"], "source.SDG_Vault_demo.raw.HUB_PEDIDOS": ["model.SDG_Vault_demo.bridge_pedidos", "model.SDG_Vault_demo.lnk_clientes_pedidos", "model.SDG_Vault_demo.lnk_pedidos_lineas_pedidos", "model.SDG_Vault_demo.sat_pedidos", "model.SDG_Vault_demo.v_hub_sat_pedidos_eu"], "source.SDG_Vault_demo.raw.HUB_PROVEEDORES": ["model.SDG_Vault_demo.lnk_paises_proveedores", "model.SDG_Vault_demo.lnk_proveedores_lineas_pedidos", "model.SDG_Vault_demo.lnk_proveedores_partes", "model.SDG_Vault_demo.sat_partes_proveedores", "model.SDG_Vault_demo.sat_proveedores"], "source.SDG_Vault_demo.raw.HUB_REGIONES": ["model.SDG_Vault_demo.lnk_regiones_paises", "model.SDG_Vault_demo.sat_regiones"], "source.SDG_Vault_demo.raw.HUB_LINEAS_PEDIDOS": ["model.SDG_Vault_demo.lnk_partes_lineas_pedidos", "model.SDG_Vault_demo.lnk_pedidos_lineas_pedidos", "model.SDG_Vault_demo.lnk_proveedores_lineas_pedidos", "model.SDG_Vault_demo.sat_lineas_pedidos"], "source.SDG_Vault_demo.raw.LNK_CLIENTES_PEDIDOS": ["model.SDG_Vault_demo.bridge_pedidos", "model.SDG_Vault_demo.v_hub_sat_pedidos_eu", "model.SDG_Vault_demo.v_raw_lnk_clientes_pedidos_eu"], "source.SDG_Vault_demo.raw.LNK_PAISES_CLIENTES": ["model.SDG_Vault_demo.bridge_pedidos", "model.SDG_Vault_demo.v_hub_sat_pedidos_eu", "model.SDG_Vault_demo.v_raw_lnk_clientes_pedidos_eu", "model.SDG_Vault_demo.v_raw_lnk_paises_clientes_eu"], "source.SDG_Vault_demo.raw.LNK_PAISES_PROVEEDORES": [], "source.SDG_Vault_demo.raw.LNK_PARTES_LINEAS_PEDIDOS": [], "source.SDG_Vault_demo.raw.LNK_PEDIDOS_LINEAS_PEDIDOS": ["model.SDG_Vault_demo.fact_clientes_pedidos"], "source.SDG_Vault_demo.raw.LNK_PROVEEDORES_LINEAS_PEDIDOS": [], "source.SDG_Vault_demo.raw.LNK_PROVEEDORES_PARTES": [], "source.SDG_Vault_demo.raw.LNK_REGIONES_PAISES": ["model.SDG_Vault_demo.dim1_paises"], "source.SDG_Vault_demo.raw.SAT_CLIENTES_CONTACTO": ["model.SDG_Vault_demo.pit_clientes"], "source.SDG_Vault_demo.raw.SAT_CLIENTES_CUENTA": ["model.SDG_Vault_demo.dim1_clientes", "model.SDG_Vault_demo.dim2_clientes", "model.SDG_Vault_demo.fact_clientes_cuentas", "model.SDG_Vault_demo.pit_clientes"], "source.SDG_Vault_demo.raw.SAT_LINEAS_PEDIDOS": [], "source.SDG_Vault_demo.raw.SAT_PAISES": ["model.SDG_Vault_demo.dim1_paises"], "source.SDG_Vault_demo.raw.SAT_PARTES": [], "source.SDG_Vault_demo.raw.SAT_PARTES_PROVEEDORES": [], "source.SDG_Vault_demo.raw.SAT_PEDIDOS": ["model.SDG_Vault_demo.fact_clientes_pedidos", "model.SDG_Vault_demo.v_hub_sat_pedidos_eu"], "source.SDG_Vault_demo.raw.SAT_PROVEEDORES": [], "source.SDG_Vault_demo.raw.SAT_REGIONES": [], "source.SDG_Vault_demo.business.PIT_CLIENTES": ["model.SDG_Vault_demo.dim1_clientes", "model.SDG_Vault_demo.fact_clientes_cuentas"], "source.SDG_Vault_demo.business.BRIDGE_PEDIDOS": ["model.SDG_Vault_demo.fact_clientes_pedidos", "model.SDG_Vault_demo.v_business_bridge_pedidos_eu"], "source.SDG_Vault_demo.mart.DIM1_PAISES": [], "source.SDG_Vault_demo.mart.DIM2_CLIENTES": [], "source.SDG_Vault_demo.mart.FACT_CLIENTES_CUENTAS": [], "source.SDG_Vault_demo.infomart.DIM1_CLIENTES": [], "source.SDG_Vault_demo.infomart.FACT_CLIENTES_PEDIDOS": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}